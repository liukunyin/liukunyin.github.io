<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Scrapy应用(二)</title>
      <link href="/2019/10/17/scrapy-2/"/>
      <url>/2019/10/17/scrapy-2/</url>
      
        <content type="html"><![CDATA[<h1 id="仍然是那几个步骤"><a href="#仍然是那几个步骤" class="headerlink" title="仍然是那几个步骤"></a>仍然是那几个步骤</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#items</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">IpItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    ip <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">spider<span class="token operator">/</span>demo<span class="token punctuation">.</span>py<span class="token keyword">import</span> scrapy<span class="token keyword">from</span> ip<span class="token punctuation">.</span>items <span class="token keyword">import</span> IpItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"demo"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cn-proxy.com"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://cn-proxy.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        IP        '''</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        IP <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="table-container"]/table/tbody/tr'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> IP<span class="token punctuation">:</span>          item <span class="token operator">=</span> IpItem<span class="token punctuation">(</span><span class="token punctuation">)</span>          ip <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'td[position()=1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          duanko <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'td[position()=2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          item<span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ip<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>duanko          items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#pipelines.py</span><span class="token keyword">class</span> <span class="token class-name">IpPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>      fiename <span class="token operator">=</span> <span class="token string">'F:/爬虫/ip/ip.txt'</span>      <span class="token comment" spellcheck="true"># 从内存以追加的方式打开文件，并写入对应的数据</span>      <span class="token keyword">with</span> open<span class="token punctuation">(</span>fiename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>          f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#settings.py</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'ip.pipelines.IpPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="筛选无用代理"><a href="#筛选无用代理" class="headerlink" title="筛选无用代理"></a>筛选无用代理</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 引入这个库来获得map函数的并发版本</span><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool <span class="token keyword">as</span> ThreadPool<span class="token comment" spellcheck="true"># 定义全局变量</span>dir_path <span class="token operator">=</span> <span class="token string">'F:/爬虫/ip/'</span>alive_ip <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使得map并发！实例化pool对象</span>pool <span class="token operator">=</span> ThreadPool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置并发数量！</span>pool <span class="token operator">=</span> ThreadPool<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_alive</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    一个简单的函数，    来判断通过代理访问百度    筛选通过的代理保存到alive_ip中    '''</span>    <span class="token keyword">global</span> alive_ip    <span class="token comment" spellcheck="true">#设置代理头</span>    proxies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span> proxy<span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在测试：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proxies<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该代理：{}成功存活'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">)</span>            alive_ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该代理{}失效！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proxies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Out_file</span><span class="token punctuation">(</span>alive_ip<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将符合要求的代理写入文件    '''</span>    <span class="token keyword">global</span> dir_path    <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir_path <span class="token operator">+</span> <span class="token string">'alive_ip.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> ip <span class="token keyword">in</span> alive_ip<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ip <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有存活ip都已经写入文件！'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'blank.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 循环处理每行文件</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir_path <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 我们去掉lines每一项后面的\n\r之类的空格</span>        <span class="token comment" spellcheck="true"># 生成一个新的列表！</span>        proxys <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>y <span class="token keyword">for</span> y <span class="token keyword">in</span> lines<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一行代码解决多线程！</span>        pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>test_alive<span class="token punctuation">,</span>proxys<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将存活的ip写入文件</span>    Out_file<span class="token punctuation">(</span>alive_ip<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用函数！</span>test<span class="token punctuation">(</span><span class="token string">'ip.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DOWNLOAD_DELAY = 1//settings.py设置下载延迟</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy应用(一)</title>
      <link href="/2019/10/14/scrapy-1/"/>
      <url>/2019/10/14/scrapy-1/</url>
      
        <content type="html"><![CDATA[<h2 id="先创建一个工程"><a href="#先创建一个工程" class="headerlink" title="先创建一个工程"></a>先创建一个工程</h2><p>scrapy startproject game<br>cd game<br>scrapy genspider demo 4399.com</p><h2 id="编写items"><a href="#编写items" class="headerlink" title="编写items"></a>编写items</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">GameItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写spider"><a href="#编写spider" class="headerlink" title="编写spider"></a>编写spider</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> game<span class="token punctuation">.</span>items <span class="token keyword">import</span> GameItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"demo"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"4399.com"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://4399.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        name = 名字        img = 图标        url = 网址        '''</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        game_message <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="tm_list"]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> one <span class="token keyword">in</span> game_message<span class="token punctuation">:</span>          item <span class="token operator">=</span> GameItem<span class="token punctuation">(</span><span class="token punctuation">)</span>          item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> one<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'www.4399.com'</span><span class="token operator">+</span>one<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写PIPELINE："><a href="#编写PIPELINE：" class="headerlink" title="编写PIPELINE："></a>编写PIPELINE：</h2><p>我们知道，pipelines.py是用来处理收尾爬虫抓到的数据的，<br>一般情况下，我们会将数据存到本地：</p><ul><li>文本形式： 最基本的方式</li><li>json格式 ：方便其他程序员调用</li><li>数据库： 数据量多时</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文本</span><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> codecs<span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">GamePipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        处理每一个从SZtianqi传过来的item        fiename <span class="token operator">=</span> <span class="token string">'F:/爬虫/data/game.txt'</span>        <span class="token comment" spellcheck="true"># 从内存以追加的方式打开文件，并写入对应的数据</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>fiename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#json</span><span class="token keyword">class</span> <span class="token class-name">gjson</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        filename <span class="token operator">=</span> <span class="token string">'F:/爬虫/data/game.json'</span>        <span class="token comment" spellcheck="true"># 打开json文件，向里面以dumps的方式吸入数据</span>        <span class="token comment" spellcheck="true"># 注意需要有一个参数ensure_ascii=False ，不然数据会直接为utf编码的方式存入比如:“/xe15”</span>        <span class="token keyword">with</span> codecs<span class="token punctuation">.</span>open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            line <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数据库</span><span class="token keyword">class</span> <span class="token class-name">gmysql</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        将爬取的信息保存到mysql        '''</span>        <span class="token comment" spellcheck="true"># 将item里的数据拿出来</span>        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        url <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 和本地的scrapyDB数据库建立连接</span>        connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接的是本地数据库</span>            user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 自己的mysql用户名</span>            passwd<span class="token operator">=</span><span class="token string">'000323624'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 自己的密码</span>            db<span class="token operator">=</span><span class="token string">'scrapyDB'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># 数据库的名字</span>            charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 默认的编码方式：</span>            cursorclass<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 创建更新值的sql语句</span>                sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""INSERT INTO game(name,url)                        VALUES (%s, %s)"""</span>                <span class="token comment" spellcheck="true"># 执行sql语句</span>                <span class="token comment" spellcheck="true"># excute 的第二个参数可以将sql缺省语句补全，一般以元组的格式</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                    sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交本次插入的记录</span>            connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 关闭连接</span>            connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token punctuation">[</span>'name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写Settings-py"><a href="#编写Settings-py" class="headerlink" title="编写Settings.py"></a>编写Settings.py</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数字是优先级</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'game.pipelines.gmysql'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>   <span class="token string">'game.pipelines.GamePipeline'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>   <span class="token string">'game.pipelines.gjson'</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>注意<br>item[‘name’] = one.xpath(‘a/img/@alt’).extract()[0]<br>extract转化为列表 [0]获得第一个元素str</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy框架</title>
      <link href="/2019/10/13/scrapy/"/>
      <url>/2019/10/13/scrapy/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener">英文文档</a><br><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html" target="_blank" rel="noopener">中文文档</a></p><h2 id="Scrapy框架的具体使用："><a href="#Scrapy框架的具体使用：" class="headerlink" title="Scrapy框架的具体使用："></a>Scrapy框架的具体使用：</h2><h3 id="步骤一：创建一个工程和spider模板"><a href="#步骤一：创建一个工程和spider模板" class="headerlink" title="步骤一：创建一个工程和spider模板"></a>步骤一：创建一个工程和spider模板</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在一个目录里执行代码，创建工程名为zimuku</span>scrapy startproject zimuku<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>目录结构<br>├── zimuku                  #外层目录<br>│   ├── <strong>init</strong>.py         #初始化脚本<br>│   ├── <strong>pycache</strong>         #Python缓存文件。暂时无视<br>│   ├── items.py            #Items代码模板，继承类自scrapy.Item<br>│   ├── middlewares.py      #Middlewares代码模板(继承类)<br>│   ├── pipelines.py        #Pipelines代码模板(继承类)<br>│   ├── settings.py         #Scrapy爬虫的配置文件<br>│   └── spiders             #Spiders代码模板目录 我们写爬虫的地方<br>│       ├── <strong>init</strong>.py<br>│       └── <strong>pycache</strong><br>└── scrapy.cfg              #部署爬虫的配置文件</p></blockquote><p>进入到工程文件<br>cd zimuku<br>用命令行创建第一个Spider：<br>scrapy genspider demo <a href="http://zimuku.net" target="_blank" rel="noopener">http://zimuku.net</a></p><blockquote><p>战术总结<br>1.scrapy startproject zimuku<br>2.scrapy genspider demo <a href="http://zimuku.net" target="_blank" rel="noopener">http://zimuku.net</a></p></blockquote><h3 id="步骤二：编写Spider"><a href="#步骤二：编写Spider" class="headerlink" title="步骤二：编写Spider"></a>步骤二：编写Spider</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token comment" spellcheck="true"># 将我们需要爬的项目引入进来</span><span class="token keyword">from</span> zimuku<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZimukuItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#该爬虫的名字</span>    name <span class="token operator">=</span> <span class="token string">"demo"</span>    <span class="token comment" spellcheck="true">#规定爬虫爬取网页的域名</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zimuku.net"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#开始爬取的url链接</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://zimuku.net/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        parse()函数接收Response参数，就是网页爬取后返回的数据        用于处理响应，他负责解析爬取的内容        生成解析结果的字典，并返回新的需要爬取的请求        '''</span>        <span class="token comment" spellcheck="true">#由于是demo 我们不做完全的功能，</span>        <span class="token comment" spellcheck="true">#只要求爬取出第一个字幕的名字</span>        <span class="token comment" spellcheck="true">#xpath规则可以通过查看网页源文件得出</span>        name <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//b/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#建立一个items字典，用于保存我们爬到的结果，并返回给pipline处理</span>        items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        items<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">]</span><span class="token operator">=</span> name        <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤三：-编写Item、Pipeline"><a href="#步骤三：-编写Item、Pipeline" class="headerlink" title="步骤三： 编写Item、Pipeline"></a>步骤三： 编写Item、Pipeline</h3><p>itmes.py定义这个爬虫框架需要爬哪些内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ZimukuItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    subname <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字幕的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>piplines.py来处理spider爬到的内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ZimukuPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 只要求简单的话，</span>        <span class="token comment" spellcheck="true"># 我们把爬到的结果打印一下吧</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤四：-优化配置Settings-py"><a href="#步骤四：-优化配置Settings-py" class="headerlink" title="步骤四： 优化配置Settings.py"></a>步骤四： 优化配置Settings.py</h3><pre class="line-numbers language-python"><code class="language-python">BOT_NAME <span class="token operator">=</span> <span class="token string">'zimuku'</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'zimuku.spiders'</span><span class="token punctuation">]</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'zimuku.spiders'</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#只增加了这一行，通过配置告诉Scrapy明白是谁来处理结果</span>ITEM_PIPELINES<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'zimuku.pipelines.ZimukuPipeline'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获得结果"><a href="#获得结果" class="headerlink" title="获得结果"></a>获得结果</h3><p>scrapy crawl demo</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bs4库应用(三)</title>
      <link href="/2019/10/13/bs4-tieba2/"/>
      <url>/2019/10/13/bs4-tieba2/</url>
      
        <content type="html"><![CDATA[<h1 id="杀不尽的欧洲狗流不尽的非洲泪！"><a href="#杀不尽的欧洲狗流不尽的非洲泪！" class="headerlink" title="杀不尽的欧洲狗流不尽的非洲泪！"></a>杀不尽的欧洲狗流不尽的非洲泪！</h1><p><img src="1.png" alt=""></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">" ERROR "</span><span class="token keyword">def</span> <span class="token function">get_list</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#获取最大页数</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    list <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'l_pager pager_theme_4 pb_list_pager'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contents    max_page <span class="token operator">=</span>  re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"pn=(.+?)\""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    page <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入爬取页数&lt;="</span><span class="token operator">+</span>max_page<span class="token punctuation">)</span>    url_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'?pn='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> url_list<span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取中。。。"</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        list <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"BDE_Image"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num<span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'F:/爬虫/img/'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> li<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'wb+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束共获得"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个图片"</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"https://tieba.baidu.com/p/6289398506"</span>get_content<span class="token punctuation">(</span>get_list<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下图片<br>with open(‘F:/爬虫/img/‘ + str(num) + li[‘src’][-4:], ‘wb+’) as f:<br>                    f.write(requests.get(li[‘src’]).content)</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bs4库应用(二)</title>
      <link href="/2019/10/13/bs4s4-novel/"/>
      <url>/2019/10/13/bs4s4-novel/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.qu.la/paihangbang/" target="_blank" rel="noopener">受害者</a><br><img src="1.png" alt=""></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true"># 首先我们写好抓取网页的函数</span><span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">" ERROR "</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    爬取每一类型小说排行榜，    按顺序写入文件，    文件内容为 小说名字+小说链接    将内容保存到列表    并且返回一个装满url链接的列表    '''</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 速度有限只爬取第一个排行榜的小说，若果要全部则使用find_all+for循环</span>    cate <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'index_toplist mright mbottom'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> cate<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'toptab'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">.</span>string    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'novel_list.csv'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n小说种类：{} \n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 我们直接通过style属性来定位总排行榜</span>    general_list <span class="token operator">=</span> cate<span class="token punctuation">.</span>find<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'display: block;'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 找到全部的小说名字，发现他们全部都包含在li标签之中</span>    book_list <span class="token operator">=</span> general_list<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环遍历出每一个小说的的名字，以及链接</span>    <span class="token keyword">for</span> book <span class="token keyword">in</span> book_list<span class="token punctuation">:</span>        link <span class="token operator">=</span> <span class="token string">'http://www.qu.la/'</span> <span class="token operator">+</span> book<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> book<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 我们将所有文章的url地址保存在一个列表变量里</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>link<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这里使用a模式，防止清空文件</span>        <span class="token comment" spellcheck="true"># with open('novel_list.csv', 'a') as f:</span>        <span class="token comment" spellcheck="true">#     f.write("小说名：{:&lt;} \t 小说地址：{:&lt;} \n".format(title, link))</span>    <span class="token keyword">return</span> url_list<span class="token keyword">def</span> <span class="token function">get_txt_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取该小说每个章节的url地址：    '''</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    lista <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'dd'</span><span class="token punctuation">)</span>    txt_name <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'F:/爬虫/小说/{}.txt'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'小说标题：{} \n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> lista<span class="token punctuation">:</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'http://www.qu.la/'</span> <span class="token operator">+</span> url<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> url_list<span class="token punctuation">,</span> txt_name<span class="token keyword">def</span> <span class="token function">get_one_txt</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> txt_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取小说每个章节的文本    并写入到本地    '''</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;br />'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        txt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">'chaptererror();'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'F:/爬虫/小说/{}.txt'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">'\n\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前小说：{} 当前章节{} 已经下载完毕'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'someting wrong'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#爬取小说个数</span>list1 <span class="token operator">=</span> get_content<span class="token punctuation">(</span><span class="token string">"http://www.qu.la/paihangbang/"</span><span class="token punctuation">)</span>list2 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span><span class="token punctuation">:</span>        list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>get_txt_url<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#i[0][a:]从第a-11张开始（之前的url格式不同）</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            get_one_txt<span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>列表去重<br>lst = [1,1,1,2,2,3,4,5]<br>new_list = list(set(lst))<br>print(new_list)<br>//OUT:[1, 2, 3, 4, 5]</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bs4库应用(一)</title>
      <link href="/2019/10/12/bs4-tieba/"/>
      <url>/2019/10/12/bs4-tieba/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>从网上爬下特定页码的网页</li><li>对于爬下的页面内容进行简单的筛选分析</li><li>找到每一篇帖子的 标题、发帖人、日期、楼层、以及跳转链接</li><li>将结果保存到文本。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true"># 首先我们写好抓取网页的函数</span><span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>endcodding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_endconding        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">" ERROR "</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    分析贴吧的网页文件，整理信息，保存在列表变量中    '''</span>    <span class="token comment" spellcheck="true"># 初始化一个列表来保存所有的帖子信息：</span>    comments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 首先，我们把需要爬取信息的网页下载到本地</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 我们来做一锅汤</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分析网页代码找到所有具有‘ j_thread_list clearfix’属性的li标签。返回一个列表类型。</span>    liTags <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">' j_thread_list clearfix'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过循环找到每个帖子里的我们需要的信息：</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> liTags<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化一个字典来存储文章信息</span>        comment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 这里使用一个try except 防止爬虫找不到信息从而停止运行</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 开始筛选信息，并保存到字典中</span>            comment<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'a'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'j_th_tit '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comment<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://tieba.baidu.com/"</span> <span class="token operator">+</span> \                li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'j_th_tit '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>            comment<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'tb_icon_author '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comment<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'pull-right is_show_create_time'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comment<span class="token punctuation">[</span><span class="token string">'replyNum'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'threadlist_rep_num center_text'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comments<span class="token punctuation">.</span>append<span class="token punctuation">(</span>comment<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出了点小问题'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> comments<span class="token keyword">def</span> <span class="token function">Out2File</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将爬取到的文件写入到本地    保存到当前目录的 TTBT.txt文件中。    '''</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'TTBT.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> comment <span class="token keyword">in</span> dict<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'标题： {} \t 链接：{} \t 发帖人：{} \t 发帖时间：{} \t 回复数量： {} \n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                comment<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'replyNum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前页面爬取完成'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">:</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 将所有需要爬去的url存入列表</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">:</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_url <span class="token operator">+</span> <span class="token string">'&amp;pn='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有的网页已经下载到本地！ 开始筛选信息。。。。'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#循环写入所有的数据</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        content <span class="token operator">=</span> get_content<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        Out2File<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有的信息都已经保存完毕！'</span><span class="token punctuation">)</span>base_url <span class="token operator">=</span> <span class="token string">'https://tieba.baidu.com/f?kw=%E5%91%BD%E8%BF%90%E5%86%A0%E4%BD%8D%E6%8C%87%E5%AE%9A&amp;fr=index'</span><span class="token comment" spellcheck="true"># 设置需要爬取的页码数量</span>deep <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一个坑<br>with open(‘TTBT.txt’, ‘a+’) as f:<br>这样写可能有编码报错:UnicodeEncodeError: ‘gbk’ codec can’t encode character<br>改成这样:<br>with open(‘TTBT.txt’, ‘a+’, encoding=’utf-8’) as f:</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautiful Soup 爬虫</title>
      <link href="/2019/10/11/bs4/"/>
      <url>/2019/10/11/bs4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/26673214" target="_blank" rel="noopener">转自</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档¶</a></p><h2 id="bs4库的简单应用"><a href="#bs4库的简单应用" class="headerlink" title="bs4库的简单应用"></a>bs4库的简单应用</h2><p><a href="https://liukunyin.github.io/2019/10/11/request/#toc-heading-7">request.py</a><br>使用sublimetext会出现一些编码问题，先用pycharm吧</p><p><strong>使用lxml解析器来解释网页</strong></p><blockquote><p>bs4 库首先将传入的字符串或文件句柄转换为 Unicode的类型，这样，我们在抓取中文信息的时候，就不会有很麻烦的编码问题了。当然，有一些生僻的编码 如：‘big5’，就需要我们手动设置编码：<br>soup = BeautifulSoup(markup, from_encoding=”编码方式”)</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-11 21:00:57</span><span class="token keyword">import</span> request<span class="token comment" spellcheck="true">#导入bs4模块</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml <span class="token operator">=</span> request<span class="token punctuation">.</span>getHtmlText<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#做一个美味汤</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="对象的种类"><a href="#对象的种类" class="headerlink" title="对象的种类"></a>对象的种类</h2><p>bs4 库将复杂的html文档转化为一个复杂的树形结构，每个节点都是Python对象 ，所有对象可以分为以下四个类型：Tag , NavigableString , BeautifulSoup , Comment<br>我们来逐一解释：</p><ul><li>Tag： 和html中的Tag基本没有区别，可以简单上手使用</li><li>NavigableString： 被包裹在tag内的字符串</li><li>BeautifulSoup： 表示一个文档的全部内容，大部分的时候可以吧他看做一个tag对象，支持遍历文档树和搜索文档树方法。</li><li>Comment：这是一个特殊的NavigableSting对象，在出现在html文档中时，会以特殊的格式输出，比如注释类型。</li></ul><h3 id="几个结构化数据的方式"><a href="#几个结构化数据的方式" class="headerlink" title="几个结构化数据的方式"></a>几个结构化数据的方式</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#找到文档的title</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#title的name值</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#title中的字符串String</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#title的父亲节点的name属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#文档的第一个找到的段落</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到的p的class属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到a标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到所有的a标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到id值等于3的标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"link3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到所有class值为3的标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有文字内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将tag的子节点以列表方式输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过tag的 .children生成器，可以对tag的子节点进行循环</span><span class="token keyword">for</span> child <span class="token keyword">in</span> title_tag<span class="token punctuation">.</span>children<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到tag下的所有的文本内容</span><span class="token comment" spellcheck="true">#1.如果该tag只有一个子节点（NavigableString类型）：直接使用tag.string就能找到。</span><span class="token comment" spellcheck="true">#2.如果tag有很多个子、孙节点，并且每个节点里都string：我们可以用迭代的方式将其全部找出：</span><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>strings<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests库</title>
      <link href="/2019/10/11/request/"/>
      <url>/2019/10/11/request/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/26673214" target="_blank" rel="noopener">转自</a></p><h2 id="requests-request"><a href="#requests-request" class="headerlink" title="requests.request"></a>requests.request</h2><p><img src="1.png" alt=""><br>这些方法都是在requests.request的基础上创建的</p><pre class="line-numbers language-python"><code class="language-python">requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#以下两句等价</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/events'</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span>url<span class="token operator">=</span><span class="token string">"https://api.github.com/events"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get"></a>requests.get</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-11 21:00:57</span>这个方法可以接收三个参数，其中第二个默认为None 第三个可选<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#作用是模拟发起GET请求</span>Sends a GET request<span class="token punctuation">.</span><span class="token comment" spellcheck="true">#模拟获取页面的url链接</span><span class="token punctuation">:</span>param url<span class="token punctuation">:</span> URL <span class="token keyword">for</span> the new <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>Request object<span class="token punctuation">.</span><span class="token comment" spellcheck="true">#额外参数 字典或字节流格式，可选</span><span class="token punctuation">:</span>param params<span class="token punctuation">:</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> Dictionary <span class="token operator">or</span> bytes to be sent <span class="token keyword">in</span> the query string <span class="token keyword">for</span> the <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>Request<span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 十二个控制访问参数，比如可以自定义header</span><span class="token punctuation">:</span>param <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Optional arguments that request takes<span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 返回一个Response对象</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>Response <span class="token operator">&lt;</span>Response<span class="token operator">></span> object<span class="token punctuation">:</span>type<span class="token punctuation">:</span> requests<span class="token punctuation">.</span>Response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>kwargs: 控制访问的参数，均为可选项<br> params : 字典或字节序列，作为参数增加到url中<br> data : 字典、字节序列或文件对象，作为Request的内容 json : JSON格式的数据，作为Request的内容<br> headers : 字典，HTTP定制头<br> cookies : 字典或CookieJar，Request中的cookie<br> auth : 元组，支持HTTP认证功能<br> files : 字典类型，传输文件<br> timeout : 设定超时时间，秒为单位<br> proxies : 字典类型，设定访问代理服务器，可以增加登录认证<br> allow_redirects : True/False，默认为True，重定向开关<br> stream : True/False，默认为True，获取内容立即下载开关<br> verify : True/False，默认为True，认证SSL证书开关<br> cert : 本地SSL证书路径<br> url: 拟更新页面的url链接<br> data: 字典、字节序列或文件，Request的内容<br> json: JSON格式的数据，Request的内容</p></blockquote><hr><h2 id="常用的两个控制访问参数："><a href="#常用的两个控制访问参数：" class="headerlink" title="常用的两个控制访问参数："></a>常用的两个控制访问参数：</h2><h3 id="1-为了伪装成浏览器访问常设置head"><a href="#1-为了伪装成浏览器访问常设置head" class="headerlink" title="1.为了伪装成浏览器访问常设置head"></a>1.为了伪装成浏览器访问常设置head</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#常用Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span>hd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-agent'</span><span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''OUT:{'User-agent': '123', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置代理"><a href="#2-设置代理" class="headerlink" title="2.设置代理"></a>2.设置代理</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestspxs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'124.156.108.71:82'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://icanhazip.com/'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>pxs<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#OUT::124.156.108.71</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用Response对象方法"><a href="#常用Response对象方法" class="headerlink" title="常用Response对象方法"></a>常用Response对象方法</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置正确的编码方式(防止response.text编码错误)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding<span class="token comment" spellcheck="true">#HTTP请求的返回状态，比如，200表示成功，404表示失败</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#HTTP请求中的headers</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从header中猜测的响应的内容编码方式</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从内容中分析的编码方式（慢）</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>apparent_encoding<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># response.text 返回的是一个 unicode 型的文本数据</span><span class="token comment" spellcheck="true"># response.content 返回的是 bytes 型的二进制数据</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取网页的通用框架"><a href="#获取网页的通用框架" class="headerlink" title="获取网页的通用框架"></a>获取网页的通用框架</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getHtmlText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果状态码不是200 则应发HTTOError异常</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置正确的编码方式</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Something Wrong!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="把爬取的网页源代码保存为txt文件"><a href="#把爬取的网页源代码保存为txt文件" class="headerlink" title="把爬取的网页源代码保存为txt文件"></a>把爬取的网页源代码保存为txt文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requesthtml <span class="token operator">=</span> request<span class="token punctuation">.</span>getHtmlText<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> requests库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语栏目</title>
      <link href="/2019/10/04/everyday-japanese/"/>
      <url>/2019/10/04/everyday-japanese/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=468490608&amp;auto=1&amp;height=66"></iframe><br></div><style type="text/css">em{    color: #888;    font-size: 12px;    line-height: 12px;}</style><a href="https://translate.google.cn/" target="_blank" rel="noopener">翻訳</a><h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><h3 id="10月（じゅうがつ）"><a href="#10月（じゅうがつ）" class="headerlink" title="10月（じゅうがつ）"></a>10月（じゅうがつ）</h3><h4 id="4日（よっか）金曜日（きんようび）"><a href="#4日（よっか）金曜日（きんようび）" class="headerlink" title="4日（よっか）金曜日（きんようび）"></a>4日（よっか）金曜日（きんようび）</h4><p>  　　　<em>にんげん</em><br>  おれは  人间   をやめるぞ！ジョジョ―――ッ！！<br><img src="1.jpg" alt=""></p><h4 id="6日（むいか）土曜日（どようび）"><a href="#6日（むいか）土曜日（どようび）" class="headerlink" title="6日（むいか）土曜日（どようび）"></a>6日（むいか）土曜日（どようび）</h4><p><em>  わたし  な  きらよしかげ ねんれい さんじゅうさんさい</em><br>  私 の 名 は 吉良吉影  年齢  三十三歳</p><p>  わたしのなはきらよしかげねんれいさんじゅうさんさい<br>  私の名は吉良吉影年齢三十三歳</p><p>  じたくはもりおうちょうほくとうぶのべっそうちたいにあり<br>  自宅は杜王町北東部の別荘地帯にあり</p><p>  けっこんはしていない、しごとはかめゆうチェインってのかいしゃいんで<br>  結婚はしていない、仕事は亀友チェインっての会社員で</p><p>  まいにちおそくともよるはちじまでにはきたくする<br>  毎日遅くとも夜八時までには帰宅する</p><p>  タバクはすわない、さけはたしなむていど<br>  タバコは吸わない、酒は嗜む程度</p><p>  よるじゅいちじにはとこをつき<br>  夜十一時には床をつき</p><p>  かならずはちじかんはすいみんをとるようにしている<br>  必ず八時間は睡眠をとるようにしている</p><p>  ねるまえにあたたかいミルクをのみ<br>  寝る前に温かいミルクを飲み</p><p>  にじゅっぷんほどのストレッチでからだをほぐしてからとこにつくっと<br>  二十分ほどのストレッチで体を解してから床につくっと</p><p>  ほとんどあさまでじゅくすいさ<br>  殆ど朝まで熟睡さ</p><p>  あかんぼうのようにひろうやストレスをのこさずにあさめをさませるんだ<br>  赤ん坊のように疲労やストレスを残さずに朝目を覚ませるんだ</p><p>  けんこうしんだいでもいじょうなしといわれたよ<br>  健康診断でも異常なしと言われたよ<br><img src="2.jpg" alt=""></p><h4 id="7日（なのか）日曜日（にちようび）"><a href="#7日（なのか）日曜日（にちようび）" class="headerlink" title="7日（なのか）日曜日（にちようび）"></a>7日（なのか）日曜日（にちようび）</h4><p><em>   きょう  かぜ　  さわ</em><br>  今日は……風　が　騒がしい な…<br><img src="3.jpg" alt=""></p><h4 id="8日（ようか）月曜日（がつようび）"><a href="#8日（ようか）月曜日（がつようび）" class="headerlink" title="8日（ようか）月曜日（がつようび）"></a>8日（ようか）月曜日（がつようび）</h4><p><em>   せかい　           とき と</em><br>  世界（ザ・ワールド）ッ！時よ止まれ！<br><img src="4.gif" alt=""></p><h4 id="11日（じゅういちにち）金曜日（きんようび）"><a href="#11日（じゅういちにち）金曜日（きんようび）" class="headerlink" title="11日（じゅういちにち）金曜日（きんようび）"></a>11日（じゅういちにち）金曜日（きんようび）</h4><p><em>     かお             なみだ</em><br>  その顔をなんだ？それは、その涙はなんだ！<br><img src="5.gif" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统大纲</title>
      <link href="/2019/10/04/osnote/"/>
      <url>/2019/10/04/osnote/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h2><h3 id="第一章-操作系统引论（缺失）"><a href="#第一章-操作系统引论（缺失）" class="headerlink" title="第一章 操作系统引论（缺失）"></a>第一章 操作系统引论（缺失）</h3><ul><li>分时实时系统比较</li><li>操作系统特征和功能</li><li>微内核系统</li></ul><h3 id="第二章-进程的描述与控制"><a href="#第二章-进程的描述与控制" class="headerlink" title="第二章 进程的描述与控制"></a>第二章 进程的描述与控制</h3><ul><li>了解前趋图进程的基本概念（题解p17）和应用；</li><li>理解程序执行，并发执行的概念、特点，以及并发执行的条件；题解p17</li><li>熟悉进程的基本概念、特征、pcb、进程实体、进程状态及其转换，熟悉进程与程序的关系；</li><li>了解线程的基本概念，线程的调度管理，以及与进程的关系；</li><li>了解进程同步和线程通信的基本概念；</li><li>了解进程通信的基本类型、特点和要求；</li><li>理解临界资源、临界区，以及同步准则等概念的基本含义，具体要求和进本应用；</li><li>了解常见的信号量机制，理解其基本原理和要求，能正确选用他们解决实际应用问题；</li></ul><h3 id="第三章-处理机调度与死锁"><a href="#第三章-处理机调度与死锁" class="headerlink" title="第三章 处理机调度与死锁"></a>第三章 处理机调度与死锁</h3><ul><li>了解处理机调度的基本概念及调度准则，掌握低级调度的主要功能；</li><li>掌握处理机调度的基本算法，及其应用；</li><li>掌握实时系统的调度算法，及其应用；</li><li>理解死锁的基本概念，死锁产生的原因和必要条件，以及处理死锁的基本方法，死锁定理；</li><li>了解预防死锁的基本方法，掌握银行家算法及安全性算法；</li></ul><h3 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章 存储器管理"></a>第四章 存储器管理</h3><ul><li>了解程序装入和链接的基本过程；</li><li>理解存储器的层次结构；</li><li>了解内存分配的概念，及常用分区分配方式；</li><li>理解页式、段式、段页式管理的基本原理和方法，掌握页表、段表和快表啊、掌握分页与分段的区别；</li><li>掌握地址变换机构的工作机制，掌握逻辑地址到物理地址的映射过程；</li></ul><hr><h2 id="二、重点课后题"><a href="#二、重点课后题" class="headerlink" title="二、重点课后题"></a>二、重点课后题</h2><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"><a href="#10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较" class="headerlink" title="10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"></a>10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较</h4><p>1）交互性：分时系统是一种通用系统，主要用于运行终端用户程序，因而它具有较强的交互能力；而实时系统虽然也有交互能力，但这里人与系统的交互仅限于访问系统中某些特定的专用服务程序，其交互能力不及前者<br>2）及时性：实时信息系统对及时性的要求与分时系统类似，都是以人所能接受的等待时间来确定；而实时控制系统的及时性则是以控制对象所要求的开始截止时间和完成截止时间来确定的，一般为秒级到毫秒级。<br>3）可靠性：分时系统虽然也要求系统可靠，但相比之下，实时系统对系统的可靠性要求要比分时系统对系统的可靠性要求高</p><h4 id="11-OS有哪几大特征？其最基本的特征是什么？"><a href="#11-OS有哪几大特征？其最基本的特征是什么？" class="headerlink" title="11.OS有哪几大特征？其最基本的特征是什么？"></a>11.OS有哪几大特征？其最基本的特征是什么？</h4><p>井发性、共享性,虚拟性和异步性四个基本特征; 最基本的特征是并发性。</p><h4 id="21-微内核操作系统有哪些优点？它为何能有这些优点？"><a href="#21-微内核操作系统有哪些优点？它为何能有这些优点？" class="headerlink" title="21.微内核操作系统有哪些优点？它为何能有这些优点？"></a>21.微内核操作系统有哪些优点？它为何能有这些优点？</h4><p>1）提高了系统的可扩展性<br>2）增强了系统的可靠性<br>3）可移植性强<br>4）提供了对分布式系统的支持<br>5）融入了面向对象技术<br>原因：微内核os结构是建立在模块化，层次化结构基础上的，并且采用了客户/服务器模式和面对对象的程序设计技术。</p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="6-进程与程序的主要区别和关系"><a href="#6-进程与程序的主要区别和关系" class="headerlink" title="6.进程与程序的主要区别和关系"></a>6.进程与程序的主要区别和关系</h4><p>1）程序是指令的集合，本身没有任何运行的含义，是一个静态概念；而进程是程序在处理机上的一次执行过程，是一个动态概念。<br>2）程序的存在是永久的；而进程是有生命周期的，它因创建而产生，因调度而执行，因缺少资源而暂停，因撤消而消亡。<br>3）程序仅是指令的有序集合；而进程则由程序段、数据段、进程控制块组成。<br>4）进程与程序之间不是一一对应的，即同一程序可同时运行于若干个不同的数据集合上，它将属于不同的进程：而一个进程也可以执行多个程序。</p><h4 id="10-pcb的作用是什么为什么说pcb是进程存在的唯一标志"><a href="#10-pcb的作用是什么为什么说pcb是进程存在的唯一标志" class="headerlink" title="10.pcb的作用是什么为什么说pcb是进程存在的唯一标志"></a>10.pcb的作用是什么为什么说pcb是进程存在的唯一标志</h4><p>  进程控制块是操作系统用来描述和管理进城的数据结构，其作用是使一个在多道程序环境下，不能独立运行的程序，成为一个能独立运行的基本单位，即一个能与其他进程并发执行的进程。<br>  在创建进程时，系统将为他配置一个PCB，在进程调度时，系统将根据PCB的状态和优先级等信息来选择新进程，然后将老进程的现场信息保存到它的PCB中，再根据 新进程PCB中所保存的处理机状态信息来恢复运行的现场；执行中的进程，如果需要访问文件或者需要与合作进程实现同步或通信，也都需要访问PCB；当进程因某种原因而暂停执行时，也必须将断点的现场信息保存到它的PCB中：当进程结束时，系统将回收它的PCB，可见，在进程的整个生命期中，系统总是通过其PCB对进程进行控和管理，亦即，系统是根据其PCB而不是任何别的什么而感知到进程的存在，所以说，PCB是进程存在的唯一标志。</p><h4 id="21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"><a href="#21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。" class="headerlink" title="21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"></a>21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。</h4><p>1）调度性。在传统的操作系统中，拥有资源的基本单位、独立调度和分派的基本单位都是进程。而在引入线程的OS中，则是把线程作为调度和分配的基本的单位，进程只是拥有资源的基本单位，而不再是调度和分派的基本单位。<br>2）并发性。在引入线程的OS中，不仅进程间可以并发执行，而且在一个进程内的多个线程间，也可以并发执行，因而比传统的OS具有更好的并发行。<br>3）拥有资源。在这两种OS中，拥有资源的基本单位都是进程。线程除了一点在在运行中必不可少的资源（如线程控制块、程序计数器、一组寄存器值和堆栈）外，本身基本不拥有系统资源，但它可共享其隶属的进程的资源。<br>4）独立性。每个进程都能独立地申请资源和独立的运行；但同一进程的多个线程则共享进程的内存地址空间和其他资源，它们之间的独立性比进程之间的独立性要低。<br>5）开销。由于创建和撤消进程时，系统都要为之分配和回收资源，如内存空间等。进程切换时所要保存和设置的现场信息也要明显地多于线程，因此，OS在创建、撤销和切换进程时<br>所付出的开销显著大于线程。另外由于隶属于同一个进程的多个线程共享同一地址空间和打开文件，从而使它们之间的同步和通信的实现也变得更为容易。<br>6）支持多处理机系统。传统的进程，只能运行在一个处理机上；多线程的进程，则可以将进程中的多个线程分配到多个处理机上，从而获得更好的并发执行效果。</p><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><h4 id="1-进程的三种基本状态"><a href="#1-进程的三种基本状态" class="headerlink" title="1.进程的三种基本状态"></a>1.进程的三种基本状态</h4><p>就绪状态、执行状态、阻塞状态。</p><h4 id="2-临界区、临界资源定义"><a href="#2-临界区、临界资源定义" class="headerlink" title="2.临界区、临界资源定义"></a>2.临界区、临界资源定义</h4><p>临界资源：一段时间内只允许一个进程访问。<br>临界区：进程中访问临界资源的那段代码称为临界区</p><h4 id="3-同步准则"><a href="#3-同步准则" class="headerlink" title="3.同步准则"></a>3.同步准则</h4><p>空闲让进、忙则等待、有限等待、让权等待</p><p>指导书p41 例41 p50 例20</p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="7-试说明低级调度的主要功能"><a href="#7-试说明低级调度的主要功能" class="headerlink" title="7.试说明低级调度的主要功能"></a>7.试说明低级调度的主要功能</h4><p>1）保存处理机的现场信息<br>2）按某种算法选取进程<br>3）把处理机分配给进程</p><h4 id="12-试比较FCFS和SPF两种进程调度算法"><a href="#12-试比较FCFS和SPF两种进程调度算法" class="headerlink" title="12.试比较FCFS和SPF两种进程调度算法"></a>12.试比较FCFS和SPF两种进程调度算法</h4><p>相同点：两种调度算法都可以用于作业调度和进程调度<br>不同点：FCFS调度算法每次都从后备队列中选择一个或多个最先进入该队列的作业，将他们调入内存、分配资源、创建进程、插入到就绪队列。该算法有利于长作业/进程，不利于短作业/进程。SPF算法每次调度都从后备队列中选择一个或若干个估计运行时间最短的作业，调入内存中运行。该算法有利于短作业/进程，不利于长作业/进程</p><h4 id="15-为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？"><a href="#15-为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？" class="headerlink" title="15.为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？"></a>15.为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？</h4><p>1）终端型作业用户提交的作业大多属于较小的交互型作业，系统只要提交这些作业在第一队列规定的时间片内完成，终端作业用户就会感到满足。<br>2）短批处理作业用户，开始时像终端型作业一样，如果在第一队列中执行一个时间片段即可完成，便可获得与终端作业一样的响应时间。对于稍长作业，通常只需在第二和第三队列各执行一时间片即可完成，其周转时间仍然较短。<br>3）长批处理作业，他将依次在第1，2，。。。，n个队列中运行，然后再按轮转方式运行，用户不必担心其长期作业得不到处理。所以，多级反馈队列调度算法能满足更多用户需求。</p><h4 id="27-何谓死锁？产生死锁的原因和必要条件是什么？"><a href="#27-何谓死锁？产生死锁的原因和必要条件是什么？" class="headerlink" title="27.何谓死锁？产生死锁的原因和必要条件是什么？"></a>27.何谓死锁？产生死锁的原因和必要条件是什么？</h4><p>定义：如果一组进程中的每一个进程都在等待仅由该组进程中的其它进程才能引发的事件，那么该组进程是死锁的<br>产生原因：1）竞争资源。2）进程推进顺序非法。<br>必要条件：1）互斥条件。2）请求和保持条件。3）不可抢占条件。4）循环等待条件。</p><h4 id="30-银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？"><a href="#30-银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？" class="headerlink" title="30.银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？"></a>30.银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？</h4><p>能分配<br>request（0，1，0）≤need（7，4，3）；<br>request（0，1，0）≤available（2，3，0）；<br>系统暂时假定可为P0分配资源，并修改有关数据，如下所示：</p><table><thead><tr><th></th><th>allocation</th><th>need</th><th>available</th></tr></thead><tbody><tr><td></td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td></tr><tr><td>p0</td><td>0  2  0</td><td>7  3  3</td><td>2  2  0</td></tr><tr><td>p1</td><td>3  0  2</td><td>0  2  0</td><td></td></tr><tr><td>p2</td><td>3  0  2</td><td>6  0  0</td><td></td></tr><tr><td>p3</td><td>2  1  1</td><td>0  1  1</td><td></td></tr><tr><td>p4</td><td>0  2  2</td><td>4  3  1</td><td></td></tr></tbody></table><p>利用安全性算法检查</p><table><thead><tr><th></th><th>work</th><th>need</th><th>allocation</th><th>work+allocation</th><th>finish</th></tr></thead><tbody><tr><td></td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td><td></td></tr><tr><td>p1</td><td>2  2  0</td><td>0  2  0</td><td>3  0  2</td><td>5  2  2</td><td>true</td></tr><tr><td>p3</td><td>5  2  2</td><td>0  1  1</td><td>2  1  1</td><td>7  3  3</td><td>true</td></tr><tr><td>p0</td><td>7  3  3</td><td>7  3  3</td><td>0  2  0</td><td>7  5  3</td><td>true</td></tr><tr><td>p2</td><td>7  5  3</td><td>6  0  0</td><td>3  0  2</td><td>10 5  5</td><td>true</td></tr><tr><td>p4</td><td>10 5  5</td><td>4  3  1</td><td>0  0  2</td><td>10 5  7</td><td>true</td></tr></tbody></table><p>存在安全序列{p1,p3,p0,p2,p4}所以能分配</p><h4 id="31-在银行家算法中，若出现下述资源分配情况，试问："><a href="#31-在银行家算法中，若出现下述资源分配情况，试问：" class="headerlink" title="31.在银行家算法中，若出现下述资源分配情况，试问："></a>31.在银行家算法中，若出现下述资源分配情况，试问：</h4><table><thead><tr><th>process</th><th>allocation</th><th>need</th><th>available</th></tr></thead><tbody><tr><td>p0</td><td>0 0 3 2</td><td>0 0 1 2</td><td>1 6 2 2</td></tr><tr><td>p1</td><td>1 0 0 0</td><td>1 7 5 0</td><td></td></tr><tr><td>p2</td><td>1 3 5 4</td><td>2 3 5 6</td><td></td></tr><tr><td>p3</td><td>0 3 3 2</td><td>0 6 5 2</td><td></td></tr><tr><td>p4</td><td>0 0 1 4</td><td>0 6 5 6</td><td></td></tr></tbody></table><p>（1）该状态是否安全？</p><table><thead><tr><th></th><th>work</th><th>need</th><th>allocation</th><th>work+allocation</th><th>finish</th></tr></thead><tbody><tr><td>p0</td><td>1 6 2 2</td><td>0 0 1 2</td><td>0 0 3 2</td><td>1 6 5 4</td><td>true</td></tr><tr><td>p3</td><td>1 6 5 4</td><td>0 6 5 2</td><td>0 3 3 2</td><td>1 9 8 6</td><td>true</td></tr><tr><td>p4</td><td>1 9 8 6</td><td>0 6 5 6</td><td>0 0 1 4</td><td>1 9 9 10</td><td>true</td></tr><tr><td>p1</td><td>1 9 9 10</td><td>1 7 5 0</td><td>1 0 0 0</td><td>2 9 9 0</td><td>true</td></tr><tr><td>p2</td><td>2 9 9 10</td><td>2 3 5 6</td><td>1 3 5 4</td><td>3 12 14 14</td><td>true</td></tr></tbody></table><p>存在安全序列{p0,p3,p4,p1,p2}所以安全<br>（2）p2发出请求向量Request（1，2，2，2）后，系统能否将资源分配给它？<br>系统按银行家算法进行检查：<br>①request2（1，2，2，2）≤need2（2，3，5，6）<br>②request2（1，2，2，2）≤available（1，6，2，2）<br>③系统先假定可为P2分配资源并修改<br>available = （0，4，0，0）<br>allocation2 = （2，5，7，6）<br>need2 = （1，1，3，4）<br>④进行安全性检查：此时对所有的进程need≤available都不成立故系统进入不安全状态。<br>因此不能分配给P2</p><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="12-分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130"><a href="#12-分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130" class="headerlink" title="12.分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130"></a>12.分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130</h4><p>  分区存储管理中的常用分配策略：首次适应算法、循环首次适应算法、最佳适应算法、最坏适应算法。</p><ul><li>首次适应算法：保留了高址部分的大空闲区，有利于后来的大型作业分配；低址部分不断被划分，留下许多难以利用的小空闲区，每次查找都从低址开始增加了系统开销。</li><li>循环首次适应算法：内存空闲分区分布均匀，减少了查找系统开销；缺乏大空闲分区，导致不能装入大型作业。</li><li>最佳适应算法：每次分配给文件的都是最适合该文件大小的分区，内存中留下许多难以利用的小空闲区。</li><li>最坏适应算法：剩下空闲区不太小，产生碎片几率小，对中小型文件分配分区操作有利；存储器中缺乏大空闲区，对大型文件分区分配不利。</li></ul><h4 id="14-对文件区管理的目标和对对换空间管理的目标有何不同？p136"><a href="#14-对文件区管理的目标和对对换空间管理的目标有何不同？p136" class="headerlink" title="14.对文件区管理的目标和对对换空间管理的目标有何不同？p136"></a>14.对文件区管理的目标和对对换空间管理的目标有何不同？p136</h4><p>1）对文件区管理的主要目标<br>  文件区占用磁盘空间的大部分，用于存放各类文件。由于通常的文件都是较长时间的驻留在外存上，对他访问的频率是较低的，故对文件区管理的主要目标是提高文件存储空间的利用率，然后才是提高对文件的访问速度。因此，对文件的管理采取离散分配方式。<br>2）对对换空间的管理的主要目标<br>  对换空间只占用磁盘空间的小部分，用于存放从内存换出的进程。由于这些进程在对换区驻留的时间是短暂的，而对换操作的频率却较高，故对对换空间的管理的主要目标是提高进程换入和换出的速度，然后才是提高文件存储空间的利用率。为此，对对换空间的管理采取连续分配方式，较少考虑外存中的碎片问题。</p><h4 id="17-基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138"><a href="#17-基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138" class="headerlink" title="17.基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138"></a>17.基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138</h4><p>1）分页存储管理方式<br>  在该方式中，将用户程序的地址空间分为若干个固定大小的区域，称为“页”或“页面”。<br>2）分段存储管理方式<br>  它把用户程序的地址空间分为若干个大小不同的段，每段可定义一组相对完整的信息。在存储器分配时，以段为单位。<br>3）段页式存储管理方式。<br>  这是分页和分段两种存储管理方式相结合的产物。它同时具有两者的优点，是目前应用较广泛的一种存储管理方式。</p><h4 id="19-什么是页表？页表的作用是什么？p139"><a href="#19-什么是页表？页表的作用是什么？p139" class="headerlink" title="19.什么是页表？页表的作用是什么？p139"></a>19.什么是页表？页表的作用是什么？p139</h4><p>  在分页系统中，允许将进程的各个页离散的存储在内存的任一物理块中，为保证进程仍然能正确的运行，既能在内存中找到每个页面所对应的物理块，系统又为每个进程建立了一张页面映像表，简称页表。<br>  页表的作用是实现从页号到物理块号的地址映射。</p><h4 id="21-在分页系统中是如何实现地址变换的？p140"><a href="#21-在分页系统中是如何实现地址变换的？p140" class="headerlink" title="21.在分页系统中是如何实现地址变换的？p140"></a>21.在分页系统中是如何实现地址变换的？p140</h4><p>  首先，进程运行时从进程的PCB中把页表始址和页表长度放入页表寄存器中，当进程要访问某个逻辑地址中的数据的时候，分页地址变换机构会自动的将有效地址(逻辑地址)分为页号和页内地址。讲页号和页表寄存器中的页表长度相比，如果页号比较大则说明访问越界，抛出中断。否则利用页号、页表始址和页表项长度计算出相应的页表中的位置(因为页表在内存中，所以需要计算对应的地址，而不是想象中的直接匹配页号，相当于“起点+单位数x单位长度”)，从而得到物理块号。把物理块号和页内地址同时送入物理地址寄存器中，相结合得到物理地址。</p><h4 id="22-具有快表时是如何实现地址变换的？p141"><a href="#22-具有快表时是如何实现地址变换的？p141" class="headerlink" title="22.具有快表时是如何实现地址变换的？p141"></a>22.具有快表时是如何实现地址变换的？p141</h4><p>  首先，以前转换过程中查找过的页表项会被记录在快表之中。在每次需要访问逻辑地址中的数据的时候，都会根据页号先到快表中查看有没有对应的匹配项，如果有就直接得到相应的物理块号而不需要进过利用始址、页号和页表项长度计算后去内存中查表。得到物理块号后依然是送到物理地址寄存器中和页内地址结合形成最后的物理地址。</p><h4 id="23-较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145-146"><a href="#23-较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145-146" class="headerlink" title="23.较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145\146"></a>23.较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145\146</h4><p>1)方便编程<br>通常，用户把自己的作业按照逻辑关系划分为若干个段，每个段都是从0开始编址，并有自己的名字和长度。因此，希望要访问的逻辑地址是由段名(段号)和段内偏移量(段内地址)决定的。<br>2)信息共享<br>在实现对程序和数据的共享时，是以信息的逻辑单位为基础的。比如，共享 某个例程和函数。分页系统中的“页”只是存放信息的物理单位(块)，并无完整的 意义，不便于实现共享；然而段却是信息的逻辑单位。由此可知，为了实现段的 共享，希望存储管理能与用户程序分段的组织方式相适应。<br>3)信息保护<br>信息保护同样是对信息的逻辑单位进行保护，因此，分段管理方式能更有效 和方便地实现信息保护功能。<br>4)动态增长在实际应用中，往往有些段，特别是数据段，在使用过程中会不断地增长， 而事先又无法确切地知道数据段会增长到多大。前述的其它几种存储管理方式， 都难以应付这种动态增长的情况，而分段存储管理方式却能较好地解决这一问题<br>5)动态链接<br>动态链接是指在作业运行之前，并不把几个目标程序段链接起来。要运行时， 先将主程序所对应的目标程序装入内存并启动运行，当运行过程中又需要调用某段时，才将该段(目标程序)调入内存并进行链接。可见，动态链接也要求以段作为管理的单位。</p><h4 id="26-分页和分段存储管理有何区别？p148"><a href="#26-分页和分段存储管理有何区别？p148" class="headerlink" title="26.分页和分段存储管理有何区别？p148"></a>26.分页和分段存储管理有何区别？p148</h4><p>(1)<br>a 页是信息的物理单位。采用分页存储管理方式是为实现离散分配方式，以消减内存的外零头，提高内存的利用率。仅仅只是系统管理上的需要。<br>b 分段存储管理方式中的段则是信息的逻辑单位。分段的目的主要在于能更好地满足用户的需要。<br>(2)<br>a 页的大小固定且由系统决定，直接由硬件实现，因而在每个系统中只能有一种大小的页面。<br>b 段的长度不固定，决定于用户所编写的程序，通常由编译程序在对源程序进行编译时，根据信息的性质来划分。<br>(3)<br>a 分页的用户程序地址空间是一维的，属于单一的线性地址空间，程序员只需利用一个记忆符即可表示一个地址。<br>b 分段系统中用户程序的地址空间是二维的，程序员在标识一个地址时，既需给出段名又需给出段内地址。</p><h4 id="27-试全面比较连续分配和离散分配方式。"><a href="#27-试全面比较连续分配和离散分配方式。" class="headerlink" title="27.试全面比较连续分配和离散分配方式。"></a>27.试全面比较连续分配和离散分配方式。</h4><p>1)连续分配是指为一个用户程序分配一个连续的地址空间，包括单一和分区两种分配方式。单一方式将内存分为系统区和用户区，最简单，只用于单用户单任务操作系统；分区方式分固定和动态分区。<br>2）离散分配方式为分页、分段和段页式存储管理。分页式存储管理旨在提高内存利用率，分段式存储管辂旨在满足用户的需要，段页式存储管理则将两者结合起来，具有分段系统便于实现、可共享、易于保护和和动态连接等优点，又能像分页系统很好解决外部碎片及为各段可离散分配内存等问题，是比较有效的存储管理方式；</p><table><thead><tr><th>技术性能</th><th>连续分配</th><th>离散分配</th></tr></thead><tbody><tr><td>大批量数据的存取速度</td><td>较快</td><td>较慢</td></tr><tr><td>机制的复杂性</td><td>较简单</td><td>较复杂</td></tr><tr><td>内存碎片</td><td>较大</td><td>较小</td></tr><tr><td>实现虚拟技术</td><td>较难</td><td>较易</td></tr><tr><td>实现动态链接</td><td>较难</td><td>较易</td></tr></tbody></table><h4 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h4><h5 id="指导书-p102-例13-p103-例15"><a href="#指导书-p102-例13-p103-例15" class="headerlink" title="指导书 p102 例13 p103 例15"></a>指导书 p102 例13 p103 例15</h5><h5 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h5><p>某虚拟存储器的用户空间共有32个页面，每页1KB，主存16KB。假定某时刻系统为用户的第0、1、2、3页分配的物理块号为5、10、4、7，而该用户作业的长度为6页。试将十六进制的虚拟地址0A5C、103C、1A5C转换成物理地址。<br>  答：由题可知，该系统的逻辑地址有15位，其中高五位为页号，低十位为页内地址；物理地址有14位，其中高4位为块号，低十位为快内地址。<br>  逻辑地址是十六进制，需转换成二进制以直接获取页号和页内地址，再完成地址转换。<br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2019/10/02/py/"/>
      <url>/2019/10/02/py/</url>
      
        <content type="html"><![CDATA[<p><strong><em>python</em></strong><br>  之前学的每门语言都是浅浅浅浅浅浅浅尝辄止看看能不能深入一点</p><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-11 21:00:57</span><span class="token comment" spellcheck="true"># 读</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python 是一个非常好的语言。\n是的，的确非常好!!\n"</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##另一种写法</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'TTBT.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#写</span><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#另一种写法</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'TTBT.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h3 id="设置代理ip"><a href="#设置代理ip" class="headerlink" title="设置代理ip"></a>设置代理ip</h3><p>查<a href="https://cn-proxy.com/" target="_blank" rel="noopener">代理ip</a>的网址<br>查<a href="http://icanhazip.com" target="_blank" rel="noopener">当前ip</a>的网址</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-06 22:04:57</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> randomurl <span class="token operator">=</span> <span class="token string">'http://icanhazip.com'</span><span class="token comment" spellcheck="true">#参数是一个字典{'类型','代理ip:端口号'}</span>iplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'124.156.108.71:82'</span><span class="token punctuation">,</span><span class="token string">'183.146.213.157:80'</span><span class="token punctuation">,</span><span class="token string">'39.137.69.6:80'</span><span class="token punctuation">]</span>proxy_support <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>iplist<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定制、创建一个opener</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy_support<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#改useragent</span>opener<span class="token punctuation">.</span>addheaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#安装opener</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#.encode('GBK','ignore').decode('GBk')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前代理IP是'</span><span class="token operator">+</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="贴吧图片"><a href="#贴吧图片" class="headerlink" title="贴吧图片"></a>贴吧图片</h3><p>正则表达式写法很重要</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-07 20:54:07</span><span class="token comment" spellcheck="true">#fun.py</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> re<span class="token keyword">def</span>  <span class="token function">open_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>  req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'</span><span class="token punctuation">)</span>  page <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>  html <span class="token operator">=</span> page<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">get_img_tieba</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span>path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  p <span class="token operator">=</span> r<span class="token string">'&lt;img class="BDE_Image".*?src="([^"]+\.jpg)"'</span>  imglist <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span>html<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># for each in imglist:</span>  <span class="token comment" spellcheck="true">#   print(each)</span>  <span class="token keyword">for</span> each <span class="token keyword">in</span> imglist<span class="token punctuation">:</span>    filename <span class="token operator">=</span> path<span class="token operator">+</span>each<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>each<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> fun<span class="token keyword">import</span> rehtml<span class="token operator">=</span>fun<span class="token punctuation">.</span>open_url<span class="token punctuation">(</span><span class="token string">'https://tieba.baidu.com/p/6234466251'</span><span class="token punctuation">)</span>fun<span class="token punctuation">.</span>get_img_tieba<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'F:/lkyblogcode/python/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Scarpy框架-小甲鱼"><a href="#Scarpy框架-小甲鱼" class="headerlink" title="Scarpy框架(小甲鱼)"></a>Scarpy框架(小甲鱼)</h3><p>2019-10-09 22:43:57<br><a href="'http://www.scrapyd.cn/'">文档</a></p><h4 id="创建一个Scrapy项目"><a href="#创建一个Scrapy项目" class="headerlink" title="创建一个Scrapy项目"></a>创建一个Scrapy项目</h4><p>cd到一个目录执行”scrapy startproject 名称</p><h4 id="定义Item容器"><a href="#定义Item容器" class="headerlink" title="定义Item容器"></a>定义Item容器</h4><p>修改items.py的内容</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#items.py</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DmozItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    link <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    desc <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h4><p>编写爬虫类Spider，Spider是用户编写用于从网站上爬取数据的类。其包含了一个用于下载的初始URL，然后是如何跟进网页中的链接以及如何分析页面中的内容，还有提取生成item的方法</p><p>命令行创建Spider：<br>scrapy genspider chinadmoz.org<br>或者自己写</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#dmoz_spider此为简化写法详见小甲鱼教程</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DmozSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#需要继承scrapy.Spider类</span>  <span class="token comment" spellcheck="true">#scrapy crawl 'name'</span>  name <span class="token operator">=</span> <span class="token string">"dmoz"</span>  <span class="token comment" spellcheck="true">#网站</span>  allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chinadmoz.org'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#从哪里开始</span>  start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/9/'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/14/'</span>    <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#把爬下来的网页代码保存</span>  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>      filename <span class="token operator">=</span> response<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>      <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>提取网页中需要的数据，在Scrapy中是使用一种基于XPath和CSS的表达式机制：Scrapy Selectors<br>Selector是一个选择器，它有四个基本的方法：<br>  xpath():传入xpath表达式，返回该表达式所对应的所有节点的selector list列表。<br>  css():传入Css表达式，返回该表达式所对应的所有节点的selector list列表。<br>  extract():序列化该节点为unicode字符串并返回list。<br>  re():根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</p><p>①在shell里实验<br>scrapy shell “url”之后使用上述方法筛选需要的信息(要用双引号)<br>response.xpath(‘//标签名’)  选出所有标签的内容<br>response.xpath(‘//标签名’).extract() ……并字符串化</p><p>response.xpath(‘//ul/li/a/@href’)<br>response.xpath(‘//ul[@class=”…”]/li’)根据类名筛<br>response.xpath(‘//标签名[position()&lt;3]’)选出前两个</p><p>②实验好了修改爬虫代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#dmoz_spider</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DmozSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#scrapy crawl 'name'</span>  name <span class="token operator">=</span> <span class="token string">"dmoz"</span>  <span class="token comment" spellcheck="true">#网站</span>  allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chinadmoz.org'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#从哪里开始</span>  start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/9/'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/14/'</span>    <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#爬取网址信息</span>  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filename = response.url.split("/")[-2]</span>    <span class="token comment" spellcheck="true"># with open(filename,'wb') as f:</span>    <span class="token comment" spellcheck="true">#   f.write(response.body)</span>    sel <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    sites <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="boxbdnopd"]/li'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> site <span class="token keyword">in</span> sites<span class="token punctuation">:</span>        title <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        link <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        desc <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>link<span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行执行scrapy crawl ‘id’</p><h4 id="存储内容"><a href="#存储内容" class="headerlink" title="存储内容"></a>存储内容</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#dmoz_spider</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> tutorial<span class="token punctuation">.</span>items <span class="token keyword">import</span> DmozItem<span class="token keyword">class</span> <span class="token class-name">DmozSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#scrapy crawl 'name'</span>  name <span class="token operator">=</span> <span class="token string">"dmoz"</span>  <span class="token comment" spellcheck="true">#网站</span>  allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chinadmoz.org'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#从哪里开始</span>  start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/9/'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/14/'</span>    <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#存到容器里</span>  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filename = response.url.split("/")[-2]</span>    <span class="token comment" spellcheck="true"># with open(filename,'wb') as f:</span>    <span class="token comment" spellcheck="true">#   f.write(response.body)</span>    sel <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    sites <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="boxbdnopd"]/li'</span><span class="token punctuation">)</span>    items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> site <span class="token keyword">in</span> sites<span class="token punctuation">:</span>      item <span class="token operator">=</span> DmozItem<span class="token punctuation">(</span><span class="token punctuation">)</span>      item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>      item<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>      item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>      items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行执行scrapy crawl dmoz -o items.json -t json<br>-o 文件名  -t 文件格式<br>修改输出文件编码：在settings.py加入FEED_EXPORT_ENCODING = ‘utf-8’即可</p><h3 id="scrapy-css选择器使用"><a href="#scrapy-css选择器使用" class="headerlink" title="scrapy css选择器使用"></a>scrapy css选择器使用</h3><p><a href="http://www.scrapyd.cn/doc/146.html" target="_blank" rel="noopener">教程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录</title>
      <link href="/2019/10/01/article1/"/>
      <url>/2019/10/01/article1/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=30284543&amp;auto=1&amp;height=66"></iframe><br></div><h1 id="石头：240-呼符：0"><a href="#石头：240-呼符：0" class="headerlink" title="石头：240 呼符：0"></a>石头：240 呼符：0</h1><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><h3 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h3><h4 id="2019-9-29"><a href="#2019-9-29" class="headerlink" title="2019.9.29"></a>2019.9.29</h4><p><strong><em>搭建自己的博客吧</em></strong><br>附上连接 <a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">参考</a> <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">原作者</a></p><h3 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h3><h4 id="2019-10-1"><a href="#2019-10-1" class="headerlink" title="2019.10.1"></a>2019.10.1</h4><p><strong><em>博客重建成功但我还是不知道写啥</em></strong><br>石头：159<br>呼符：0<br>消耗：<del>5呼符</del><br>  <del>写文章时不要开两个git界面，一个运行着服务，一个提交更改。会有蜜汁错误昨天把我搞炸了费半天劲重建。文章也不要乱删直接改配置内容原因同上。分类标签不要乱写不好去除</del><br>  图片路径要谨慎“medias/banner/0.jpg”这么写少了个/，就在该文件里找图了而不是在根的medias找。幸好这时候可以直接改配置，正确写法应是“/medias/banner/0.jpg” 我枯了</p><h4 id="2019-10-2"><a href="#2019-10-2" class="headerlink" title="2019.10.2"></a>2019.10.2</h4><p>石头：160<br>呼符：0<br>为博客更新了图片加了一首音乐<br>在<a href="https://wallhaven.cc/" target="_blank" rel="noopener">这里</a>找了半天图。。。</p><h4 id="2019-10-3"><a href="#2019-10-3" class="headerlink" title="2019.10.3"></a>2019.10.3</h4><p>石头：160<br>呼符：0<br>把主题颜色换成黑的了，加了emoji功能<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>。留言功能（没人留言吧），照教程得到各种key<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a>,<a href="https://www.jianshu.com/p/4242bb065550" target="_blank" rel="noopener">gittalk</a>再改改配置文件就好。duang的一下加了很多<a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="noopener">特技</a>。一行代码看板娘带回家<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">链接</a>对话感觉都无懈可击不用改了作者太强了。感觉最近一直在搬砖。</p><h4 id="2019-10-4"><a href="#2019-10-4" class="headerlink" title="2019.10.4"></a>2019.10.4</h4><p>石头：172<br>呼符：0<br>分类名称搞错只需使用hexo clean命令 再重新生成即可已经没什么好怕的了（可以随便删文了）<br><img src="1.jpg" alt="">偶尔放放有意思的（沙雕）图</p><h4 id="2019-10-5"><a href="#2019-10-5" class="headerlink" title="2019.10.5"></a>2019.10.5</h4><p>石头：172<br>呼符：0<br>消耗：<del>1呼符</del><br>竟无语凝噎<del>python栏目不知道写啥了</del></p><h4 id="2019-10-6"><a href="#2019-10-6" class="headerlink" title="2019.10.6"></a>2019.10.6</h4><p>石头：172<br>呼符：0</p><h4 id="2019-10-7"><a href="#2019-10-7" class="headerlink" title="2019.10.7"></a>2019.10.7</h4><p>石头：173<br>呼符：0<br>消耗：<del>10呼符</del><br>总是觉得止步不前</p><h4 id="2019-10-8"><a href="#2019-10-8" class="headerlink" title="2019.10.8"></a>2019.10.8</h4><p>石头：188<br>呼符：3<br>消耗：<del>1呼符</del></p><h4 id="2019-10-9"><a href="#2019-10-9" class="headerlink" title="2019.10.9"></a>2019.10.9</h4><p>石头：190<br>呼符：0<br>消耗：<del>5呼符</del><br>开学了随缘更新</p><h4 id="2019-10-10"><a href="#2019-10-10" class="headerlink" title="2019.10.10"></a>2019.10.10</h4><p>石头：205<br>呼符：0<br>消耗：<del>2呼符</del></p><h4 id="2019-10-11"><a href="#2019-10-11" class="headerlink" title="2019.10.11"></a>2019.10.11</h4><p>石头：205<br>呼符：0<br>一个大胆的想法从产生到怀疑到放弃只要半天特别好玩儿，咸鱼的生活就是这么朴实无华且枯燥.<br>使用hexo clean命令后文章的图片都没了！<br>git init<br>git add .<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:liukunyin/blog_beifen.git<br>git push -u origin master</p><h4 id="2019-10-12"><a href="#2019-10-12" class="headerlink" title="2019.10.12"></a>2019.10.12</h4><p>石头：205<br>呼符：0</p><h4 id="2019-10-13"><a href="#2019-10-13" class="headerlink" title="2019.10.13"></a>2019.10.13</h4><p>石头：207<br>呼符：0</p><h4 id="2019-10-14"><a href="#2019-10-14" class="headerlink" title="2019.10.14"></a>2019.10.14</h4><p>攒石信息统一放在第一行吧</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
