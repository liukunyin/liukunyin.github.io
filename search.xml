<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>操作系统大纲</title>
      <link href="/2019/10/04/osnote/"/>
      <url>/2019/10/04/osnote/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h3 id="第一章-操作系统引论（缺失）"><a href="#第一章-操作系统引论（缺失）" class="headerlink" title="第一章 操作系统引论（缺失）"></a>第一章 操作系统引论（缺失）</h3><ul><li>分时实时系统比较</li><li>操作系统特征和功能</li><li>微内核系统</li></ul><h3 id="第二章-进程的描述与控制"><a href="#第二章-进程的描述与控制" class="headerlink" title="第二章 进程的描述与控制"></a>第二章 进程的描述与控制</h3><ul><li>了解前趋图进程的基本概念和应用；</li><li>理解程序执行，并发执行的概念、特点，以及并发执行的条件；</li><li>熟悉进程的基本概念、特征、pcb、进程实体、进程状态及其转换，熟悉进程与程序的关系；</li><li>了解线程的基本概念，线程的调度管理，以及与进程的关系；</li><li>了解进程同步和线程通信的基本概念；</li><li>了解进程通信的基本类型、特点和要求；</li><li>理解临界资源、临界区，以及同步准则等概念的基本含义，具体要求和进本应用；</li><li>了解常见的信号量机制，理解其基本原理和要求，能正确选用他们解决实际应用问题；</li></ul><h3 id="第三章-处理机调度与死锁"><a href="#第三章-处理机调度与死锁" class="headerlink" title="第三章 处理机调度与死锁"></a>第三章 处理机调度与死锁</h3><ul><li>了解处理机调度的基本概念及调度准则，掌握低级调度的主要功能；</li><li>掌握处理机调度的基本算法，及其应用；</li><li>掌握实时系统的调度算法，及其应用；</li><li>理解死锁的基本概念，死锁产生的原因和必要条件，以及处理死锁的基本方法，死锁定理；</li><li>了解预防死锁的基本方法，掌握银行家算法及安全性算法；</li></ul><hr><h2 id="重点课后题"><a href="#重点课后题" class="headerlink" title="重点课后题"></a>重点课后题</h2><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"><a href="#10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较" class="headerlink" title="10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"></a>10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较</h4><p>1）交互性：分时系统是一种通用系统，主要用于运行终端用户程序，因而它具有较强的交互能力；而实时系统虽然也有交互能力，但这里人与系统的交互仅限于访问系统中某些特定的专用服务程序，其交互能力不及前者<br>2）及时性：实时信息系统对及时性的要求与分时系统类似，都是以人所能接受的等待时间来确定；而实时控制系统的及时性则是以控制对象所要求的开始截止时间和完成截止时间来确定的，一般为秒级到毫秒级。<br>3）可靠性：分时系统虽然也要求系统可靠，但相比之下，实时系统对系统的可靠性要求要比分时系统对系统的可靠性要求高</p><h4 id="11-OS有哪几大特征？其最基本的特征是什么？"><a href="#11-OS有哪几大特征？其最基本的特征是什么？" class="headerlink" title="11.OS有哪几大特征？其最基本的特征是什么？"></a>11.OS有哪几大特征？其最基本的特征是什么？</h4><p>井发性、共享性,虚拟性和异步性四个基本特征; 最基本的特征是并发性。</p><h4 id="21-微内核操作系统有哪些优点？它为何能有这些优点？"><a href="#21-微内核操作系统有哪些优点？它为何能有这些优点？" class="headerlink" title="21.微内核操作系统有哪些优点？它为何能有这些优点？"></a>21.微内核操作系统有哪些优点？它为何能有这些优点？</h4><p>1）提高了系统的可扩展性<br>2）增强了系统的可靠性<br>3）可移植性强<br>4）提供了对分布式系统的支持<br>5）融入了面向对象技术<br>原因：微内核os结构是建立在模块化，层次化结构基础上的，并且采用了客户/服务器模式和面对对象的程序设计技术。</p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="6-进程与程序的主要区别和关系"><a href="#6-进程与程序的主要区别和关系" class="headerlink" title="6.进程与程序的主要区别和关系"></a>6.进程与程序的主要区别和关系</h4><p>1）程序是指令的集合，本身没有任何运行的含义，是一个静态概念；而进程是程序在处理机上的一次执行过程，是一个动态概念。<br>2）程序的存在是永久的；而进程是有生命周期的，它因创建而产生，因调度而执行，因缺少资源而暂停，因撤消而消亡。<br>3）程序仅是指令的有序集合；而进程则由程序段、数据段、进程控制块组成。<br>4）进程与程序之间不是一一对应的，即同一程序可同时运行于若干个不同的数据集合上，它将属于不同的进程：而一个进程也可以执行多个程序。</p><h4 id="10-pcb的作用是什么为什么说pcb是进程存在的唯一标志"><a href="#10-pcb的作用是什么为什么说pcb是进程存在的唯一标志" class="headerlink" title="10.pcb的作用是什么为什么说pcb是进程存在的唯一标志"></a>10.pcb的作用是什么为什么说pcb是进程存在的唯一标志</h4><p>  进程控制块是操作系统用来描述和管理进城的数据结构，其作用是使一个在多道程序环境下，不能独立运行的程序，成为一个能独立运行的基本单位，即一个能与其他进程并发执行的进程。<br>  在创建进程时，系统将为他配置一个PCB，在进程调度时，系统将根据PCB的状态和优先级等信息来选择新进程，然后将老进程的现场信息保存到它的PCB中，再根据 新进程PCB中所保存的处理机状态信息来恢复运行的现场；执行中的进程，如果需要访问文件或者需要与合作进程实现同步或通信，也都需要访问PCB；当进程因某种原因而暂停执行时，也必须将断点的现场信息保存到它的PCB中：当进程结束时，系统将回收它的PCB，可见，在进程的整个生命期中，系统总是通过其PCB对进程进行控和管理，亦即，系统是根据其PCB而不是任何别的什么而感知到进程的存在，所以说，PCB是进程存在的唯一标志。</p><h4 id="21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"><a href="#21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。" class="headerlink" title="21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"></a>21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。</h4><p>1）调度性。在传统的操作系统中，拥有资源的基本单位、独立调度和分派的基本单位都是进程。而在引入线程的OS中，则是把线程作为调度和分配的基本的单位，进程只是拥有资源的基本单位，而不再是调度和分派的基本单位。<br>2）并发性。在引入线程的OS中，不仅进程间可以并发执行，而且在一个进程内的多个线程间，也可以并发执行，因而比传统的OS具有更好的并发行。<br>3）拥有资源。在这两种OS中，拥有资源的基本单位都是进程。线程除了一点在在运行中必不可少的资源（如线程控制块、程序计数器、一组寄存器值和堆栈）外，本身基本不拥有系统资源，但它可共享其隶属的进程的资源。<br>4）独立性。每个进程都能独立地申请资源和独立的运行；但同一进程的多个线程则共享进程的内存地址空间和其他资源，它们之间的独立性比进程之间的独立性要低。<br>5）开销。由于创建和撤消进程时，系统都要为之分配和回收资源，如内存空间等。进程切换时所要保存和设置的现场信息也要明显地多于线程，因此，OS在创建、撤销和切换进程时<br>所付出的开销显著大于线程。另外由于隶属于同一个进程的多个线程共享同一地址空间和打开文件，从而使它们之间的同步和通信的实现也变得更为容易。<br>6）支持多处理机系统。传统的进程，只能运行在一个处理机上；多线程的进程，则可以将进程中的多个线程分配到多个处理机上，从而获得更好的并发执行效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2019/10/02/py/"/>
      <url>/2019/10/02/py/</url>
      
        <content type="html"><![CDATA[<p><strong><em>python</em></strong><br>  之前学的每门语言都是浅浅浅浅浅浅浅尝辄止看看能不能深入一点</p><h2 id="1-看看怎么方便换特色图片（一键向我的相册加入照片路径）"><a href="#1-看看怎么方便换特色图片（一键向我的相册加入照片路径）" class="headerlink" title="1.看看怎么方便换特色图片（一键向我的相册加入照片路径）"></a>1.看看怎么方便换特色图片（一键向我的相册加入照片路径）</h2><p>照着<a href="https://github.com/xiaohedou/imageMS" target="_blank" rel="noopener">这个</a>做吧</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《一号文章(记录)》</title>
      <link href="/2019/10/01/article1/"/>
      <url>/2019/10/01/article1/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=30284543&amp;auto=1&amp;height=66"></iframe><br></div><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><h3 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h3><h4 id="2019-9-29"><a href="#2019-9-29" class="headerlink" title="2019.9.29"></a>2019.9.29</h4><p><strong><em>搭建自己的博客吧</em></strong><br>附上连接 <a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">参考</a> <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">原作者</a></p><h3 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h3><h4 id="2019-10-1"><a href="#2019-10-1" class="headerlink" title="2019.10.1"></a>2019.10.1</h4><p><strong><em>博客重建成功但我还是不知道写啥</em></strong><br>石头：159<br>呼符：0<br>消耗：<del>5呼符</del><br>  <del>写文章时不要开两个git界面，一个运行着服务，一个提交更改。会有蜜汁错误昨天把我搞炸了费半天劲重建。文章也不要乱删直接改配置内容原因同上。分类标签不要乱写不好去除</del><br>  图片路径要谨慎“medias/banner/0.jpg”这么写少了个/，就在该文件里找图了而不是在根的medias找。幸好这时候可以直接改配置，正确写法应是“/medias/banner/0.jpg” 我枯了</p><h4 id="2019-10-2"><a href="#2019-10-2" class="headerlink" title="2019.10.2"></a>2019.10.2</h4><p>石头：160<br>呼符：0<br>为博客更新了图片加了一首音乐<br>在<a href="https://wallhaven.cc/" target="_blank" rel="noopener">这里</a>找了半天图。。。</p><h4 id="2019-10-3"><a href="#2019-10-3" class="headerlink" title="2019.10.3"></a>2019.10.3</h4><p>石头：160<br>呼符：0<br>把主题颜色换成黑的了，加了emoji功能<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>。留言功能（没人留言吧），照教程得到各种key<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a>,<a href="https://www.jianshu.com/p/4242bb065550" target="_blank" rel="noopener">gittalk</a>再改改配置文件就好。duang的一下加了很多<a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="noopener">特技</a>。一行代码看板娘带回家<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">链接</a>对话感觉都无懈可击不用改了作者太强了。感觉最近一直在搬砖。</p><h4 id="2019-10-4"><a href="#2019-10-4" class="headerlink" title="2019.10.4"></a>2019.10.4</h4><p>石头：170<br>呼符：0<br>分类名称搞错只需使用hexo clean命令 再重新生成即可已经没什么好怕的了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/01/hello-world/"/>
      <url>/2019/10/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><img src="1.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
