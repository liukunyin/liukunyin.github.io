<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日语栏目</title>
      <link href="/2019/10/04/everyday-japanese/"/>
      <url>/2019/10/04/everyday-japanese/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=468490608&amp;auto=1&amp;height=66"></iframe><br></div><style type="text/css">em{    color: #888;    font-size: 12px;    line-height: 12px;}</style><a href="https://translate.google.cn/" target="_blank" rel="noopener">翻訳</a><h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><h3 id="10月（じゅうがつ）"><a href="#10月（じゅうがつ）" class="headerlink" title="10月（じゅうがつ）"></a>10月（じゅうがつ）</h3><h4 id="4日（よっか）金曜日（きんようび）"><a href="#4日（よっか）金曜日（きんようび）" class="headerlink" title="4日（よっか）金曜日（きんようび）"></a>4日（よっか）金曜日（きんようび）</h4><p>  　　　<em>にんげん</em><br>  おれは  人间   をやめるぞ！ジョジョ―――ッ！！<br><img src="2.jpg" alt=""></p><h4 id="6日（むいか）土曜日（どようび）"><a href="#6日（むいか）土曜日（どようび）" class="headerlink" title="6日（むいか）土曜日（どようび）"></a>6日（むいか）土曜日（どようび）</h4><p><em>  わたし  な  きらよしかげ ねんれい さんじゅうさんさい</em><br>  私 の 名 は 吉良吉影  年齢  三十三歳</p><p>  わたしのなはきらよしかげねんれいさんじゅうさんさい<br>  私の名は吉良吉影年齢三十三歳</p><p>  じたくはもりおうちょうほくとうぶのべっそうちたいにあり<br>  自宅は杜王町北東部の別荘地帯にあり</p><p>  けっこんはしていない、しごとはかめゆうチェインってのかいしゃいんで<br>  結婚はしていない、仕事は亀友チェインっての会社員で</p><p>  まいにちおそくともよるはちじまでにはきたくする<br>  毎日遅くとも夜八時までには帰宅する</p><p>  タバクはすわない、さけはたしなむていど<br>  タバコは吸わない、酒は嗜む程度</p><p>  よるじゅいちじにはとこをつき<br>  夜十一時には床をつき</p><p>  かならずはちじかんはすいみんをとるようにしている<br>  必ず八時間は睡眠をとるようにしている</p><p>  ねるまえにあたたかいミルクをのみ<br>  寝る前に温かいミルクを飲み</p><p>  にじゅっぷんほどのストレッチでからだをほぐしてからとこにつくっと<br>  二十分ほどのストレッチで体を解してから床につくっと</p><p>  ほとんどあさまでじゅくすいさ<br>  殆ど朝まで熟睡さ</p><p>  あかんぼうのようにひろうやストレスをのこさずにあさめをさませるんだ<br>  赤ん坊のように疲労やストレスを残さずに朝目を覚ませるんだ</p><p>  けんこうしんだいでもいじょうなしといわれたよ<br>  健康診断でも異常なしと言われたよ<br><img src="1.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统大纲</title>
      <link href="/2019/10/04/osnote/"/>
      <url>/2019/10/04/osnote/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h2><h3 id="第一章-操作系统引论（缺失）"><a href="#第一章-操作系统引论（缺失）" class="headerlink" title="第一章 操作系统引论（缺失）"></a>第一章 操作系统引论（缺失）</h3><ul><li>分时实时系统比较</li><li>操作系统特征和功能</li><li>微内核系统</li></ul><h3 id="第二章-进程的描述与控制"><a href="#第二章-进程的描述与控制" class="headerlink" title="第二章 进程的描述与控制"></a>第二章 进程的描述与控制</h3><ul><li>了解前趋图进程的基本概念（题解p17）和应用；</li><li>理解程序执行，并发执行的概念、特点，以及并发执行的条件；题解p17</li><li>熟悉进程的基本概念、特征、pcb、进程实体、进程状态及其转换，熟悉进程与程序的关系；</li><li>了解线程的基本概念，线程的调度管理，以及与进程的关系；</li><li>了解进程同步和线程通信的基本概念；</li><li>了解进程通信的基本类型、特点和要求；</li><li>理解临界资源、临界区，以及同步准则等概念的基本含义，具体要求和进本应用；</li><li>了解常见的信号量机制，理解其基本原理和要求，能正确选用他们解决实际应用问题；</li></ul><h3 id="第三章-处理机调度与死锁"><a href="#第三章-处理机调度与死锁" class="headerlink" title="第三章 处理机调度与死锁"></a>第三章 处理机调度与死锁</h3><ul><li>了解处理机调度的基本概念及调度准则，掌握低级调度的主要功能；</li><li>掌握处理机调度的基本算法，及其应用；</li><li>掌握实时系统的调度算法，及其应用；</li><li>理解死锁的基本概念，死锁产生的原因和必要条件，以及处理死锁的基本方法，死锁定理；</li><li>了解预防死锁的基本方法，掌握银行家算法及安全性算法；</li></ul><hr><h2 id="二、重点课后题"><a href="#二、重点课后题" class="headerlink" title="二、重点课后题"></a>二、重点课后题</h2><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"><a href="#10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较" class="headerlink" title="10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"></a>10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较</h4><p>1）交互性：分时系统是一种通用系统，主要用于运行终端用户程序，因而它具有较强的交互能力；而实时系统虽然也有交互能力，但这里人与系统的交互仅限于访问系统中某些特定的专用服务程序，其交互能力不及前者<br>2）及时性：实时信息系统对及时性的要求与分时系统类似，都是以人所能接受的等待时间来确定；而实时控制系统的及时性则是以控制对象所要求的开始截止时间和完成截止时间来确定的，一般为秒级到毫秒级。<br>3）可靠性：分时系统虽然也要求系统可靠，但相比之下，实时系统对系统的可靠性要求要比分时系统对系统的可靠性要求高</p><h4 id="11-OS有哪几大特征？其最基本的特征是什么？"><a href="#11-OS有哪几大特征？其最基本的特征是什么？" class="headerlink" title="11.OS有哪几大特征？其最基本的特征是什么？"></a>11.OS有哪几大特征？其最基本的特征是什么？</h4><p>井发性、共享性,虚拟性和异步性四个基本特征; 最基本的特征是并发性。</p><h4 id="21-微内核操作系统有哪些优点？它为何能有这些优点？"><a href="#21-微内核操作系统有哪些优点？它为何能有这些优点？" class="headerlink" title="21.微内核操作系统有哪些优点？它为何能有这些优点？"></a>21.微内核操作系统有哪些优点？它为何能有这些优点？</h4><p>1）提高了系统的可扩展性<br>2）增强了系统的可靠性<br>3）可移植性强<br>4）提供了对分布式系统的支持<br>5）融入了面向对象技术<br>原因：微内核os结构是建立在模块化，层次化结构基础上的，并且采用了客户/服务器模式和面对对象的程序设计技术。</p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="6-进程与程序的主要区别和关系"><a href="#6-进程与程序的主要区别和关系" class="headerlink" title="6.进程与程序的主要区别和关系"></a>6.进程与程序的主要区别和关系</h4><p>1）程序是指令的集合，本身没有任何运行的含义，是一个静态概念；而进程是程序在处理机上的一次执行过程，是一个动态概念。<br>2）程序的存在是永久的；而进程是有生命周期的，它因创建而产生，因调度而执行，因缺少资源而暂停，因撤消而消亡。<br>3）程序仅是指令的有序集合；而进程则由程序段、数据段、进程控制块组成。<br>4）进程与程序之间不是一一对应的，即同一程序可同时运行于若干个不同的数据集合上，它将属于不同的进程：而一个进程也可以执行多个程序。</p><h4 id="10-pcb的作用是什么为什么说pcb是进程存在的唯一标志"><a href="#10-pcb的作用是什么为什么说pcb是进程存在的唯一标志" class="headerlink" title="10.pcb的作用是什么为什么说pcb是进程存在的唯一标志"></a>10.pcb的作用是什么为什么说pcb是进程存在的唯一标志</h4><p>  进程控制块是操作系统用来描述和管理进城的数据结构，其作用是使一个在多道程序环境下，不能独立运行的程序，成为一个能独立运行的基本单位，即一个能与其他进程并发执行的进程。<br>  在创建进程时，系统将为他配置一个PCB，在进程调度时，系统将根据PCB的状态和优先级等信息来选择新进程，然后将老进程的现场信息保存到它的PCB中，再根据 新进程PCB中所保存的处理机状态信息来恢复运行的现场；执行中的进程，如果需要访问文件或者需要与合作进程实现同步或通信，也都需要访问PCB；当进程因某种原因而暂停执行时，也必须将断点的现场信息保存到它的PCB中：当进程结束时，系统将回收它的PCB，可见，在进程的整个生命期中，系统总是通过其PCB对进程进行控和管理，亦即，系统是根据其PCB而不是任何别的什么而感知到进程的存在，所以说，PCB是进程存在的唯一标志。</p><h4 id="21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"><a href="#21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。" class="headerlink" title="21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"></a>21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。</h4><p>1）调度性。在传统的操作系统中，拥有资源的基本单位、独立调度和分派的基本单位都是进程。而在引入线程的OS中，则是把线程作为调度和分配的基本的单位，进程只是拥有资源的基本单位，而不再是调度和分派的基本单位。<br>2）并发性。在引入线程的OS中，不仅进程间可以并发执行，而且在一个进程内的多个线程间，也可以并发执行，因而比传统的OS具有更好的并发行。<br>3）拥有资源。在这两种OS中，拥有资源的基本单位都是进程。线程除了一点在在运行中必不可少的资源（如线程控制块、程序计数器、一组寄存器值和堆栈）外，本身基本不拥有系统资源，但它可共享其隶属的进程的资源。<br>4）独立性。每个进程都能独立地申请资源和独立的运行；但同一进程的多个线程则共享进程的内存地址空间和其他资源，它们之间的独立性比进程之间的独立性要低。<br>5）开销。由于创建和撤消进程时，系统都要为之分配和回收资源，如内存空间等。进程切换时所要保存和设置的现场信息也要明显地多于线程，因此，OS在创建、撤销和切换进程时<br>所付出的开销显著大于线程。另外由于隶属于同一个进程的多个线程共享同一地址空间和打开文件，从而使它们之间的同步和通信的实现也变得更为容易。<br>6）支持多处理机系统。传统的进程，只能运行在一个处理机上；多线程的进程，则可以将进程中的多个线程分配到多个处理机上，从而获得更好的并发执行效果。</p><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><h4 id="1-进程的三种基本状态"><a href="#1-进程的三种基本状态" class="headerlink" title="1.进程的三种基本状态"></a>1.进程的三种基本状态</h4><p>就绪状态、执行状态、阻塞状态。</p><h4 id="2-临界区、临界资源定义"><a href="#2-临界区、临界资源定义" class="headerlink" title="2.临界区、临界资源定义"></a>2.临界区、临界资源定义</h4><p>临界资源：一段时间内只允许一个进程访问。<br>临界区：进程中访问临界资源的那段代码称为临界区</p><h4 id="3-同步准则"><a href="#3-同步准则" class="headerlink" title="3.同步准则"></a>3.同步准则</h4><p>空闲让进、忙则等待、有限等待、让权等待</p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="7-试说明低级调度的主要功能"><a href="#7-试说明低级调度的主要功能" class="headerlink" title="7.试说明低级调度的主要功能"></a>7.试说明低级调度的主要功能</h4><p>1）保存处理机的现场信息<br>2）按某种算法选取进程<br>3）把处理机分配给进程</p><h4 id="12-试比较FCFS和SPF两种进程调度算法"><a href="#12-试比较FCFS和SPF两种进程调度算法" class="headerlink" title="12.试比较FCFS和SPF两种进程调度算法"></a>12.试比较FCFS和SPF两种进程调度算法</h4><p>相同点：两种调度算法都可以用于作业调度和进程调度<br>不同点：FCFS调度算法每次都从后备队列中选择一个或多个最先进入该队列的作业，将他们调入内存、分配资源、创建进程、插入到就绪队列。该算法有利于长作业/进程，不利于短作业/进程。SPF算法每次调度都从后备队列中选择一个或若干个估计运行时间最短的作业，调入内存中运行。该算法有利于短作业/进程，不利于长作业/进程</p><h4 id="15-为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？"><a href="#15-为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？" class="headerlink" title="15.为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？"></a>15.为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？</h4><p>1）终端型作业用户提交的作业大多属于较小的交互型作业，系统只要提交这些作业在第一队列规定的时间片内完成，终端作业用户就会感到满足。<br>2）短批处理作业用户，开始时像终端型作业一样，如果在第一队列中执行一个时间片段即可完成，便可获得与终端作业一样的响应时间。对于稍长作业，通常只需在第二和第三队列各执行一时间片即可完成，其周转时间仍然较短。<br>3）长批处理作业，他将依次在第1，2，。。。，n个队列中运行，然后再按轮转方式运行，用户不必担心其长期作业得不到处理。所以，多级反馈队列调度算法能满足更多用户需求。</p><h4 id="27-何谓死锁？产生死锁的原因和必要条件是什么？"><a href="#27-何谓死锁？产生死锁的原因和必要条件是什么？" class="headerlink" title="27.何谓死锁？产生死锁的原因和必要条件是什么？"></a>27.何谓死锁？产生死锁的原因和必要条件是什么？</h4><p>定义：如果一组进程中的每一个进程都在等待仅由该组进程中的其它进程才能引发的事件，那么该组进程是死锁的<br>产生原因：1）竞争资源。2）进程推进顺序非法。<br>必要条件：1）互斥条件。2）请求和保持条件。3）不可抢占条件。4）循环等待条件。</p><h4 id="30-银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？"><a href="#30-银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？" class="headerlink" title="30.银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？"></a>30.银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？</h4><p>能分配<br>request（0，1，0）≤need（7，4，3）；<br>request（0，1，0）≤available（2，3，0）；<br>系统暂时假定可为P0分配资源，并修改有关数据，如下所示：</p><table><thead><tr><th></th><th>allocation</th><th>need</th><th>available</th></tr></thead><tbody><tr><td></td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td></tr><tr><td>p0</td><td>0  2  0</td><td>7  3  3</td><td>2  2  0</td></tr><tr><td>p1</td><td>3  0  2</td><td>0  2  0</td><td></td></tr><tr><td>p2</td><td>3  0  2</td><td>6  0  0</td><td></td></tr><tr><td>p3</td><td>2  1  1</td><td>0  1  1</td><td></td></tr><tr><td>p4</td><td>0  2  2</td><td>4  3  1</td><td></td></tr></tbody></table><p>利用安全性算法检查</p><table><thead><tr><th></th><th>work</th><th>need</th><th>allocation</th><th>work+allocation</th><th>finish</th></tr></thead><tbody><tr><td></td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td><td></td></tr><tr><td>p1</td><td>2  2  0</td><td>0  2  0</td><td>3  0  2</td><td>5  2  2</td><td>true</td></tr><tr><td>p3</td><td>5  2  2</td><td>0  1  1</td><td>2  1  1</td><td>7  3  3</td><td>true</td></tr><tr><td>p0</td><td>7  3  3</td><td>7  3  3</td><td>0  2  0</td><td>7  5  3</td><td>true</td></tr><tr><td>p2</td><td>7  5  3</td><td>6  0  0</td><td>3  0  2</td><td>10 5  5</td><td>true</td></tr><tr><td>p4</td><td>10 5  5</td><td>4  3  1</td><td>0  0  2</td><td>10 5  7</td><td>true</td></tr></tbody></table><p>存在安全序列{p1,p3,p0,p2,p4}所以能分配</p><h4 id="31-在银行家算法中，若出现下述资源分配情况，试问："><a href="#31-在银行家算法中，若出现下述资源分配情况，试问：" class="headerlink" title="31.在银行家算法中，若出现下述资源分配情况，试问："></a>31.在银行家算法中，若出现下述资源分配情况，试问：</h4><table><thead><tr><th>process</th><th>allocation</th><th>need</th><th>available</th></tr></thead><tbody><tr><td>p0</td><td>0 0 3 2</td><td>0 0 1 2</td><td>1 6 2 2</td></tr><tr><td>p1</td><td>1 0 0 0</td><td>1 7 5 0</td><td></td></tr><tr><td>p2</td><td>1 3 5 4</td><td>2 3 5 6</td><td></td></tr><tr><td>p3</td><td>0 3 3 2</td><td>0 6 5 2</td><td></td></tr><tr><td>p4</td><td>0 0 1 4</td><td>0 6 5 6</td><td></td></tr></tbody></table><p>（1）该状态是否安全？</p><table><thead><tr><th></th><th>work</th><th>need</th><th>allocation</th><th>work+allocation</th><th>finish</th></tr></thead><tbody><tr><td>p0</td><td>1 6 2 2</td><td>0 0 1 2</td><td>0 0 3 2</td><td>1 6 5 4</td><td>true</td></tr><tr><td>p3</td><td>1 6 5 4</td><td>0 6 5 2</td><td>0 3 3 2</td><td>1 9 8 6</td><td>true</td></tr><tr><td>p4</td><td>1 9 8 6</td><td>0 6 5 6</td><td>0 0 1 4</td><td>1 9 9 10</td><td>true</td></tr><tr><td>p1</td><td>1 9 9 10</td><td>1 7 5 0</td><td>1 0 0 0</td><td>2 9 9 0</td><td>true</td></tr><tr><td>p2</td><td>2 9 9 10</td><td>2 3 5 6</td><td>1 3 5 4</td><td>3 12 14 14</td><td>true</td></tr></tbody></table><p>存在安全序列{p0,p3,p4,p1,p2}所以安全<br>（2）p2发出请求向量Request（1，2，2，2）后，系统能否将资源分配给它？<br>系统按银行家算法进行检查：<br>①request2（1，2，2，2）≤need2（2，3，5，6）<br>②request2（1，2，2，2）≤available（1，6，2，2）<br>③系统先假定可为P2分配资源并修改<br>available = （0，4，0，0）<br>allocation2 = （2，5，7，6）<br>need2 = （1，1，3，4）<br>④进行安全性检查：此时对所有的进程need≤available都不成立故系统进入不安全状态。<br>因此不能分配给P2</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2019/10/02/py/"/>
      <url>/2019/10/02/py/</url>
      
        <content type="html"><![CDATA[<p><strong><em>python</em></strong><br>  之前学的每门语言都是浅浅浅浅浅浅浅尝辄止看看能不能深入一点</p><h2 id="1-看看怎么方便换特色图片（一键向我的相册加入照片路径）"><a href="#1-看看怎么方便换特色图片（一键向我的相册加入照片路径）" class="headerlink" title="1.看看怎么方便换特色图片（一键向我的相册加入照片路径）"></a>1.看看怎么方便换特色图片（一键向我的相册加入照片路径）</h2><p>照着<a href="https://github.com/xiaohedou/imageMS" target="_blank" rel="noopener">这个</a>做吧</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录</title>
      <link href="/2019/10/01/article1/"/>
      <url>/2019/10/01/article1/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=30284543&amp;auto=1&amp;height=66"></iframe><br></div><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><h3 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h3><h4 id="2019-9-29"><a href="#2019-9-29" class="headerlink" title="2019.9.29"></a>2019.9.29</h4><p><strong><em>搭建自己的博客吧</em></strong><br>附上连接 <a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">参考</a> <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">原作者</a></p><h3 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h3><h4 id="2019-10-1"><a href="#2019-10-1" class="headerlink" title="2019.10.1"></a>2019.10.1</h4><p><strong><em>博客重建成功但我还是不知道写啥</em></strong><br>石头：159<br>呼符：0<br>消耗：<del>5呼符</del><br>  <del>写文章时不要开两个git界面，一个运行着服务，一个提交更改。会有蜜汁错误昨天把我搞炸了费半天劲重建。文章也不要乱删直接改配置内容原因同上。分类标签不要乱写不好去除</del><br>  图片路径要谨慎“medias/banner/0.jpg”这么写少了个/，就在该文件里找图了而不是在根的medias找。幸好这时候可以直接改配置，正确写法应是“/medias/banner/0.jpg” 我枯了</p><h4 id="2019-10-2"><a href="#2019-10-2" class="headerlink" title="2019.10.2"></a>2019.10.2</h4><p>石头：160<br>呼符：0<br>为博客更新了图片加了一首音乐<br>在<a href="https://wallhaven.cc/" target="_blank" rel="noopener">这里</a>找了半天图。。。</p><h4 id="2019-10-3"><a href="#2019-10-3" class="headerlink" title="2019.10.3"></a>2019.10.3</h4><p>石头：160<br>呼符：0<br>把主题颜色换成黑的了，加了emoji功能<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>。留言功能（没人留言吧），照教程得到各种key<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a>,<a href="https://www.jianshu.com/p/4242bb065550" target="_blank" rel="noopener">gittalk</a>再改改配置文件就好。duang的一下加了很多<a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="noopener">特技</a>。一行代码看板娘带回家<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">链接</a>对话感觉都无懈可击不用改了作者太强了。感觉最近一直在搬砖。</p><h4 id="2019-10-4"><a href="#2019-10-4" class="headerlink" title="2019.10.4"></a>2019.10.4</h4><p>石头：172<br>呼符：0<br>分类名称搞错只需使用hexo clean命令 再重新生成即可已经没什么好怕的了（可以随便删文了）<br><img src="1.jpg" alt="">偶尔放放有意思的（沙雕）图</p><h4 id="2019-10-4-1"><a href="#2019-10-4-1" class="headerlink" title="2019.10.4"></a>2019.10.4</h4><p>石头：172<br>呼符：0<br>消耗：<del>1呼符</del><br>竟无语凝噎python栏目不知道写啥了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
