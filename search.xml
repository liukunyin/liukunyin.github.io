<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java&amp;数据库</title>
      <link href="/2019/11/09/java-jdbc/"/>
      <url>/2019/11/09/java-jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><strong>database.properties</strong></p><pre class="line-numbers language-config"><code class="language-config">diverClass = com.mysql.cj.jdbc.Driverurl = jdbc:mysql://localhost:3306/steam?serverTimezone=UTC&characterEncoding=utf-8username = rootpassword = 000323624<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JDBCUtilsConfig</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  编写数据库连接的工具类,JDBC工具类 *  获取连接对象采用读取配置文件方式 *  读取文件获取连接,执行一次,static{} */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtilsConfig</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Connection con<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String diverClass<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String username<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">readConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>diverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token operator">+</span><span class="token string">"数据库连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    InputStream in <span class="token operator">=</span> JDBCUtilsConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"database.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    diverClass <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"diverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    url <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    username <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    password <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> con<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Sort.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> domain<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sort</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> String password<span class="token punctuation">;</span>  <span class="token keyword">private</span> String nicheng<span class="token punctuation">;</span>  <span class="token keyword">private</span> String imgurl<span class="token punctuation">;</span>  <span class="token keyword">private</span> String backurl<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> String nicheng<span class="token punctuation">,</span> String imgurl<span class="token punctuation">,</span> String backurl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nicheng <span class="token operator">=</span> nicheng<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imgurl <span class="token operator">=</span> imgurl<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>backurl <span class="token operator">=</span> backurl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> password<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getNicheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nicheng<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNicheng</span><span class="token punctuation">(</span>String nicheng<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nicheng <span class="token operator">=</span> nicheng<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getImgurl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> imgurl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImgurl</span><span class="token punctuation">(</span>String imgurl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imgurl <span class="token operator">=</span> imgurl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getBackurl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> backurl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBackurl</span><span class="token punctuation">(</span>String backurl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>backurl <span class="token operator">=</span> backurl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Sort [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", password="</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">", nicheng="</span> <span class="token operator">+</span> nicheng <span class="token operator">+</span> <span class="token string">", imgurl="</span>        <span class="token operator">+</span> imgurl <span class="token operator">+</span> <span class="token string">", backurl="</span> <span class="token operator">+</span> backurl <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> domain<span class="token punctuation">.</span>Sort<span class="token punctuation">;</span><span class="token keyword">import</span> jdbcutil<span class="token punctuation">.</span>JDBCUtils<span class="token punctuation">;</span><span class="token keyword">import</span> jdbcutil<span class="token punctuation">.</span>JDBCUtilsConfig<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    Connection con <span class="token operator">=</span> JDBCUtilsConfig<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>    PreparedStatement pst <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> pst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Sort<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Sort<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Sort s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"nicheng"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"imgurl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"backurl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Sort s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> pst<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DBUtils工具类"><a href="#DBUtils工具类" class="headerlink" title="DBUtils工具类"></a>DBUtils工具类</h2><p><strong>增删改操作</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>DbUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>QueryRunner<span class="token punctuation">;</span><span class="token keyword">import</span> jdbcutil<span class="token punctuation">.</span>JDBCUtilsConfig<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  使用QueryRunner类,实现对数据表的 *  insert delete update *  调用QueryRunner类的方法 update (Connection con,String sql,Object...param) *  Object...param 可变参数,Object类型,SQL语句会出现?占位符 *  数据库连接对象,自定义的工具类传递 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBUtilsTest</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Connection con <span class="token operator">=</span> JDBCUtilsConfig<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException  <span class="token punctuation">{</span>    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  定义方法,使用QueryRunner类的方法delete将数据表的数据删除   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建QueryRunner类对象</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写删除的SQL语句</span>    String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM user WHERE id=?"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用QueryRunner方法update</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     *  判断insert,update,delete执行是否成功     *  对返回值row判断     *  if(row>0) 执行成功     */</span>    DbUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  定义方法,使用QueryRunner类的方法update将数据表的数据修改   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建QueryRunner类对象</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写修改数据的SQL语句</span>    String sql <span class="token operator">=</span> <span class="token string">"UPDATE user SET name=?,password=?,nicheng=? WHERE id=?"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义Object数组,存储?中的参数</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"ssssss"</span><span class="token punctuation">,</span><span class="token string">"ddddddd"</span><span class="token punctuation">,</span><span class="token string">"dddddddd"</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用QueryRunner方法update</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    DbUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * 定义方法,使用QueryRunner类的方法update向数据表中,添加数据   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建QueryRunner类对象</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO user (name,password,nicheng)VALUES(?,?,?)"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将三个?占位符的实际参数,写在数组中</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"xd"</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"xxxx"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用QueryRunner类的方法update执行SQL语句</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    DbUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果处理集"><a href="#结果处理集" class="headerlink" title="结果处理集"></a>结果处理集</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>QueryRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>ArrayHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>ArrayListHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanListHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>ColumnListHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MapHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MapListHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>ScalarHandler<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Sort<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>jdbcutil<span class="token punctuation">.</span>JDBCUtilsConfig<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * QueryRunner数据查询操作: *   调用QueryRunner类方法query(Connection con,String sql,ResultSetHandler r, Object..params) *   ResultSetHandler r 结果集的处理方式,传递ResultSetHandler接口实现类 *   Object..params SQL语句中的?占位符 * *   注意: query方法返回值,返回的是T 泛型, 具体返回值类型,跟随结果集处理方式变化 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryRunnerDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Connection con <span class="token operator">=</span> JDBCUtilsConfig<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    arrayHandler();</span><span class="token comment" spellcheck="true">//    arrayListHandler();</span><span class="token comment" spellcheck="true">//    beanHandler();</span><span class="token comment" spellcheck="true">//    beanListHander();</span><span class="token comment" spellcheck="true">//    columnListHandler();</span><span class="token comment" spellcheck="true">//    scalarHandler();</span><span class="token comment" spellcheck="true">//    mapHandler();</span><span class="token comment" spellcheck="true">//    mapListHandler();</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第八种处理方法,MapListHandler   *  将结果集每一行存储到Map集合,键:列名,值:数据   *  Map集合过多,存储到List集合   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mapListHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT  * FROM sort"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法query,传递结果集实现类MapListHandler</span>    <span class="token comment" spellcheck="true">//返回值List集合, 存储的是Map集合</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> list <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MapListHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历集合list</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">:</span> list <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"..."</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第七种处理方法,MapHandler   *  将结果集第一行数据,封装到Map集合中   *  Map&lt;键,值> 键:列名  值:这列的数据   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mapHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT  * FROM sort"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法query,传递结果集实现类MapHandler</span>    <span class="token comment" spellcheck="true">//返回值: Map集合,Map接口实现类, 泛型</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MapHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历Map集合</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">".."</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第六种处理方法,ScalarHandler   *  对于查询后,只有1个结果   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">scalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT COUNT(*) FROM sort"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法query,传递结果集处理实现类ScalarHandler</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第五种处理方法,ColumnListHandler   *  结果集,指定列的数据,存储到List集合   *  List&lt;Object> 每个列数据类型不同   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">columnListHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM sort "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法 query,传递结果集实现类ColumnListHandler</span>    <span class="token comment" spellcheck="true">//实现类构造方法中,使用字符串的列名</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ColumnListHandler</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"sname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第四种处理方法, BeanListHandler   *  结果集每一行数据,封装JavaBean对象   *  多个JavaBean对象,存储到List集合   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">beanListHander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM sort "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法query,传递结果集处理实现类BeanListHandler</span>    List<span class="token operator">&lt;</span>Sort<span class="token operator">></span> list <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span>Sort<span class="token operator">></span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Sort s <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第三种处理方法,BeanHandler   *  将结果集的第一行数据,封装成JavaBean对象   *  注意: 被封装成数据到JavaBean对象, Sort类必须有空参数构造   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">beanHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM sort "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法,传递结果集实现类BeanHandler</span>    <span class="token comment" spellcheck="true">//BeanHandler(Class&lt;T> type)</span>    Sort s <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span>Sort<span class="token operator">></span><span class="token punctuation">(</span>Sort<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第二种处理方法,ArrayListHandler   *  将结果集的每一行,封装到对象数组中, 出现很多对象数组   *  对象数组存储到List集合   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayListHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM sort"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用query方法,结果集处理的参数上,传递实现类ArrayListHandler</span>    <span class="token comment" spellcheck="true">//方法返回值 每行是一个对象数组,存储到List</span>    List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> result<span class="token operator">=</span>  qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayListHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//集合的遍历</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs  <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//遍历对象数组</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>Object obj <span class="token operator">:</span> objs<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  结果集第一种处理方法, ArrayHandler   *  将结果集的第一行存储到对象数组中  Object[]   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    QueryRunner qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM sort"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用方法query执行查询,传递连接对象,SQL语句,结果集处理方式的实现类</span>    <span class="token comment" spellcheck="true">//返回对象数组</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Object obj <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java IO、文件操作</title>
      <link href="/2019/11/06/java-io/"/>
      <url>/2019/11/06/java-io/</url>
      
        <content type="html"><![CDATA[<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><h4 id="File类静态成员变量"><a href="#File类静态成员变量" class="headerlink" title="File类静态成员变量"></a>File类静态成员变量</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  java.io.File *    将操作系统中的,文件,目录(文件夹),路径,封装成File对象 *    提供方法,操作系统中的内容 *    File与系统无关的类 *    文件 file *    目录 directory *    路径 path */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//File类静态成员变量</span>    <span class="token comment" spellcheck="true">//与系统有关的路径分隔符</span>    String separator <span class="token operator">=</span> File<span class="token punctuation">.</span>pathSeparator<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是一个分号,目录的分割   Linux :</span>    <span class="token comment" spellcheck="true">//与系统有关的默认名称分隔符</span>    separator <span class="token operator">=</span> File<span class="token punctuation">.</span>separator<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向右 \  目录名称分割  Linux /</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File类的构造方法"><a href="#File类的构造方法" class="headerlink" title="File类的构造方法"></a>File类的构造方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  File类的构造方法 *  三种重载形式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File(File parent,String child)   *  传递路径,传递File类型父路径,字符串子路径   *  好处: 父路径是File类型,父路径可以直接调用File类方法   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span><span class="token string">"eclipse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File(String parent,String child)   *  传递路径,传递字符串父路径,字符串子路径   *  好处: 单独操作父路径和子路径   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span><span class="token punctuation">,</span><span class="token string">"eclipse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File(String pathname)   *  传递路径名: 可以写到文件夹,可以写到一个文件   *  c:\\abc   c:\\abc\\Demo.java   *  将路径封装File类型对象   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\eclipse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File类的创建和删除功能"><a href="#File类的创建和删除功能" class="headerlink" title="File类的创建和删除功能"></a>File类的创建和删除功能</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  File类的创建和删除功能 *  文件或者是目录 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File类的删除功能   *  boolean delete()   *  删除的文件或者是文件夹,在File构造方法中给出   *  删除成功返回true,删除失败返回false   *  删除方法,不走回收站,直接从硬盘中删除   *  删除有风险,运行需谨慎   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File创建文件夹功能   *  boolean mkdirs() 创建多层文件夹   *  创建的路径也在File构造方法中给出   *  文件夹已经存在了,不在创建   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:\\abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File创建文件的功能   *  boolean createNewFile()   *  创建的文件路径和文件名,在File构造方法中给出   *  文件已经存在了,不在创建   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File类的获取功能"><a href="#File类的获取功能" class="headerlink" title="File类的获取功能"></a>File类的获取功能</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  File类的获取功能 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo3</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * File类的获取功能   * String getParent() 返回String对象   * File getParentFile()返回File对象   * 获取父路径   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\eclipse\\eclipse.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File parent <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * File类获取功能   * String getAbsolutePath() 返回String对象   * File   getAbsoluteFile() 返回File对象   * 获取绝对路径   * eclipse环境中,写的是一个相对路径,绝对位置工程根目录   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File absolute <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>absolute<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * File类获取功能   * long length()   * 返回路径中表示的文件的字节数   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\eclipse\\eclipse.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> length <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File类的获取功能   *  String getName()   *  返回路径中表示的文件或者文件夹名   *  获取路径中的最后部分的名字   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\eclipse\\eclipse.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*String path = file.getPath();    System.out.println(path);*/</span><span class="token comment" spellcheck="true">//    System.out.println(file);</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File类的判断功能"><a href="#File类的判断功能" class="headerlink" title="File类的判断功能"></a>File类的判断功能</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  File类的判断功能 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File判断功能   *  boolean isDirectory()   *  判断File构造方法中封装的路径是不是文件夹   *  如果是文件夹,返回true,不是文件返回false   *   *  boolean isFile()   *  判断File构造方法中封装的路径是不是文件   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\eclipse\\eclipse.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">boolean</span> b <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File判断功能   *  boolean exists()   *  判断File构造方法中封装路径是否存在   *  存在返回true,不存在返回false   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File类获取功能"><a href="#File类获取功能" class="headerlink" title="File类获取功能"></a>File类获取功能</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  File类获取功能 *  list *  listFiles */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取系统中的所有根目录</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileArr <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">listRoots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> fileArr<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File类的获取功能   *  File[] listFiles()   *  获取到,File构造方法中封装的路径中的文件和文件夹名 (遍历一个目录)   *  返回的是目录或者文件的全路径   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\eclipse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileArr <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> fileArr<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  File类的获取功能   *  String[] list()   *  获取到,File构造方法中封装的路径中的文件和文件夹名 (遍历一个目录)   *  返回只有名字   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> strArr<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File过滤器"><a href="#File过滤器" class="headerlink" title="File过滤器"></a>File过滤器</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileFilter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  自定义过滤器 *  实现FileFilter接口,重写抽象方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FileFilter</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File pathname<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * pathname 接受到的也是文件的全路径     * c:\\demo\\1.txt     * 对路径进行判断,如果是java文件,返回true,不是java文件,返回false     * 文件的后缀结尾是.java     */</span>    <span class="token comment" spellcheck="true">//String name = pathname.getName();</span>    <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  File类的获取,文件获取过滤器 *  遍历目录的时候,可以根据需要,只获取满足条件的文件 *  遍历目录方法 listFiles()重载形式 *  listFiles(FileFilter filter)接口类型 *  传递FileFilter接口的实现类 *  自定义FileFilter接口实现类,重写抽象方法, *  接口实现类对象传递到遍历方法listFiles */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:\\demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileArr <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> fileArr<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.JPG" alt="文件过滤器的执行流程"></p><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="字节输出流OutputStream"><a href="#字节输出流OutputStream" class="headerlink" title="字节输出流OutputStream"></a>字节输出流OutputStream</h4><blockquote><p>字节输出流</p><ul><li>java.io.OutputStream 所有字节输出流的超类</li><li>作用: 从Java程序,写出文件</li><li>字节: 这样流每次只操作文件中的1个字节</li><li>写任意文件</li></ul></blockquote><blockquote><p>方法都是写文入的方法</p><ul><li>write(int b) 写入1个字节</li><li>write(byte[] b) 写入字节数组</li><li>write(byte[] b,int,int)写入字节数组,int 开始写入的索引, int 写几个</li><li>close() 方法,关闭流对象,释放与次流相关的资源<br>流对象,操作文件的时候, 自己不做,依赖操作系统</li></ul></blockquote><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *   FileOutputStream *   写入数据文件,学习父类方法,使用子类对象 * *   子类中的构造方法: 作用:绑定输出的输出目的 *     参数: *       File    封装文件 *       String  字符串的文件名 * *   流对象使用步骤 *     1. 创建流子类的对象,绑定数据目的 *     2. 调用流对象的方法write写 *     3. close释放资源 * *    流对象的构造方法,可以创建文件,如果文件存在,直接覆盖 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStreamDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//流对象的方法write写数据</span>    <span class="token comment" spellcheck="true">//写1个字节</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写字节数组的一部分,开始索引,写几个</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写入字节数组的简便方式</span>    <span class="token comment" spellcheck="true">//写字符串</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关闭资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件续写与换行</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  FileOutputStream 文件的续写和换行问题 *  续写: FileOutputStream构造方法, 的第二个参数中,加入true *  在文件中,写入换行,符号换行  \r\n *  \r\n 可以写在上一行的末尾, 也可以写在下一行的开头 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStreamDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>异常处理</strong></p><pre class="line-numbers language-Java"><code class="language-Java">import java.io.FileOutputStream;import java.io.IOException;/* *   IO流的异常处理 *   try catch finally * *   细节: *     1. 保证流对象变量,作用域足够 *     2. catch里面,怎么处理异常 *         输出异常的信息,目的看到哪里出现了问题 *         停下程序,从新尝试 *     3. 如果流对象建立失败了,需要关闭资源吗 *         new 对象的时候,失败了,没有占用系统资源 *         释放资源的时候,对流对象判断null *         变量不是null,对象建立成功,需要关闭资源 */public class FileOutputStreamDemo3 {  public static void main(String[] args) {    //try 外面声明变量,try 里面建立对象    FileOutputStream fos = null;    try{      fos = new FileOutputStream("s:\\a.txt");      fos.write(100);    }catch(IOException ex){      System.out.println(ex);      throw new RuntimeException("文件写入失败,重试");    }finally{      try{        if(fos!=null)            fos.close();      }catch(IOException ex){        throw new RuntimeException("关闭资源失败");      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字节输入流InputStream"><a href="#字节输入流InputStream" class="headerlink" title="字节输入流InputStream"></a>字节输入流InputStream</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *   字节输入流 *     java.io.InputStream 所有字节输入流的超类 *   作用: 读取任意文件,每次只读取1个字节 *   读取的方法  read *     int  read() 读取1个字节 *     int  read(byte[] b) 读取一定量的字节,存储到数组中 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h5><p><strong>FileInputStream读取文件</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  FileInputStream读取文件 * *  构造方法: 为这个流对象绑定数据源 * *    参数: *      File 类型对象 *      String 对象 *   输入流读取文件的步骤 *     1. 创建字节输入流的子类对象 *     2. 调用读取方法read读取 *     3. 关闭资源 * *     read()方法, *       read()执行一次,就会自动读取下一个字节 *       返回值,返回的是读取到的字节, 读取到结尾返回-1 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读取一个字节,调用方法read 返回int</span>    <span class="token comment" spellcheck="true">//使用循环方式,读取文件,  循环结束的条件  read()方法返回-1</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接受read方法的返回值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//关闭资源</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  FileInputStream读取文件 *   读取方法  int read(byte[] b) 读取字节数组 *   数组作用: 缓冲的作用, 提高效率 *   read返回的int,表示什么含义 读取到多少个有效的字节数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h4><p><strong>读取单个字符</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  字节输入流,绑定数据源 *  字节输出流,绑定数据目的 * *  输入,读取1个字节 *  输出,写1个字节 *  此方法慢! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义两个流的对象变量</span>    FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>    FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//建立两个流的对象,绑定数据源和数据目的</span>      fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\java\\Filetest\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\java\\Filetest\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//字节输入流,读取1个字节,输出流写1个字节</span>      <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"文件复制失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fos<span class="token operator">!=</span>null<span class="token punctuation">)</span>          fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"释放资源失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>fis<span class="token operator">!=</span>null<span class="token punctuation">)</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"释放资源失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>读取字节数组</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  字节流复制文件 *   采用数组缓冲提高效率 *   字节数组 *   FileInputStream 读取字节数组 *   FileOutputStream 写字节数组 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Copy_1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> s <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>    FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:\\t.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\t.zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定义字节数组,缓冲</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//读取数组,写入数组</span>      <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"文件复制失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fos<span class="token operator">!=</span>null<span class="token punctuation">)</span>          fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"释放资源失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>fis<span class="token operator">!=</span>null<span class="token punctuation">)</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"释放资源失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> e <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *   字符输出流 *     java.io.Writer 所有字符输出流的超类 *   写文件,写文本文件 * *   写的方法 write *     write(int c) 写1个字符 *     write(char[] c)写字符数组 *     write(char[] c,int,int)字符数组一部分,开始索引,写几个 *     write(String s) 写入字符串 * *   Writer类的子类对象 FileWriter * *   构造方法:  写入的数据目的 *     File 类型对象 *     String 文件名 * *   字符输出流写数据的时候,必须要运行一个功能,刷新功能 *   flush() */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriterDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"c:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写1个字符</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写1个字符数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写字符数组一部分</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写如字符串</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  字符输入流读取文本文件,所有字符输入流的超类 *    java.io.Reader *  专门读取文本文件 * *  读取的方法 : read() *   int read() 读取1个字符 *   int read(char[] c) 读取字符数组 * *   Reader类是抽象类,找到子类对象 FileReader * *   构造方法: 绑定数据源 *     参数: *        File  类型对象 *        String文件名 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReaderDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"c:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*int len = 0 ;    while((len = fr.read())!=-1){      System.out.print((char)len);    }*/</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 集合框架</title>
      <link href="/2019/11/04/java-list/"/>
      <url>/2019/11/04/java-list/</url>
      
        <content type="html"><![CDATA[<p>菜鸟教程<a href="https://www.runoob.com/java/java-collections.html" target="_blank" rel="noopener">java集合框架</a></p><h3 id="集合使用的回顾"><a href="#集合使用的回顾" class="headerlink" title="集合使用的回顾"></a>集合使用的回顾</h3><p><strong>A:集合使用的回顾</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span>a<span class="token punctuation">.</span>ArrayList集合存储<span class="token keyword">int</span>类型元素    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">*</span>b<span class="token punctuation">.</span>ArrayList集合存储Person类型元素   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>“小强”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>“老王”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Person p <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//get调用的是类中的ToString方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器iterator"><a href="#迭代器iterator" class="headerlink" title="迭代器iterator"></a>迭代器iterator</h2><h3 id="迭代器的概述"><a href="#迭代器的概述" class="headerlink" title="迭代器的概述"></a>迭代器的概述</h3><p><strong>遍历用</strong></p><blockquote><p><strong>a:</strong>java中提供了很多个集合，它们在存储元素时，采用的存储方式不同。我们要取出这些集合中的元素，可通过一种通用的获取方式来完成。</p></blockquote><blockquote><p><strong>b:</strong>Collection集合元素的通用获取方式：在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p></blockquote><blockquote><p><strong>c:</strong>每种集合的底层的数据结构不同,例如ArrayList是数组,LinkedList底层是链表,但是无论使用那种集合,我们都会有判断是否有元素以及取出里面的元素的动作,那么Java为我们提供一个迭代器定义了统一的判断元素和取元素的方法</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  集合中的迭代器: *    获取集合中元素方式 *  接口 Iterator : 两个抽象方法 *     boolean hasNext() 判断集合中还有没有可以被取出的元素,如果有返回true *     next() 取出集合中的下一个元素 * *  Iterator接口,找实现类. *    Collection接口定义方法 *       Iterator  iterator() *    ArrayList 重写方法 iterator(),返回了Iterator接口的实现类的对象 *    使用ArrayList集合的对象 *     Iterator it =array.iterator(),运行结果就是Iterator接口的实现类的对象 *     it是接口的实现类对象,调用方法 hasNext 和 next 集合元素迭代 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//迭代器,对集合ArrayList中的元素进行取出</span>    <span class="token comment" spellcheck="true">//调用集合的方法iterator()获取出,Iterator接口的实现类的对象</span>    Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//接口实现类对象,调用方法hasNext()判断集合中是否有元素</span>    <span class="token comment" spellcheck="true">//boolean b = it.hasNext();</span>    <span class="token comment" spellcheck="true">//System.out.println(b);</span>    <span class="token comment" spellcheck="true">//接口的实现类对象,调用方法next()取出集合中的元素</span>    <span class="token comment" spellcheck="true">//String s = it.next();</span>    <span class="token comment" spellcheck="true">//System.out.println(s);</span>    <span class="token comment" spellcheck="true">//迭代是反复内容,使用循环实现,循环的条件,集合中没元素, hasNext()返回了false</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>//集合可以存储任意类型的对象<br>//集合中,不指定存储的数据类型, 集合什么都存<br>Collection coll = new ArrayList();<br>//迭代器获取<br>Iterator it = coll.iterator();</p></blockquote><blockquote><p>遍历过程中不能修改集合的长度</p></blockquote><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote><p>JDK1.5 出现新的安全机制,保证程序的安全性<br> 泛型: 指明了集合中存储数据的类型  &lt;数据类型&gt;<br> Collection&lt;String&gt; coll = new ArrayList&lt;String&gt;();</p></blockquote><blockquote><p>java泛型,是伪泛型ArrayList&lt;String&gt;编译手段<br>arr.add(“”)不是String,编译失败<br>存储的是String编译成功.<br>编译后的class文件没有泛型<br>可以保证安全性(不符合泛型编译不通过)</p></blockquote><p><strong>带有泛型的类</strong></p><blockquote><p>ArrayList&lt;E&gt;<br> E: Element 元素, 实际思想就是一个变量而已<br> ArrayList&lt;Integer&gt; , E 接受到类型,就是Integer类型</p></blockquote><p><strong>泛型通配符</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  泛型的通配符 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">890</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iterator</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iterator</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  定义方法,可以同时迭代2个集合   *  参数: 怎么实现 , 不能写ArrayList,也不能写HashSet   *  参数: 或者共同实现的接口   *  泛型的通配,匹配所有的数据类型  ?   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">iterator</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span>    Iterator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//it.next()获取的对象,什么类型</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通配符的限定</strong></p><blockquote><p>定义方法,可以同时遍历3集合,遍历三个集合的同时,可以调用工作方法 work<br>? 通配符,迭代器it.next()方法取出来的是Object类型,怎么调用work方法<br>强制转换:  it.next()=Object o ==&gt; Employee<br>方法参数: 控制,可以传递Employee对象,也可以传递Employee的子类的对象<br>泛型的限定  本案例,父类固定Employee,但是子类可以无限?<br>  ? extends Employee 限制的是父类, 上限限定, 可以传递Employee,传递他的子类对象<br>  ? super   Employee 限制的是子类, 下限限定, 可以传递Employee,传递他的父类对象</p></blockquote><h3 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  JDK1.5新特性,增强for循环 *  JDK1.5版本后,出现新的接口 java.lang.Iterable *    Collection开是继承Iterable *    Iterable作用,实现增强for循环 * *    格式: *      for( 数据类型  变量名 : 数组或者集合 ){ *         sop(变量); *      } */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  增强for循环遍历集合   *  存储自定义Person类型   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>Person<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Person p <span class="token operator">:</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//for对于对象数组遍历的时候,能对象的方法</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"itcast"</span><span class="token punctuation">,</span><span class="token string">"cn"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String s <span class="token operator">:</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  实现for循环,遍历数组   *  好处: 代码少了,方便对容器遍历   *  弊端: 没有索引,不能操作容器里面的元素   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//相当于对i赋值</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合Collection"><a href="#集合Collection" class="headerlink" title="集合Collection"></a>集合Collection</h2><p>集合是java中提供的一种容器，可以用来存储多个数据。</p><blockquote><p>集合和数组的区别</p><ul><li>数组的长度是固定的。集合的长度是可变的。</li><li>集合中存储的元素必须是引用类型数据</li></ul></blockquote><h3 id="集合继承关系图"><a href="#集合继承关系图" class="headerlink" title="集合继承关系图"></a>集合继承关系图</h3><pre><code>A:集合继承关系图 a:ArrayList的继承关系: 查看ArrayList类发现它继承了抽象类AbstractList同时实现接口List，而List接口又继承了Collection接口。Collection接口为最顶层集合接口了。 源代码：  interface List extends Collection {  }  public class ArrayList extends AbstractList implements List{  }b:集合继承体系 这说明我们在使用ArrayList类时，该类已经把所有抽象方法进行了重写。那么，实现Collection接口的所有子类都会进行方法重写。   Collecton接口常用的子接口有：List接口、Set接口   List接口常用的子类有：ArrayList类、LinkedList类   Set接口常用的子类有：HashSet类、LinkedHashSet类                              Collection 接口                                   |     ----------------------------------------------------------------     |                                                              |    List接口                                                       Set接口     |                                                              | ----------------                                             ------------- |              |                                             |            |ArrayList类    LinkedList类                                 HashSet类     LinkedHashSet类</code></pre><h3 id="集合Collection的方法"><a href="#集合Collection的方法" class="headerlink" title="集合Collection的方法"></a>集合Collection的方法</h3><p><img src="1.jpg" alt="集合Collection的方法"></p><blockquote><p>Collection接口中的方法<br>是集合中所有实现类必须拥有的方法<br>使用Collection接口的实现类,程序的演示<br>ArrayList implements List<br>List extends Collection<br>方法的执行,都是实现的重写</p></blockquote><blockquote><p><strong>学习Java中三种长度表现形式</strong><br>数组.length 属性  返回值 int<br>字符串.length() 方法,返回值int<br>集合.size()方法, 返回值int</p></blockquote><h3 id="Lsit"><a href="#Lsit" class="headerlink" title="Lsit"></a>Lsit</h3><blockquote><p>List接口派系, 继承Collection接口<br> 下面有很多实现类<br>List接口特点: 有序,索引,可以重复元素<br> 实现类, ArrayList, LinkedList<br>List接口中的抽象方法,有一部分方法和他的父接口Collection是一样<br><strong>List接口的自己特有的方法, 带有索引的功能</strong><br>详细看文档</p></blockquote><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>Set接口,特点不重复元素,没索引<br>Set接口的实现类,HashSet (哈希表)<br>特点: 无序集合,存储和取出的顺序不同,没有索引,不存储重复元素<br>代码的编写上,和ArrayList完全一致<br>详细看文档</p></blockquote><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><strong>Map接口中的常用方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  Map接口中的常用方法 *    使用Map接口的实现类 HashMap */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  移除集合中的键值对,返回被移除之前的值   *  V remove(K)   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * 通过键对象,获取值对象   * V get(K)   * 如果集合中没有这个键,返回null   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建集合对象,作为键的对象整数,值的对象存储字符串</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  将键值对存储到集合中   *  V put(K,V) K 作为键的对象, V作为值的对象   *  存储的是重复的键,将原有的值,覆盖   *  返回值一般情况下返回null,   *  存储重复键的时候,返回被覆盖之前的值   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建集合对象,HashMap,存储对象,键是字符串,值是整数</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Map集合的遍历</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  Map集合的遍历 *    利用键获取值 *    Map接口中定义方法keySet *    所有的键,存储到Set集合 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     *  1. 调用map集合的方法keySet,所有的键存储到Set集合中     *  2. 遍历Set集合,获取出Set集合中的所有元素 (Map中的键)     *  3. 调用map集合方法get,通过键获取到值     */</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1. 调用map集合的方法keySet,所有的键存储到Set集合中</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 遍历Set集合,获取出Set集合中的所有元素 (Map中的键)</span>    Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//it.next返回是Set集合元素,也就是Map中的键</span>      <span class="token comment" spellcheck="true">//3. 调用map集合方法get,通过键获取到值</span>      String key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Integer value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"...."</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Integer value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"...."</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>LinkedHashMap继承HashMap<br>保证迭代的顺序</p></blockquote><h2 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  集合操作的工具类 *    Collections */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * Collections.shuffle方法   * 对List集合中的元素,进行随机排列   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用工具类方法shuffle对集合随机排列</span>    Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * Collections.binarySearch静态方法   * 对List集合进行二分搜索,方法参数,传递List集合,传递被查找的元素   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用工具类静态方法binarySearch</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  Collections.sort静态方法   *  对于List集合,进行升序排列   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建List集合</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ewrew"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"qwesd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Qwesd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"wer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用集合工具类的方法sort</span>    Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java文档、jar包</title>
      <link href="/2019/11/03/java-doc/"/>
      <url>/2019/11/03/java-doc/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.runoob.com/java/java-documentation.html" target="_blank" rel="noopener">菜鸟教程</a></p><p><strong>文档</strong></p><blockquote><p>在开始的 /<em>* 之后，第一行或几行是关于类、变量和方法的主要描述。<br>之后，你可以包含一个或多个各种各样的 @ 标签。每一个 @ 标签必须在一个新行的开始或者在一行的开始紧跟星号(\</em>).<br>多个相同类型的标签应该放成一组。例如，如果你有三个 @see 标签，可以将它们一个接一个的放在一起。</p></blockquote><blockquote><p>下面是一个类的说明注释的实例：</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * * 类GetSum实现整数求和 * @author Apple * @version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetSum</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 方法 getSum功能计算两个整数的求和   * 调用此方法传递两个int整数,返回求和值   * @param a this is a   * @param b this is b   * @return sum   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1.jpg" alt="导出doc"></p><p><strong>jar包</strong></p><blockquote><p>jar包是一个可以包含许多.class文件的压缩文件。我们可以将一个jar包加入到项目的依赖中，从而该项目可以使用该jar下的所有类；也可以把项目中所有的类打包到指定的jar包，提供给其他项目使用。</p></blockquote><p><strong>导出jar包</strong><br>即把项目中所有类(.class文件)，打包到指定的jar包中，步骤如下图：<br><img src="2.jpg" alt="导出jar包"></p><p><strong>导入jar包</strong><br>即把指定的jar包，加入到指项目中，提供给项目使用。<br>导入jar包的过程是将jar包加入到项目的.classpath文件中去，让项目识别，便可以使用jar包中所有的.class文件类。以下是加入步骤：<br>  1：项目根文件夹下创建lib文件夹，用于同一管理所有的jar文件<br>  2：把jar文件复制到lib文件夹中<br>  3：右键点击jar文件，点击Build Path，选择Add to Build Path，此时查看项目根文件夹下的.classpath文件，发现新加入的jar包路径被配置到了该文件中。说明可以使用jar包中所有类了。</p><p><img src="3.jpg" alt="导入jar包"></p><blockquote><p><strong>注意：</strong><br>  Jar包加入后，必须Add to Build Path才能使用<br>  Jar包加入后，加入的类也必须导包，如果加入的类其包名与现有类包名相同，则视作在同一个包下。(不常见)</p></blockquote><p><strong>使用时导入包即可</strong></p><blockquote><p>import 包名.类名;</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档写法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾java</title>
      <link href="/2019/10/30/learn-java/"/>
      <url>/2019/10/30/learn-java/</url>
      
        <content type="html"><![CDATA[<h2 id="标识符、HelloWorld"><a href="#标识符、HelloWorld" class="headerlink" title="标识符、HelloWorld"></a>标识符、HelloWorld</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   标识符   Java中，自己定义的内容   标识符的规则：     组成： 字母52个A-Z a-z 数字0-9 _ 下划线 $ 美元符   注意： 不能数字开头，不能是关键字   定义名字：      _abc  0a  a0  a#a  a$a   void     YES  NO  YES NO   YES   NO     类的名字： 首字母大写，第二个单词首字母大写    BeiJingShiHaiDianQuYiYuan    MeiGuoJiaLiFuNiYa   方法的名字：首字母小写，每个单词首字母大写     addStudent*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> _Class<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*     实现了一个Java的HelloWorld程序   实现步骤：     1. 定义类     2. 定义主方法     3. 一条命令，控制台输出了HelloWorld*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//main主方法，固定格式，程序的入口点</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//系统 输出 打印    打印的内容</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量、数据类型、运算符"><a href="#变量、数据类型、运算符" class="headerlink" title="变量、数据类型、运算符"></a>变量、数据类型、运算符</h2><p><strong>1.什么是变量?变量的定义格式?要使用变量需要注意什么?</strong><br>就是可变的量<br>数据类型 变量名 = 数值;<br>同一范围内不能重复定义<br>不赋值不能使用</p><p><strong>2.Java中的数据类型分几类?基本数据类型有哪些?</strong><br>两大类<br> 基本数据类型<br>  byte(1) short(2) int(4) long(8) float(4) double(6) char(2) boolean(1)<br> 引用数据类型<br>  类 接口 数组 枚举</p><p><strong>3.数据类型转换：</strong><br> 隐式转换：由低级专向高级<br> 强制转换：由高级专向低级</p><p> 面试题：<br> 第一题：<br> byte b1=3,b2=4,b;<br> b=b1+b2;//错误 因为他们最终是要转向int类型 而int类型的值不能赋值给byte<br> b=3+4;//正确 因为他们都是常量 具有常量类型优化机制 可以直接识别为byte<br> 哪句是编译失败的呢？为什么呢？</p><p> 第二题：<br> byte  by = 130;有没有问题?有问题如何解决?结果是多少呢?<br> 有问题 因为这个数超出了byte的取值范围 要用byte类型进行强制转换 结果是-126</p><p> 第三题:<br> byte b = 10;<br> b++;<br> b = b + 1;//失败 因为在和一个int类型的常量进行相加的时候b自动转换成int类型 而一个int类型的数据是没办法直接赋值给byte类型的变量的<br> 哪句是编译失败的呢？为什么呢？</p><p><strong>4.常见的算术运算符有哪些?</strong><br> 答：+ - * / %<br> (1)+运算符的作用有哪些?<br>   可以作为数学运算符 也可用作字符串拼接符<br> (2)除法和取余的区别?<br>   除法是数学运算机型相初操作 取余数运算符是对除法操作之后取其余数进行操作的<br> (3)++和–的使用规则?<br>  分别为自增 自减 在放在 变量前面就是先进行运算放在后面就是后进行运算</p><p><strong>5.常见的赋值运算符有哪些?</strong><br> 答：= += -= *= /= %=<br> (1)+=运算的作用是什么?<br>   a += b;== a = a + b;<br> (2)扩展的赋值运算符有什么特点?<br>   会进行自动强制数据类型转换</p><p><strong>6.看程序说结果，请不要提前运行？</strong></p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">--</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//26</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x = "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">",y = "</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*x = 2 y = 26*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本数据类型包装类，装箱、拆箱"><a href="#基本数据类型包装类，装箱、拆箱" class="headerlink" title="基本数据类型包装类，装箱、拆箱"></a>基本数据类型包装类，装箱、拆箱</h2><p><strong>包装类</strong><br>把基本数据类型成员变量看作对象可以进行一些操作<br>int-&gt;Integer<br>byte-&gt;Byte<br>……<br><strong>装箱、拆箱</strong></p><blockquote><p>JDK1.5后出现的新特性，自动装箱和自动拆箱<br>自动装箱：基本数据类型，直接变成对象<br>Integer in = 1;//Integer in = new Integer(1)<br>自动拆箱：对象中的数据变回基本数据类型<br>in = in + 1;//in = in.inValue + 1</p></blockquote><h2 id="为循环起名、使用引用数据类型-Random、Scanner"><a href="#为循环起名、使用引用数据类型-Random、Scanner" class="headerlink" title="为循环起名、使用引用数据类型(Random、Scanner)"></a>为循环起名、使用引用数据类型(Random、Scanner)</h2><p><strong>break</strong></p><blockquote><p>a:for(int i = 0 ; i &lt; 2; i++){<br>      for(int j = 0; j &lt; 5 ;j++){<br>        System.out.print(“j=”+j);<br>        break a;<br>      }<br>      System.out.println(“i=”+i);<br>    }<br>给循环命名， 可在任意子循环中跳出或者结束指定循环</p></blockquote><p><strong>Random</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    java中已经有的引用类型  Random类,作用,产生随机数  步骤:    1. 导入包, Random类,也在java.util文件夹    2. 公式: 创建出Random类型的变量    3. 变量. 调用Random类中的功能,产生随机数    Random类,提供功能 , 名字  nextInt() 产生一个随机数, 结果是int类型    出现随机数的范围, 在功能nextInt(写一个整数), 整数: 随机出来的范围    随机数的范围在  0 - 指定的整数之间的随机数   nextInt(100)   0-99    产生浮点的随机数: 功能名字 nextDouble()  随机数的范围 0.0-1.0    随机数: 伪随机数, 虚拟机根据人写好的一个算法,生成出来的*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 2. 公式: 创建出Random类型的变量</span>     Random ran <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3. 变量. 调用Random类中的功能,产生随机数</span>     <span class="token comment" spellcheck="true">// Random类中的,产生随机数的功能</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//问题? 产生随机数,范围 1-100之间</span>     <span class="token comment" spellcheck="true">// nextInt(100) 0-99 + 1</span>     <span class="token keyword">double</span> d <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Scanner</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*  引用数据类型, 介绍一个类  Scanner  java已经存在了,是Sun公司为我们做好的类,使用他  定义引用数据类型变量,和基本类型变量区别    int a = 1;  格式:    类型  变量名 = new 类型();  举例: 创建出Scanner类的变量    Scanner sc = new Scanner();    int a = 1;  每个引用类型,都有自己的功能,如何使用功能  公式:    变量.功能名字()  Scanner类,作用,让我在命令行中,接受键盘的输入  使用Scanner类步骤:    1. 导入包,指明类所在的文件夹, 关键字 import       java文件夹-util文件夹    2. 公式,创建出Scanner类型变量    3. 变量.使用Scanner类中的功能,完成键盘输入*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类型  变量名 = new 类型();</span>    <span class="token comment" spellcheck="true">// 创建出Scanner,类变量</span>    Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变量.功能名字() 接受键盘输入</span>    <span class="token comment" spellcheck="true">// 功能: nextInt() 接受键盘输入,保证输入的是整数</span>    <span class="token comment" spellcheck="true">// 功能接受的数据就是整数,功能运行后的结果就是整数类型</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Scanner类的另一个功能    next() 接受键盘输入的字符串</span>    String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组、switch"><a href="#数组、switch" class="headerlink" title="数组、switch"></a>数组、switch</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    定义数组容器   定义数组容器,要素,强制数据类型的语言   必须有数据类型, 大小, 就是存储数据的个数   定义数组公式:     数据类型[] 变量名 = new 数据类型[存储元素的个数];      数据类型: 数组中存储元素的数据类型      [] 表示数组的意思      变量名  自定义标识符      new  创建容器关键字      数据类型: 数组中存储元素的数据类型      []  表示数组的意思      元素个数,就是数组中,可以存储多少个数据 (恒定, 定长)    数组是一个容器: 存储到数组中的每个元素,都有自己的自动编号    自动编号,最小值是0, 最大值,长度-1    自动编号专业名次, 索引(index), 下标, 角标    访问数组存储的元素,必须依赖于索引, 公式 数组名[索引]    Java提供一个属性,操作索引的    数组的一个属性,就是数组的长度, 属性的名字 length    使用属性:  数组名.length  数据类型 int    数组的最小索引是0, 最大索引数组.length-1    数组的两个定义方式      数据类型[]  变量名 = new 数据类型[]{元素1,元素2,元素3};      注意事项: new 后面的中括号中,不允许写任何内容,写了就编译失败      数据类型[]  变量名 = {元素1,元素2,元素3};*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义数组,存储整数,容器长度, 3个</span>    <span class="token comment" spellcheck="true">// 数据类型[] 变量名 = new 数据类型[存储元素的个数];</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过索引的方式,数组中的三个元素</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二维数组</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    二维数组    数组中的数组,数组里面存储的还是数组  定义方式和一维数组很相似  int[][] arr = new int[3][4];  定义一个二维数组  [3]  表示: 二维数组中,有三个一维数组  [4]  表示: 三个一维数组中,每个数组的长度是4  最简单的二维数组定义方式     int[][] arr = { {1,4} ,{3,6,8}, {0,9,8} };*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayArrayDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>switch</strong></p><blockquote><p>选择语句  switch语句<br> 编写格式<br>    swtich(表达式){<br>    case 常量1 :<br>      要执行的语句;<br>    break;<br>    case 常量2 :<br>      要执行的语句;<br>    break;<br>    case 常量3 :<br>      要执行的语句;<br>    break;<br>    default:<br>      要执行的语句;<br>    break;<br>  }<br>  执行流程:  表达式,和case后面的常量进行比较<br>  和哪个case后的常量相同,就执行哪个case后面的程序,遇到break,就全结束<br>  关键字: switch case default break<br>  switch语句中的表达式的数据类型,是有要求的<br>  JDK1.0 - 1.4  数据类型接受 byte short int char<br>  JDK1.5   数据类型接受 byte short int char enum(枚举)<br>  JDK1.7   数据类型接受 byte short int char enum(枚举), String</p></blockquote><h2 id="方法、重载"><a href="#方法、重载" class="headerlink" title="方法、重载"></a>方法、重载</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   方法的定义格式      修饰符 返回值类型 方法的名字 (参数列表...){       方法的功能主体         循环,判断,变量,比较,运算       return ;    }   修饰符:  固定写法  public static   返回值类型:  方法在运算后,结果的数据类型   方法名:  自定义名字,满足标识符规范, 方法名字首字母小写,后面每个单词首字母大写   参数列表: 方法的运算过程中,是否有未知的数据, 如果有未知的数据,定义在参数列表上 (定义变量)   return: 方法的返回, 将计算的结果返回. 结束方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//调用方法, 方法执行起来</span>     <span class="token comment" spellcheck="true">// 在方法main中,调用方法 getArea</span>     <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"面积是: "</span><span class="token operator">+</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*     要求: 计算一个长方形的面积     定义方法解决这个要求     分析方法定义过程:        1. 明确方法计算后的结果的数据类型 int  定义格式对应的就是返回值类型      2. 方法计算过程中,有没有未知的数据, 宽和长, 未知数据的数据类型 int          未知数的变量,定义在方法的小括号内  */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现方法的功能主体</span>    <span class="token comment" spellcheck="true">//int area = w * h;</span>    <span class="token keyword">return</span> w <span class="token operator">*</span> h<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>方法,调用中的参数传递问题<br>     1. 方法参数是基本数据类型</p><ol start="2"><li>方法参数是引用类型<br>传递的是内存地址!</li></ol></blockquote><blockquote><p>方法的重载特性 (overload)<br>  在同一个类中,允许出现同名的方法,只要方法的参数列表不同即可,这样方法就是重载<br>  参数列表不同: 参数的个数,数据类型,顺序<br>  方法重载的注意事项</p><ol><li>参数列表必须不同</li><li>重载和参数变量名无关</li><li>重载和返回值类型无关</li><li>重载和修饰符无关<br>技巧: 重载看方法名和参数列表</li></ol></blockquote><h2 id="实现引用类型、ArrayList"><a href="#实现引用类型、ArrayList" class="headerlink" title="实现引用类型、ArrayList"></a>实现引用类型、ArrayList</h2><p><strong>实现引用类型</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   测试,刚定义好的Phone类   创建引用类型变量的格式     数据类型  变量名 = new 数据类型();  实现引用类型的步骤    1: 导入包 , 类如果都是在同一个文件夹,不需要导入包    2: 创建引用类型的变量    3: 变量.类型中的功能  文件结构：  pack    Phone.java  test.java*/</span><span class="token keyword">package</span> pack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2: 创建引用类型的变量</span>    Phone p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//System.out.println(p);  //输出内存的地址</span>      <span class="token comment" spellcheck="true">//3: 变量.类型中的功能</span>    <span class="token comment" spellcheck="true">//变量 p.的方式,调用类中的属性</span>    <span class="token comment" spellcheck="true">//属性就是变量 , 赋值和获取值</span>    p<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"土豪金"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">"爱立信"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取属性值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>color<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>p<span class="token punctuation">.</span>brand<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>p<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ArrayList</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   ArrayList集合的使用   也是引用数据类型   步骤:     1. 导入包 java.util包中   2. 创建引用类型的变量     数据类型&lt; 集合存储的数据类型>  变量名 = new 数据类型 &lt;集合存储的数据类型>  ();     集合存储的数据类型: 要将数据存储到集合的容器中     创建集合引用变量的时候,必须要指定好,存储的类型是什么     ArrayList&lt;String> array = new ArrayList&lt;String>();   3. 变量名.方法   注意: 集合存储的数据,8个基本类型对应8个引用类型   存储引用类型,不存储基本类型*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建集合容器,指定存储的数据类型</span>    <span class="token comment" spellcheck="true">//存储字符串</span>    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建集合容器,存储整数</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建集合容器,存储手机类型</span>    ArrayList<span class="token operator">&lt;</span>Phone<span class="token operator">></span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Phone<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ArrayList 集合中的方法</strong></p><blockquote><p>  add(参数) 向集合中添加元素,数据存储进去<br>   方法中的参数类型,定义集合对象时候的类型是一致<br>   ArrayList<integer> array = new ArrayList<integer>();<br>   array.add(3);<br>   get(int index) 取出集合中的元素,get方法的参数,写入索引<br>   size() 返回集合的长度, 集合存储元素的个数<br>   add(int 索引,存储的元素) 将元素添加到指定的索引上<br>   set(int 索引,修改后的元素) 将指定索引的元素,进行修改<br>   remove(int 索引) 删除指定索引上的元素<br>   clear() 清空集合中的所有元素</integer></integer></p></blockquote><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  类的方式,描述现实中的事物 小汽车 * *    小汽车  属性和功能 *      属性: 颜色  轮胎个数    变量定义 *      功能: 跑  方法 * *    属性和方法,都属于类的成员 * *    属性, 成员变量 *    方法, 成员方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//定义Car类的属性</span>  <span class="token comment" spellcheck="true">//定义颜色属性</span>  String color <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义轮胎个数</span>  <span class="token keyword">int</span> count <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义跑的功能</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小汽车在跑 ..."</span><span class="token operator">+</span>color<span class="token operator">+</span><span class="token string">"..."</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *   测试,自定义的类Car *   创建出Car类的变量 *   变量,调用属性,成员变量 *   变量,调用方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建出Car类的变量 , 创建出Car类的对象,小汽车真的有了</span>    Car c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对象.调用类中的属性和方法</span>    c<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"无色"</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成员变量和局部变量的区别</strong></p><blockquote><ol><li>定义位置上的区别<br>成员变量,定义在类中,方法外<br>局部变量,方法内,语句内<ol start="2"><li>作用域不同<br>成员变量,作用范围是整个类<br>局部变量,方法内,语句内</li><li>默认值不同<br>成员变量,有自己的默认值<br>局部变量,没有默认值,不赋值不能使用</li><li>内存位置不同<br>成员变量,跟随对象进入堆内存存储<br>局部变量,跟随自己的方法,进入栈内存</li><li>生命周期不同<br>成员变量,跟随对象,在堆中存储,内存等待JVM清理 , 生命相对较长<br>局部变量,跟随方法,方法出栈生命相对较短</li></ol></li></ol></blockquote><p><strong>提高安全问题: 让外面的类,不允许直接调用我的成员变量</strong></p><blockquote><p>新的关键字  private 私有   属于成员修饰符,不能修饰局部变量<br> 被private修饰的成员,只能在自己的本类中被使用<br> 对私有变量,提供公共的访问方式: 方法<br> private int age ;</p></blockquote><p><strong>this关键字:</strong></p><blockquote><ul><li>区分成员变量和局部变量同名情况<ul><li>方法中,方位成员变量,写this.</li></ul></li></ul></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>extends</strong></p><blockquote><p>   关键字 extends<br>     子类是Develop, 父类是Employee<br>     子类自动拥有父类中可以继承的属性和方法<br>     public class Develop extends Employee{<br>      //在子类中,可以定义方法<br>      public void print(){<br>        System.out.println(name);<br>      }<br>    }<br>     子类中,可以直接调用父类的成员</p></blockquote><p><strong>super</strong></p><blockquote><p>在子类中,调用父类的成员,关键字 super.调用父类的成员<br>  子类 (派生类)  继承父类  (超类,基类)<br>  this.调用自己本类成员<br>  super.调用的自己的父类成员<br>  public void showNum(){<br>        //父类的中的方法showNum已经可以号码,子类直接用<br>        super.showNum();<br>        System.out.println(“显示姓名”);<br>  }</p></blockquote><p><strong>Override</strong></p><blockquote><p>继承后,子类父类中成员方法的特点<br>       子类的对象,调用方法的时候<br>       子类自己有,使用子类<br>       子类自己没有,调用的是父类<br>    重载: 方法名一样,参数列表不同,同一个类的事情<br>    方法的重写  Override<br>      子类中,出现了和父类一模一样的方法的时候, 子类重写父类的方法, 覆盖</p></blockquote><blockquote><p>子类重写父类的方法,<br> 保证子类方法的权限大于或者等于父类方法权限<br> 四大权限  public &gt; protected   default  private</p></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>Develop.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>demo06<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  定义类开发工程师类 *    EE开发工程师 :  工作 *    Android开发工程师 : 工作 * *    根据共性进行抽取,然后形成一个父类Develop *    定义方法,工作: 怎么工作,具体干什么呀 * *    抽象类,不能实例化对象, 不能new的 *    不能创建对象的原因:  如果真的让你new了, 对象.调用抽象方法,抽象方法没有主体,根本就不能运行 *    子类的方法必须覆盖父类的抽象方法 *    抽象类使用: 定义类继承抽象类,将抽象方法进行重写,创建子类的对象 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Develop</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//定义方法工作方法,但是怎么工作,说不清楚了,讲不明白</span>  <span class="token comment" spellcheck="true">//就不说, 方法没有主体的方法,必须使用关键字abstract修饰</span>  <span class="token comment" spellcheck="true">//抽象的方法,必须存在于抽象的类中,类也必须用abstract修饰</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JavaEE.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>demo06<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  定义类,JavaEE的开发人员 *  继承抽象类Develop,重写抽象的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaEE</span> <span class="token keyword">extends</span> <span class="token class-name">Develop</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//重写父类的抽象方法</span>  <span class="token comment" spellcheck="true">//去掉abstract修饰符,加上方法主体</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JavaEE工程师在开发B/S 软件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  测试抽象类 *    创建他的子类的对象,使用子类的对象调用方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     JavaEE ee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaEE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ee<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *   抽象类,可以没有抽象方法,可以定义带有方法体的方法 *   让子类继承后,可以直接使用 */</span><span class="token keyword">public</span>  <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// private abstract void show();</span>     <span class="token comment" spellcheck="true">//抽象方法,需要子类重写, 如果父类方法是私有的,子类继承不了,也就没有了重写</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>MyInterface.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 定义接口 *   使用关键字interface  接口名字 * 接口定义: *    成员方法,全抽象 *    不能定义带有方法体的方法 * * 定义抽象方法: 固定格式 * *   public abstract 返回值类型  方法名字(参数列表); *   修饰符 public  写,或者不写,都是public * *  接口中成员变量的定义 *    成员变量的定义,具体要求 * *    要求 : 必须定义为常量 *    固定格式: *      public static final 数据类型 变量名 = 值 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//public static final int a = 1;</span>  <span class="token comment" spellcheck="true">//在接口中,定义抽象的方法</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MyInterfaceImpl.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *   定义类, 实现接口,重写接口中的抽象方法 *   创建实现类的对象 * *   类实现接口, 可以理解为继承 * *   关键字  implements *   class 类 implements 接口{ *     重写接口中的抽象方法 *   } *   类实现接口 *   class MyInterfaceImpl implements MyInterface */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterfaceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyInterface</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现类,重写接口抽象方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建接口的实现类的对象</span>    MyInterfaceImpl my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInterfaceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    my<span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口中成员的特点</strong></p><blockquote><ol><li>成员变量的特点, 没有变量,都是常量<br>  固定定义格式: public static final 数据类型 变量名 = 值<br>  public  权限<br>  static  可以被类名直接.调用<br>  final   最终,固定住变量的值<br> 注意: public static final 修饰符,在接口的定义中,可以省略不写<br>  但是,不写不等于没有<br>  三个修饰符,还可以选择性书写<ol start="2"><li>接口中的成员方法特点:<br>public abstract 返回值类型 方法名(参数列表)<br>修饰符  public abstract 可以不写,选择性书写<br>但是,写不写,都有</li><li>实现类,实现接口,重写接口全部抽象方法,创建实现类对象<br>实现类,重写了一部分抽象方法,实现类,还是一个抽象类</li></ol></li></ol></blockquote><blockquote><p>重写接口中的抽象方法, public权限是必须的</p></blockquote><p><strong>可实现多个接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *   类C,同时去实现2个接口,接口A,B *   作为实现类,C,全部重写两个接口的所有抽象方法,才能建立C类的对象 * *   C类,在继承一个类的同时,可以实现多个接口 *   public interface A { *     public abstract void a(); *   } *   public interface B { *      public abstract  void b(); *   } *   public abstract class D { *      public abstract void d(); *   } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span>B<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口多继承</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>demo04<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *   实现接口C,重写C接口的全部抽象方法 *   而且接口C,继承A,B *   D实现类,重写A,B,C三接口全部抽象方法 * *   问: Java中有多继承吗 *    类没有多继承 *    接口之间多继承 *    public interface A { *      public abstract void a(); *    } *    public interface B { *      public abstract void b(); *    } *    public interface C extends A,B{ *      public abstract void c(); *    } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 多态调用方法,方法必须运行子类的重写!!</span><span class="token comment" spellcheck="true">//Java中,对象的多态性,调用程序中的方法</span><span class="token comment" spellcheck="true">// 公式:  父类类型或者是接口类型   变量  = new 子类的对象();</span>Fu  f  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象类Animal,子类是Cat</span>Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口Smoking,实现类Student</span>Smoking sk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sk<span class="token punctuation">.</span><span class="token function">smoking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态中,成员特点</strong></p><blockquote><p>  成员变量:<br>      编译的时候, 参考父类中有没有这个变量,如果有,编译成功,没有编译失败<br>      运行的时候, 运行的是父类中的变量值<br>     编译运行全看父类<br>    成员方法:<br>      编译的时候, 参考父类中有没有这个方法,如果有,编译成功,没有编译失败<br>      运行的时候, 运行的是子类的重写方法<br>     编译看父类,运行看子类</p></blockquote><p><strong>关键字instanceof</strong></p><blockquote><p>运算符比较运算符, 结果真假值<br>   关键字, instanceof, 比较引用数据类型<br>   Person p = new Student();<br>   p  = new Teacher()<br>   关键字 instanceof 比较, 一个引用类型的变量,是不是这个类型的对象<br>   p变量,是Student类型对象,还是Teacher类型对象<br>     引用变量 instanceof 类名<br>     p instanceof Student  比较,p是不是Student类型的对象,如果是,intanceof返回true</p></blockquote><hr><blockquote><p>  //两个子类,使用两次多态调用<br>    Animal a1 = new Cat();<br>    Animal a2 = new Dog();<br>    //a1,a2调用子类父类共有方法,运行走子类的重写<br>    a1.eat();<br>    a2.eat();<br>    //类型向下转型,强制转换,调用子类的特有<br>    //防止发生异常: a1属于Cat对象,转成Cat类,  a2属于Dog对象,转成Dog<br>    //instanceof判断<br>    if(a1 instanceof Cat){<br>      Cat c = (Cat)a1;<br>      c.catchMouse();<br>    }<br>    if(a2 instanceof Dog){<br>      Dog d = (Dog)a2;<br>      d.lookHome();<br>    }</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>Person.java</strong></p><pre class="line-numbers language-Java"><code class="language-Java">/* *  自定义的Person类.成员变量,name age *  要求在 new Person的同时,就指定好name,age的值 *  实现功能,利用方法去实现, 构造方法,构造器 Constructor *  作用: 在new 的同时对成员变量赋值, 给对象的属性初始化赋值  new Person 对属性 name,age赋值 * *  构造方法的定义格式 *    权限  方法名(参数列表){ *    } *    方法的名字,必须和类的名字完全一致 *    构造方法不允许写返回值类型  , void 也不能写 * *    构造方法在什么时候,运行呢, 在new 的时候,自动执行 *    只运行一次,仅此而已 * *    每个class必须拥有构造方法,构造方法不写也有 *    编译的时候,javac, 会自动检查类中是否有构造方法 *    如果有,就这样的 *    如果没有,编译器就会自动添加一个构造方法 *      编译器自动添加的构造方法: public Person(){} *    自己手写了构造方法,编译的时候,不会自动添加构造方法! */public class Person {  private String name;  private int age;  //定义出Person类的构造方法  public  Person(String name,int age){    this.name = name;    this.age = age;    //System.out.println("我是一个空参数构造方法");  }  public String getName() {    return name;  }  public void setName(String name) {    this.name = name;  }  public int getAge() {    return age;  }  public void setAge(int age) {    this.age = age;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  new 对象的时候,就是在调用对象的构造方法 *   new Person(); 调用的是类中的空参数构造方法 *   new Person("张三",20); 调用类中的有参数构造方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对象p 调用方法getName,getAge</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>this可以在构造方法之间进行调用<br>this.的方式,区分局部变量和成员变量同名情况<br>this在构造方法之间的调用,语法 this()</p><pre><code> public Person(){    //调用了有参数的构造方法    //参数李四,20传递给了变量name,age    this("李四",20);  }</code></pre><p>构造方法,传递String,int<br>在创建对象的同时为成员变量赋值</p><pre><code>public Person(String name,int age){  this.name = name;  this.age = age;}</code></pre></blockquote><blockquote><p>子类中,super()的方式,调用父类的构造方法<br>super()调用的是父类的空参数构造<br>super(参数) 调用的是父类的有参数构造方法<br>子类的构造方法, 有一个默认添加的构造方法<br>注意: 子类构造方法的第一行,有一个隐式代码 super()</p><pre><code>public Student(){    super();}</code></pre><p>子类的构造方法第一行super语句,调用父类的构造方法</p><pre><code>public class Student extends Person{  public Student(){    super();  }}</code></pre></blockquote><blockquote><p>构造方法第一行,写this()还是super()<br>不能同时存在,任选其一,保证子类的所有构造方法调用到父类的构造方法即可<br>小结论: 无论如何,子类的所有构造方法,直接,间接必须调用到父类构造方法<br>子类的构造方法,什么都不写,默认的构造方法第一行 super();</p><pre><code>public class Student extends Person{  public Student(){    //调用的是自己的构造方法    //间接形式调用到了父类的构造方法    this("abc");  }}</code></pre></blockquote><h2 id="final、static"><a href="#final、static" class="headerlink" title="final、static"></a>final、static</h2><p><strong>最终类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  在类的定义上,加上修饰符,final *  类: 最终类, 不能有子类,不可以被继承 *  但是使用方式,没有变化,创建对象,调用方法 * */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>final方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  定义父类 *  一部分方法,写成final修饰 *  子类可以继承的,但是不能做重写 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fu类的最终方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fu类的一般方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>static</strong></p><p><strong>Person.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *   定义Person类, *   定义对象的特有数据,和对象的共享数据 *   对象的特有数据(非静态修饰) 调用者只能是 new 对象 *   对象的共享数据(静态修饰)  调用者可以是new 对象,可以是类名 * *   被静态修饰的成员,可以被类名字直接调用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> String className<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对象调用类的静态成员变量</span>    p1<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"基础班"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    Person<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用静态方法</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>静态的注意事项<br>  在静态中不能调用非静态为什么呢? 为什么静态不能调用非静态<br>  生命周期静态优先于非静态存在于内存中<br>  静态 前人 先人   非静态 后人<br>  静态不能写this,不能写super</p></blockquote><blockquote><p>问题:  static 修饰到底什么时候使用,应用场景<br>    static 修饰成员变量,成员方法<br>    成员变量加static, 根据具体事物,具体分析问题<br>    定义事物的时候,多个事物之间是否有共性的数据!!<br>    请你将共性的数据定义为静态的成员变量</p></blockquote><blockquote><p>成员方法加static, 跟着变量走<br>  如果方法,没有调用过非静态成员,将方法定义为静态</p></blockquote><p><strong>多态静态</strong><br><strong>Fu.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类静态方法show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Zi.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的静态方法show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *    多态调用中,编译看谁,运行看谁 *    编译都看 = 左边的父类, 父类有编译成功,父类没有编译失败 *    运行,静态方法, 运行父类中的静态方法 *    运行,非静态方法,运行子类的重写方法 *    成员变量,编译运行全是父类 * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159265358979323846</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Fu f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    System.out.println(f.i);</span>    <span class="token comment" spellcheck="true">//调用还是父类的静态方法,原因: 静态属于类,不属于对象</span>    <span class="token comment" spellcheck="true">//对象的多态性,静态和对象无关,父类的引用.静态方法</span>    f<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>匿名对象</strong><br><strong>Person</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人在吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  有名字对象,引用类型变量,可以反复使用 *  匿名对象,没有引用变量,只能使用一次 * *  匿名对象可以当作参数传递 *  匿名对象可以当作方法的返回值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p1 <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//方法返回值是Person类型</span>  <span class="token comment" spellcheck="true">//方法return语句,返回的是这个类的对象</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Person <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Person p = new Person();</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//调用方法method,传递Person类型对象</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p><strong>Outer.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *   内部类的定义 *     将内部类,定义在了外部的成员位置 *   类名Outer,内部类名Inner * *   成员内部类,可以使用成员修饰符,public static .... *   也是个类,可以继承,可以实现接口 * *   调用规则: 内部类,可以使用外部类成员,包括私有 *   外部类要使用内部类的成员,必须建立内部类对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//外部类成员位置,定义内部类</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类方法inner "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test.java</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     *  调用外部类中的内部类的方法inner()     *  依靠外部类对象,找到内部类,通过内部类对象,调用内部类的方法     *  格式:     *    外部类名.内部类名  变量 = new 外部类对象().new 内部类对象();     *    变量.内部类方法()     */</span>    Outer<span class="token punctuation">.</span>Inner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文档、jar包"><a href="#文档、jar包" class="headerlink" title="文档、jar包"></a><a href="/2019/11/03/java-doc/"><strong>文档、jar包</strong></a></h2><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a><a href="/2019/11/04/java-list/"><strong>集合框架</strong></a></h2><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><blockquote><p>Throwable<br> Exception 异常   感冒,阑尾炎<br>   将异常处理掉,可以继续执行<br>   RuntimeException<br> Error 非典,艾滋,癌<br>   必须修改程序</p></blockquote><p><img src="%E5%BC%82%E5%B8%B8%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%E5%92%8C%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.JPG" alt="异常对象产生和处理过程的执行流程"></p><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  异常中的关键字 *    throw,在方法内部,抛出异常的对象 *    throw 后面,必须写new 对象,必须是异常的对象,必须是Exception或者子类 * *  方法中声明异常关键字 *    throws 用于在方法的声明上,标明次方法,可能出现异常 *    请调用者处理 *    throws 后面必须写异常类的类名 * *    调用了一个抛出异常的方法,调用者就必须处理 *    不处理,编译失败 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//对数组的最后索引*2,返回</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对方法参数进行合法性的判断,进行判断是不是null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> arr <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//抛出异常的形式,告诉调用者</span>      <span class="token comment" spellcheck="true">//关键字 throw</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"传递数组不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对数组进行判断,判断数组中,是不是有元素</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//抛出异常的形式,告诉调用者,数组没有元素</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"数组中没任何元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  异常的处理方式: *    try...catch...finally *    格式: *      try{ *        被检测的代码 *        可能出现异常的代码 *      }catch(异常类名 变量){ *         异常的处理方式 *         循环,判断,调用方法,变量 *      }finally{ *         必须要执行代码 *      } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>NullPointerException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token operator">+</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ArrayIndexOutOfBoundsException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!!!!!!"</span><span class="token operator">+</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"必须执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//释放资源</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Game Over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * 定义方法,抛出异常   * 调用者使用try catch   */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token keyword">throws</span> NullPointerException<span class="token punctuation">,</span>ArrayIndexOutOfBoundsException<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//对数组判空</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> arr <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//手动抛出异常,抛出空指针异常</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"数组不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//对数组的索引进行判断</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//手动抛出异常,抛出数组的索引越界异常</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组没有3索引"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="try...catch%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.JPG" alt="try...catch异常处理"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  多catch写在一起 *  细节: *    catch小括号中,写的是异常类的类名 *    有没有顺序的概念,有 * *    平级异常: 抛出的异常类之间,没有继承关系,没有顺序 *      NullPointerException extends RuntimeException *      NoSuchElementException extends RuntimeException *      ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException extends RuntimeException * *    上下级关系的异常 *      NullPointerException extends RuntimeException extends Exception *      越高级的父类,写在下面 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最好用try…catch,少用throws</strong></p><h3 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  异常分为编译异常和运行时期异常 *    编译异常: 调用了抛出异常的方法,不处理编译失败  (try  throws) *    运行异常: 抛出的异常是RuntimeException类,或者是他的子类 * *  运行异常的特点: *     方法内部抛出的异常是运行异常, new XXXException *     方法的声明上,不需要throws语句,调用者,不需要处理 *     设计原因: *        运行异常,不能发生,但是如果发生了,程序人员停止程序修改源代码 * *        运行异常: 一旦发生,不要处理,请你修改源代码, 运行异常一旦发生,后面的代码没有执行的意义 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeExceptionDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   *  定义方法,计算圆形的面积   *  传递参数0,或者负数,计算的时候没有问题   *  但是,违反了真实情况   *  参数小于=0, 停止程序,不要在计算了   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"圆形不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token operator">*</span>r<span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对数组的5索引进行判断,如果5索引大于100,请将5索引上的数据/2,否则除以3</span>    <span class="token comment" spellcheck="true">//索引根本就没有</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Throwable类中的方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  三个方法,都和异常的信息有关系 *    String getMessage() 对异常信息的详细描述       异常了! *    String toString()   对异常信息的简短描述       java.lang.Exception: 异常了! *    void printStackTrace() 将异常信息追踪到标准的错误流  异常信息最全,JVM默认调用方法也是这个方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionDemo1</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//System.out.println(ex.toString());</span>      ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"异常了!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  自定义异常 *    继承Exception,或者继承RuntimeException *    构造方法中,super将异常信息,传递给父类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FuShuException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">FuShuException</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">FuShuException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token function">getAvg</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * 传递成绩,计算成绩的平均数   * 成绩没有负数,需要抛出异常,停止运算   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getAvg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FuShuException</span><span class="token punctuation">(</span><span class="token string">"成绩错误 "</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      sum <span class="token operator">=</span> sum <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token operator">/</span>source<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  继承后,在子类重写父类方法的时候,异常处理 *  结论: *    父类的方法,如果抛出异常,子类重写后 *      可以不抛出异常 *      也可以抛出异常,但是,如果子类要抛,抛出的异常不能大于父类的异常 *        大于,都指的是继承关系 * *    父类的方法,没有异常抛出,子类重写后 *       也不能抛出异常 *       如果子类中调用了抛出异常的方法,别无选择,只能try..catch处理 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IO、文件操作"><a href="#IO、文件操作" class="headerlink" title="IO、文件操作"></a><a href="/2019/11/06/java-io/"><strong>IO、文件操作</strong></a></h2><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  定义子类,继承Thread *  重写方法run */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubThread</span>  <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run..."</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment" spellcheck="true">/* * 创建和启动一个线程 *   创建Thread子类对象 *   子类对象调用方法start() *      让线程程序执行,JVM调用线程中的run */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SubThread st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SubThread st1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main..."</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  实现接口方式的线程 *    创建Thread类对象,构造方法中,传递Runnable接口实现类 *    调用Thread类方法start() */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SubRunnable sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main..."</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment" spellcheck="true">/* *  实现线程成功的另一个方式,接口实现 *  实现接口Runnable,重写run方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run..."</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  使用匿名内部类,实现多线程程序 *  前提: 继承或者接口实现 *  new 父类或者接口(){ *     重写抽象方法 *  } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//继承方式  XXX extends Thread{ public void run(){}}</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现接口方式  XXX implements Runnable{ public void run(){}}</span>    Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"###"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@@@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pandas练习题</title>
      <link href="/2019/10/25/pandas-test-1/"/>
      <url>/2019/10/25/pandas-test-1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Rango-2017/Pandas_exercises" target="_blank" rel="noopener">数据集下载</a></p><p><img src="1.jpg" alt=""></p><h3 id="练习1-开始了解你的数据-探索Chipotle快餐数据"><a href="#练习1-开始了解你的数据-探索Chipotle快餐数据" class="headerlink" title="练习1-开始了解你的数据,探索Chipotle快餐数据"></a>练习1-开始了解你的数据,探索Chipotle快餐数据</h3><h4 id="1-将数据集存入一个名为chipo的数据框内"><a href="#1-将数据集存入一个名为chipo的数据框内" class="headerlink" title="1)将数据集存入一个名为chipo的数据框内"></a>1)将数据集存入一个名为chipo的数据框内</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true">#sep="\t" 表示以tab（制表符）为分隔符</span>chipo <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Pandas_exercises-master/chipotle.tsv'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-查看前10行内容-head"><a href="#2-查看前10行内容-head" class="headerlink" title="2)查看前10行内容(head())"></a>2)查看前10行内容(head())</h4><pre class="line-numbers language-python"><code class="language-python">chipo<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-数据集中有多少个列columns？-shape"><a href="#3-数据集中有多少个列columns？-shape" class="headerlink" title="3)数据集中有多少个列columns？(shape[])"></a>3)数据集中有多少个列columns？(shape[])</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#.shape[1]返回列数,.shape[0]返回行数</span><span class="token comment" spellcheck="true">#len(df) out:[* rows x * columns]</span>chipo<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-打印出全部的列名称-colums"><a href="#4-打印出全部的列名称-colums" class="headerlink" title="4)打印出全部的列名称(colums)"></a>4)打印出全部的列名称(colums)</h4><pre class="line-numbers language-python"><code class="language-python">chipo<span class="token punctuation">.</span>columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-数据集的索引是怎样的？-index"><a href="#5-数据集的索引是怎样的？-index" class="headerlink" title="5)数据集的索引是怎样的？(index)"></a>5)数据集的索引是怎样的？(index)</h4><pre class="line-numbers language-python"><code class="language-python">chipo<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-被下单数最多商品item是什么-sum-amp-value-counts"><a href="#6-被下单数最多商品item是什么-sum-amp-value-counts" class="headerlink" title="6)!!!被下单数最多商品item是什么?(sum&amp;value_counts)"></a>6)!!!被下单数最多商品item是什么?(sum&amp;value_counts)</h4><p>这两种方法结果为啥不同呢?<a href="https://stackoverflow.com/questions/55249661/value-counts-vs-groupbyxxx-sum" target="_blank" rel="noopener">解答</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#不准确item=chipo[['item_name','quantity']].groupby(by=['item_name']).sum().sort_values(by=['quantity'],ascending=False).head(1)</span><span class="token triple-quoted-string string">'''value_counts() is, count values without looking at what the value actually is. So 1 and 100 on that column will be treated as the same -- you have one count.sum(), however, sum up the columns. So if you have two rows, one is 1 and another is 100, your sum is 101 while the count is 2.'''</span>chipo<span class="token punctuation">[</span><span class="token string">'item_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#同理 求在choice_description中，下单次数最多的商品是什么？</span>chipo<span class="token punctuation">[</span><span class="token string">'choice_description'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-在item-name这一列中，一共有多少种商品被下单？-unique"><a href="#7-在item-name这一列中，一共有多少种商品被下单？-unique" class="headerlink" title="7)!!!在item_name这一列中，一共有多少种商品被下单？(unique())"></a>7)!!!在item_name这一列中，一共有多少种商品被下单？(unique())</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1 unique()统计list、series中的不同值都是啥,返回的是list.</span><span class="token comment" spellcheck="true">#2 nunique()可直接统计dataframe中每列的不同值的个数,也可用于series,但不能用于list.返回的是不同值的个数.</span>chipo<span class="token punctuation">.</span>item_name<span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#同理 在该数据集对应的时期内，一共有多少订单？</span>chipo<span class="token punctuation">[</span><span class="token string">'order_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-一共有多少商品被下单？-求总和"><a href="#8-一共有多少商品被下单？-求总和" class="headerlink" title="8)一共有多少商品被下单？(求总和)"></a>8)一共有多少商品被下单？(求总和)</h4><pre class="line-numbers language-python"><code class="language-python">chipo<span class="token punctuation">[</span><span class="token string">'quantity'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-将item-price转换为浮点数-apply-function"><a href="#9-将item-price转换为浮点数-apply-function" class="headerlink" title="9)将item_price转换为浮点数(.apply(function))"></a>9)将item_price转换为浮点数(.apply(function))</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#x[1:] 相当于取$后面的数字 $11.0->11.0</span>chipo<span class="token punctuation">[</span><span class="token string">'item_price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> chipo<span class="token punctuation">[</span><span class="token string">'item_price'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> float<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="10-在该数据集对应的时期内，收入revenue是多少？"><a href="#10-在该数据集对应的时期内，收入revenue是多少？" class="headerlink" title="10)在该数据集对应的时期内，收入revenue是多少？"></a>10)在该数据集对应的时期内，收入revenue是多少？</h4><pre class="line-numbers language-python"><code class="language-python">chipo<span class="token punctuation">[</span><span class="token string">'quantity'</span><span class="token punctuation">]</span> <span class="token operator">*</span> chipo<span class="token punctuation">[</span><span class="token string">'item_price'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-每一单order对应的平均总价是多少？-mean"><a href="#11-每一单order对应的平均总价是多少？-mean" class="headerlink" title="11)每一单order对应的平均总价是多少？(.mean())"></a>11)每一单order对应的平均总价是多少？(.mean())</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#df.mean()求平均值</span>chipo<span class="token punctuation">[</span><span class="token string">'item_price_sum'</span><span class="token punctuation">]</span> <span class="token operator">=</span> chipo<span class="token punctuation">[</span><span class="token string">'quantity'</span><span class="token punctuation">]</span> <span class="token operator">*</span> chipo<span class="token punctuation">[</span><span class="token string">'item_price'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#不会有6)的问题 因为求和是准确的</span>chipo<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'order_id'</span><span class="token punctuation">,</span><span class="token string">'item_price_sum'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'order_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习2-数据过滤与排序-探索2012欧洲杯数据"><a href="#练习2-数据过滤与排序-探索2012欧洲杯数据" class="headerlink" title="练习2-数据过滤与排序,探索2012欧洲杯数据"></a>练习2-数据过滤与排序,探索2012欧洲杯数据</h3><h4 id="1-将数据集命名为euro12"><a href="#1-将数据集命名为euro12" class="headerlink" title="1)将数据集命名为euro12"></a>1)将数据集命名为euro12</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#已经是表不用设置sep</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdeuro12 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Pandas_exercises-master/Euro2012.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-将数据集中的列Team-Yellow-Cards和Red-Cards单独存为一个名叫discipline的数据框-df"><a href="#2-将数据集中的列Team-Yellow-Cards和Red-Cards单独存为一个名叫discipline的数据框-df" class="headerlink" title="2)将数据集中的列Team, Yellow Cards和Red Cards单独存为一个名叫discipline的数据框(df[[]])"></a>2)将数据集中的列Team, Yellow Cards和Red Cards单独存为一个名叫discipline的数据框(df[[]])</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#df['*']是不包含列索引的series,df[['*']]是包含列索引的dataframe.</span><span class="token comment" spellcheck="true">#所以单中括号只可以写一个列</span>discipline <span class="token operator">=</span> euro12<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Yellow Cards'</span><span class="token punctuation">,</span><span class="token string">'Red Cards'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-对数据框discipline按照先Red-Cards再Yellow-Cards进行排序-sort-values"><a href="#3-对数据框discipline按照先Red-Cards再Yellow-Cards进行排序-sort-values" class="headerlink" title="3)对数据框discipline按照先Red Cards再Yellow Cards进行排序(.sort_values())"></a>3)对数据框discipline按照先Red Cards再Yellow Cards进行排序(.sort_values())</h4><pre class="line-numbers language-python"><code class="language-python">discipline<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Red Cards'</span><span class="token punctuation">,</span><span class="token string">'Yellow Cards'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-找到进球数Goals超过6的球队数据"><a href="#4-找到进球数Goals超过6的球队数据" class="headerlink" title="4)找到进球数Goals超过6的球队数据"></a>4)找到进球数Goals超过6的球队数据</h4><pre class="line-numbers language-python"><code class="language-python">euro12<span class="token punctuation">[</span>euro12<span class="token punctuation">.</span>Goals<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-选取以字母G开头的球队数据"><a href="#5-选取以字母G开头的球队数据" class="headerlink" title="5)选取以字母G开头的球队数据"></a>5)选取以字母G开头的球队数据</h4><pre class="line-numbers language-python"><code class="language-python">euro12<span class="token punctuation">[</span>euro12<span class="token punctuation">.</span>Team<span class="token punctuation">.</span>str<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'G'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-用loc-iloc-ix索引数据"><a href="#6-用loc-iloc-ix索引数据" class="headerlink" title="6)用loc,iloc,ix索引数据"></a>6)用loc,iloc,ix索引数据</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#loc：通过行标签索引数据</span><span class="token comment" spellcheck="true">#iloc：通过行号索引行数据</span><span class="token comment" spellcheck="true">#ix：通过行标签或行号索引数据（基于loc和iloc的混合）用ix就得了</span><span class="token comment" spellcheck="true">#选取前7列</span>euro12<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#选取除了最后3列之外的全部列</span>euro12<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#找到英格兰(England)、意大利(Italy)和俄罗斯(Russia)的射正率(Shooting Accuracy)</span>euro12<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>euro12<span class="token punctuation">[</span><span class="token string">'Team'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'England'</span><span class="token punctuation">,</span><span class="token string">'Italy'</span><span class="token punctuation">,</span><span class="token string">'Russia'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'Team'</span><span class="token punctuation">,</span><span class="token string">'Shooting Accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习3-数据分组-探索酒类消费数据"><a href="#练习3-数据分组-探索酒类消费数据" class="headerlink" title="练习3-数据分组,探索酒类消费数据"></a>练习3-数据分组,探索酒类消费数据</h3><h4 id="1-将数据框命名为drinks"><a href="#1-将数据框命名为drinks" class="headerlink" title="1)将数据框命名为drinks"></a>1)将数据框命名为drinks</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddrinks <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Pandas_exercises-master/drinks.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-哪个大陆continent平均消耗的啤酒beer更多？"><a href="#2-哪个大陆continent平均消耗的啤酒beer更多？" class="headerlink" title="2)哪个大陆continent平均消耗的啤酒beer更多？"></a>2)哪个大陆continent平均消耗的啤酒beer更多？</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#选列,分组,求平均,排序</span>drinks<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">,</span><span class="token string">'beer_servings'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'continent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'beer_servings'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#更好的写法</span>drinks<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>beer_servings<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-打印出每个大陆continent的红酒消耗wine-servings的描述性统计值-describe"><a href="#3-打印出每个大陆continent的红酒消耗wine-servings的描述性统计值-describe" class="headerlink" title="3)打印出每个大陆continent的红酒消耗wine_servings的描述性统计值(.describe())"></a>3)打印出每个大陆continent的红酒消耗wine_servings的描述性统计值(.describe())</h4><pre class="line-numbers language-python"><code class="language-python">drinks<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">,</span><span class="token string">'wine_servings'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'continent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-打印出每个大陆每种酒类别的消耗平均值-查一个统计值agg"><a href="#4-打印出每个大陆每种酒类别的消耗平均值-查一个统计值agg" class="headerlink" title="4)打印出每个大陆每种酒类别的消耗平均值(查一个统计值agg)"></a>4)打印出每个大陆每种酒类别的消耗平均值(查一个统计值agg)</h4><pre class="line-numbers language-python"><code class="language-python">drinks<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印出每个大陆每种酒类别的消耗中位数</span>drinks<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印出每个大陆对spirit饮品消耗的平均值，最大值和最小值</span>drinks<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'continent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spirit_servings<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习4-Apply函数-探索1960-2014-美国犯罪数据"><a href="#练习4-Apply函数-探索1960-2014-美国犯罪数据" class="headerlink" title="练习4-Apply函数,探索1960 - 2014 美国犯罪数据"></a>练习4-Apply函数,探索1960 - 2014 美国犯罪数据</h3><h4 id="1-将数据框命名为crime"><a href="#1-将数据框命名为crime" class="headerlink" title="1)将数据框命名为crime"></a>1)将数据框命名为crime</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdcrime <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Pandas_exercises-master/US_Crime_Rates_1960_2014.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-每一列column的数据类型是什么样的？-info"><a href="#2-每一列column的数据类型是什么样的？-info" class="headerlink" title="2)每一列column的数据类型是什么样的？(info())"></a>2)每一列column的数据类型是什么样的？(info())</h4><pre class="line-numbers language-python"><code class="language-python">crime<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-将Year的数据类型转换为datetime64-to-datetime-crime-Year-format-’-Y’"><a href="#3-将Year的数据类型转换为datetime64-to-datetime-crime-Year-format-’-Y’" class="headerlink" title="3)将Year的数据类型转换为datetime64(.to_datetime(crime.Year, format=’%Y’))"></a>3)将Year的数据类型转换为datetime64(.to_datetime(crime.Year, format=’%Y’))</h4><pre class="line-numbers language-python"><code class="language-python">crime<span class="token punctuation">.</span>Year<span class="token operator">=</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>crime<span class="token punctuation">.</span>Year<span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'%Y'</span><span class="token punctuation">)</span>crime<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-将列Year设置为数据框的索引-set-index-‘Year’-drop-True"><a href="#4-将列Year设置为数据框的索引-set-index-‘Year’-drop-True" class="headerlink" title="4)将列Year设置为数据框的索引(.set_index(‘Year’,drop = True))"></a>4)将列Year设置为数据框的索引(.set_index(‘Year’,drop = True))</h4><pre class="line-numbers language-python"><code class="language-python">crime<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'Year'</span><span class="token punctuation">,</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-删除名为Total的列-del"><a href="#5-删除名为Total的列-del" class="headerlink" title="5)删除名为Total的列(del)"></a>5)删除名为Total的列(del)</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">del</span> crime<span class="token punctuation">[</span><span class="token string">'Total'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-按照Year（每十年）对数据框进行分组并求和-resample"><a href="#6-按照Year（每十年）对数据框进行分组并求和-resample" class="headerlink" title="6)按照Year（每十年）对数据框进行分组并求和(resample)"></a>6)按照Year（每十年）对数据框进行分组并求和(resample)</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#重新采样，是对原样本重新处理的一个方法，是一个对常规时间序列数据重新采样和频率转换的便捷的方法</span>crimes <span class="token operator">=</span> crime<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'10AS'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>crimes<span class="token punctuation">[</span><span class="token string">'Population'</span><span class="token punctuation">]</span> <span class="token operator">=</span>crime<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'10AS'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Population <span class="token comment" spellcheck="true">#人口是累计数，不能直接求和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-何时是美国历史上生存最危险的年代？-idxmax"><a href="#7-何时是美国历史上生存最危险的年代？-idxmax" class="headerlink" title="7)何时是美国历史上生存最危险的年代？(.idxmax())"></a>7)何时是美国历史上生存最危险的年代？(.idxmax())</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#找出column最大的索引</span>crime<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="练习5-合并-探索虚拟姓名数据"><a href="#练习5-合并-探索虚拟姓名数据" class="headerlink" title="练习5-合并,探索虚拟姓名数据"></a>练习5-合并,探索虚拟姓名数据</h3><p>– 创建DataFrame<br>– 将上述的DataFrame分别命名为data1, data2, data3<br>– 将data1和data2两个数据框按照行的维度进行合并，命名为all_data<br>– 将data1和data2两个数据框按照列的维度进行合并，命名为all_data_col<br>– 打印data3<br>– 按照subject_id的值对all_data和data3作合并<br>– 对data1和data2按照subject_id作连接<br>– 找到 data1 和 data2 合并之后的所有匹配结果</p><h3 id="练习6-统计-探索风速数据"><a href="#练习6-统计-探索风速数据" class="headerlink" title="练习6-统计,探索风速数据"></a>练习6-统计,探索风速数据</h3><p>– 将数据作存储并且设置前三列为合适的索引<br>– 2061年？我们真的有这一年的数据？创建一个函数并用它去修复这个bug<br>– 将日期设为索引，注意数据类型，应该是datetime64[ns]<br>– 对应每一个location，一共有多少数据值缺失<br>– 对应每一个location，一共有多少完整的数据值<br>– 对于全体数据，计算风速的平均值<br>– 创建一个名为loc_stats的数据框去计算并存储每个location的风速最小值，最大值，平均值和标准差<br>– 创建一个名为day_stats的数据框去计算并存储所有location的风速最小值，最大值，平均值和标准差<br>– 对于每一个location，计算一月份的平均风速<br>– 对于数据记录按照年为频率取样<br>– 对于数据记录按照月为频率取样</p><h3 id="练习7-可视化-探索泰坦尼克灾难数据"><a href="#练习7-可视化-探索泰坦尼克灾难数据" class="headerlink" title="练习7-可视化,探索泰坦尼克灾难数据"></a>练习7-可视化,探索泰坦尼克灾难数据</h3><p>– 将数据框命名为titanic<br>– 将PassengerId设置为索引<br>– 绘制一个展示男女乘客比例的扇形图<br>– 绘制一个展示船票Fare, 与乘客年龄和性别的散点图<br>– 有多少人生还？<br>– 绘制一个展示船票价格的直方图</p><h3 id="练习8-创建数据框-探索Pokemon数据"><a href="#练习8-创建数据框-探索Pokemon数据" class="headerlink" title="练习8-创建数据框,探索Pokemon数据"></a>练习8-创建数据框,探索Pokemon数据</h3><p>– 创建一个数据字典<br>– 将数据字典存为一个名叫pokemon的数据框中<br>– 数据框的列排序是字母顺序，请重新修改为name, type, hp, evolution, pokedex这个顺序<br>– 添加一个列place[‘park’,’street’,’lake’,’forest’]<br>– 查看每个列的数据类型</p><h3 id="练习9-时间序列-探索Apple公司股价数据"><a href="#练习9-时间序列-探索Apple公司股价数据" class="headerlink" title="练习9-时间序列,探索Apple公司股价数据"></a>练习9-时间序列,探索Apple公司股价数据</h3><p>– 读取数据并存为一个名叫apple的数据框<br>– 查看每一列的数据类型<br>– 将Date这个列转换为datetime类型<br>– 将Date设置为索引<br>– 有重复的日期吗？<br>– 将index设置为升序<br>– 找到每个月的最后一个交易日(business day)<br>– 数据集中最早的日期和最晚的日期相差多少天？<br>– 在数据中一共有多少个月？<br>– 按照时间顺序可视化Adj Close值</p><h3 id="练习10-删除数据-探索Iris纸鸢花数据"><a href="#练习10-删除数据-探索Iris纸鸢花数据" class="headerlink" title="练习10-删除数据,探索Iris纸鸢花数据"></a>练习10-删除数据,探索Iris纸鸢花数据</h3><h4 id="1-将数据集存成变量iris"><a href="#1-将数据集存成变量iris" class="headerlink" title="1)将数据集存成变量iris"></a>1)将数据集存成变量iris</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npiris <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Pandas_exercises-master/iris.data'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-创建数据框的列名称-‘sepal-length’-’sepal-width’-‘petal-length’-‘petal-width’-‘class’"><a href="#2-创建数据框的列名称-‘sepal-length’-’sepal-width’-‘petal-length’-‘petal-width’-‘class’" class="headerlink" title="2)创建数据框的列名称[‘sepal_length’,’sepal_width’, ‘petal_length’, ‘petal_width’, ‘class’]"></a>2)创建数据框的列名称[‘sepal_length’,’sepal_width’, ‘petal_length’, ‘petal_width’, ‘class’]</h4><pre class="line-numbers language-python"><code class="language-python">iris<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sepal_length'</span><span class="token punctuation">,</span><span class="token string">'sepal_width'</span><span class="token punctuation">,</span> <span class="token string">'petal_length'</span><span class="token punctuation">,</span> <span class="token string">'petal_width'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-数据框中有缺失值吗？-isnull"><a href="#3-数据框中有缺失值吗？-isnull" class="headerlink" title="3)数据框中有缺失值吗？(isnull())"></a>3)数据框中有缺失值吗？(isnull())</h4><pre class="line-numbers language-python"><code class="language-python">iris<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-将列petal-length的第10到19行设置为缺失值"><a href="#4-将列petal-length的第10到19行设置为缺失值" class="headerlink" title="4)将列petal_length的第10到19行设置为缺失值"></a>4)将列petal_length的第10到19行设置为缺失值</h4><pre class="line-numbers language-python"><code class="language-python">iris<span class="token punctuation">.</span>petal_length<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>nan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-将petal-lengt缺失值全部替换为1-0-fillna"><a href="#5-将petal-lengt缺失值全部替换为1-0-fillna" class="headerlink" title="5)将petal_lengt缺失值全部替换为1.0(.fillna())"></a>5)将petal_lengt缺失值全部替换为1.0(.fillna())</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#inplace=True改变表格</span>iris<span class="token punctuation">.</span>petal_length<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-将数据框前三行设置为缺失值"><a href="#6-将数据框前三行设置为缺失值" class="headerlink" title="6)将数据框前三行设置为缺失值"></a>6)将数据框前三行设置为缺失值</h4><pre class="line-numbers language-python"><code class="language-python">iris<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>nan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-删除有缺失值的行-dropna-how-’any’"><a href="#7-删除有缺失值的行-dropna-how-’any’" class="headerlink" title="7)删除有缺失值的行(.dropna(how=’any’))"></a>7)删除有缺失值的行(.dropna(how=’any’))</h4><pre class="line-numbers language-python"><code class="language-python">iris <span class="token operator">=</span> iris<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-重新设置索引-reset-index"><a href="#8-重新设置索引-reset-index" class="headerlink" title="8)重新设置索引(.reset_index())"></a>8)重新设置索引(.reset_index())</h4><pre class="line-numbers language-python"><code class="language-python">iris <span class="token operator">=</span> iris<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加上drop参数，原有索引就不会成为新的列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium应用(一)</title>
      <link href="/2019/10/21/fateimg/"/>
      <url>/2019/10/21/fateimg/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">def</span> <span class="token function">get_url_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#设置浏览器后台运行</span>  chrome_options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>  chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>  browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>  url<span class="token operator">=</span><span class="token string">'https://fgo.wiki/w/%E8%8B%B1%E7%81%B5%E5%9B%BE%E9%89%B4'</span>  browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#模拟点击标签展开列表</span>  select <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'per-page'</span><span class="token punctuation">)</span>  select<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'option[4]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>  table <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'lancelot_table_servantlist'</span><span class="token punctuation">)</span>  trs <span class="token operator">=</span> table<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'./tbody/tr'</span><span class="token punctuation">)</span>  url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> tr <span class="token keyword">in</span> trs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> tr<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'td[2]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>    url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#关闭进程应用.quit() .close()是关闭浏览器</span>  browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span>  url_listlists <span class="token operator">=</span> get_url_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> list <span class="token keyword">in</span> lists<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas</title>
      <link href="/2019/10/19/panda/"/>
      <url>/2019/10/19/panda/</url>
      
        <content type="html"><![CDATA[<h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="创建一个Series"><a href="#创建一个Series" class="headerlink" title="创建一个Series"></a>创建一个<a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html#dsintro" target="_blank" rel="noopener">Series</a></h4><blockquote><p>Series是一维标量数组能够保存任何数据类型（整数，字符串，浮点数，Python对象等）。轴标签统称为索引。创建系列的基本方法是调用：<br>s = pd.Series(data, index=index)<br>在这里，data可以有很多不同的东西：</p><ul><li>Python字典</li><li>ndarray</li><li>标量值（如5）</li></ul></blockquote><pre><code>In [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])In [4]: sOut[4]:0    1.01    3.02    5.03    NaN4    6.05    8.0dtype: float64</code></pre><h4 id="创建一个DataFrame"><a href="#创建一个DataFrame" class="headerlink" title="创建一个DataFrame"></a>创建一个<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">DataFrame</a></h4><p>通过传递带有日期时间索引和带标签的列的NumPy数组来创建：</p><pre><code>In [5]: dates = pd.date_range('20130101', periods=6)In [6]: datesOut[6]:DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',               '2013-01-05', '2013-01-06'],              dtype='datetime64[ns]', freq='D')In [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))In [8]: dfOut[8]:                   A         B         C         D2013-01-01  0.469112 -0.282863 -1.509059 -1.1356322013-01-02  1.212112 -0.173215  0.119209 -1.0442362013-01-03 -0.861849 -2.104569 -0.494929  1.0718042013-01-04  0.721555 -0.706771 -1.039575  0.2718602013-01-05 -0.424972  0.567020  0.276232 -1.0874012013-01-06 -0.673690  0.113648 -1.478427  0.524988</code></pre><p>通过传递对象的字典来创建，这些对象可以转换为类似序列的对象。</p><pre><code>In [9]: df2 = pd.DataFrame({'A': 1.,   ...:                     'B': pd.Timestamp('20130102'),   ...:                     'C': pd.Series(1, index=list(range(4)), dtype='float32'),   ...:                     'D': np.array([3] * 4, dtype='int32'),   ...:                     'E': pd.Categorical(["test", "train", "test", "train"]),   ...:                     'F': 'foo'})   ...:In [10]: df2Out[10]:     A          B    C  D      E    F0  1.0 2013-01-02  1.0  3   test  foo1  1.0 2013-01-02  1.0  3  train  foo2  1.0 2013-01-02  1.0  3   test  foo3  1.0 2013-01-02  1.0  3  train  foo</code></pre><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span>head<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#查看前i个数据</span><span class="token punctuation">.</span>tail<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#查看后i个数据</span><span class="token punctuation">.</span>index <span class="token comment" spellcheck="true">#查看索引</span><span class="token punctuation">.</span>columns <span class="token comment" spellcheck="true">#查看表头</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转换为numpy数组</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#显示数据的快速统计摘要</span><span class="token punctuation">.</span>T <span class="token comment" spellcheck="true">#转置数据</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#参数axis只有两个值，分别是0和1，而df中只有两个index分别是表最左一列的时间和表最上一行的ABCDEaxis=0对应的是对左边一列的index进行排序，ascending=False代表降序，ascending=True代表升序</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#选出表头为A的那列</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#选出前三行</span>df<span class="token punctuation">[</span><span class="token string">'20130102'</span><span class="token punctuation">:</span><span class="token string">'20130104'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#选出20130102到20130104之间的的行</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#使用标签获取</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'20130102'</span><span class="token punctuation">:</span><span class="token string">'20130104'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#通过行列选区</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#同下</span>df<span class="token punctuation">.</span>at<span class="token punctuation">[</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#快速访问标量</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#通过传递整数的位置进行选择</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#通过切片</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#通过整数位置</span>dfiloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#切片行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#切片列</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#根据坐标获取</span>df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#同上</span>df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>A<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#选出A列大于0的值</span>df<span class="token punctuation">[</span>df<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#选出所有大于0的值</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#选出在某一范围的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h3><pre class="line-numbers language-python"><code class="language-python"> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20130102'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置新列自动按索引排序</span> df<span class="token punctuation">.</span>at<span class="token punctuation">[</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true">#通过标签设置</span>df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true">#通过坐标设置</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#通过numpy数组设置</span>df2<span class="token punctuation">[</span>df2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>df2 <span class="token comment" spellcheck="true">#就内个意思</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理缺失数据"><a href="#处理缺失数据" class="headerlink" title="处理缺失数据"></a>处理缺失数据</h3><pre class="line-numbers language-python"><code class="language-python">df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>index<span class="token operator">=</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#加一列</span>df1<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>dates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#E列前两行设置为1</span>df1<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删掉所有有丢失数据的行</span>df1<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#填充缺失数据</span>pd<span class="token punctuation">.</span>isna<span class="token punctuation">(</span>df1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#值空返回True 不空返回False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#按列求平均值</span>df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#按行求平均值</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span>dates<span class="token punctuation">)</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#shift从指定位置开始对齐</span>df<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>s<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对不同维度的 pandas 对象进行减法操作</span>df<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>cumsum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将函数应用于数据</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#统计每个值出现过几次</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#降序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><pre class="line-numbers language-python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pieces <span class="token operator">=</span> <span class="token punctuation">[</span>df3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df3<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>pieces<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#前三,三到七,七到十合并</span>left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'rval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sql样式合并</span><span class="token comment" spellcheck="true">#append把一个表加到另一个表中</span>df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df3<span class="token punctuation">)</span>s3 <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>df3<span class="token operator">=</span>df3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s3<span class="token punctuation">,</span>ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#需要接收</span><span class="token keyword">print</span><span class="token punctuation">(</span>df3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><blockquote><p>“分组依据”是指涉及以下一个或多个步骤的过程：<br>拆分数据到基于某些标准组<br>将功能独立地应用于每个组<br>将结果合并为数据结构</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                          <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span>                           <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'C'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token string">'D'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#分组，然后将sum()功能应用于结果组。</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#通过多列分组形成一个层次结构索引，我们可以再次应用该sum功能。</span>OUT<span class="token punctuation">:</span>     A      B         C         D<span class="token number">0</span>  foo    one <span class="token operator">-</span><span class="token number">0.536516</span> <span class="token operator">-</span><span class="token number">0.545869</span><span class="token number">1</span>  bar    one  <span class="token number">0.149327</span>  <span class="token number">0.629276</span><span class="token number">2</span>  foo    two  <span class="token number">1.206367</span> <span class="token operator">-</span><span class="token number">2.037879</span><span class="token number">3</span>  bar  three <span class="token operator">-</span><span class="token number">1.169908</span> <span class="token operator">-</span><span class="token number">1.041128</span><span class="token number">4</span>  foo    two  <span class="token number">1.040343</span>  <span class="token number">0.083255</span><span class="token number">5</span>  bar    two  <span class="token number">0.498475</span> <span class="token operator">-</span><span class="token number">1.011725</span><span class="token number">6</span>  foo    one <span class="token operator">-</span><span class="token number">1.368482</span> <span class="token operator">-</span><span class="token number">0.503150</span><span class="token number">7</span>  foo  three  <span class="token number">1.088012</span>  <span class="token number">1.208393</span>            C         DAbar <span class="token operator">-</span><span class="token number">0.522105</span> <span class="token operator">-</span><span class="token number">1.423577</span>foo  <span class="token number">1.429723</span> <span class="token operator">-</span><span class="token number">1.795251</span>                  C         DA   Bbar one    <span class="token number">0.149327</span>  <span class="token number">0.629276</span>    three <span class="token operator">-</span><span class="token number">1.169908</span> <span class="token operator">-</span><span class="token number">1.041128</span>    two    <span class="token number">0.498475</span> <span class="token operator">-</span><span class="token number">1.011725</span>foo one   <span class="token operator">-</span><span class="token number">1.904999</span> <span class="token operator">-</span><span class="token number">1.049019</span>    three  <span class="token number">1.088012</span>  <span class="token number">1.208393</span>    two    <span class="token number">2.246710</span> <span class="token operator">-</span><span class="token number">1.954625</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#stack</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdtuples <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span>                     <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'qux'</span><span class="token punctuation">,</span> <span class="token string">'qux'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span>                     <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>index <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_tuples<span class="token punctuation">(</span>tuples<span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'second'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>index<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span>stacked<span class="token operator">=</span>df2<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stacked<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stacked<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stacked<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stacked<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUT<span class="token punctuation">:</span>                     A         Bfirst secondbar   one     <span class="token number">0.704871</span>  <span class="token number">0.657547</span>      two    <span class="token operator">-</span><span class="token number">0.029277</span> <span class="token operator">-</span><span class="token number">0.890557</span>baz   one    <span class="token operator">-</span><span class="token number">0.211965</span>  <span class="token number">1.745703</span>      two    <span class="token operator">-</span><span class="token number">1.930054</span> <span class="token operator">-</span><span class="token number">0.925681</span>foo   one    <span class="token operator">-</span><span class="token number">2.387723</span>  <span class="token number">1.097615</span>      two    <span class="token operator">-</span><span class="token number">1.963898</span> <span class="token operator">-</span><span class="token number">0.425163</span>qux   one     <span class="token number">0.952847</span>  <span class="token number">0.873658</span>      two    <span class="token operator">-</span><span class="token number">0.810983</span>  <span class="token number">1.119091</span>                     A         Bfirst secondbar   one     <span class="token number">0.704871</span>  <span class="token number">0.657547</span>      two    <span class="token operator">-</span><span class="token number">0.029277</span> <span class="token operator">-</span><span class="token number">0.890557</span>baz   one    <span class="token operator">-</span><span class="token number">0.211965</span>  <span class="token number">1.745703</span>      two    <span class="token operator">-</span><span class="token number">1.930054</span> <span class="token operator">-</span><span class="token number">0.925681</span>first  secondbar    one     A    <span class="token number">0.704871</span>               B    <span class="token number">0.657547</span>       two     A   <span class="token operator">-</span><span class="token number">0.029277</span>               B   <span class="token operator">-</span><span class="token number">0.890557</span>baz    one     A   <span class="token operator">-</span><span class="token number">0.211965</span>               B    <span class="token number">1.745703</span>       two     A   <span class="token operator">-</span><span class="token number">1.930054</span>               B   <span class="token operator">-</span><span class="token number">0.925681</span>dtype<span class="token punctuation">:</span> float64                     A         Bfirst secondbar   one     <span class="token number">0.704871</span>  <span class="token number">0.657547</span>      two    <span class="token operator">-</span><span class="token number">0.029277</span> <span class="token operator">-</span><span class="token number">0.890557</span>baz   one    <span class="token operator">-</span><span class="token number">0.211965</span>  <span class="token number">1.745703</span>      two    <span class="token operator">-</span><span class="token number">1.930054</span> <span class="token operator">-</span><span class="token number">0.925681</span>second        one       twofirstbar   A  <span class="token number">0.704871</span> <span class="token operator">-</span><span class="token number">0.029277</span>      B  <span class="token number">0.657547</span> <span class="token operator">-</span><span class="token number">0.890557</span>baz   A <span class="token operator">-</span><span class="token number">0.211965</span> <span class="token operator">-</span><span class="token number">1.930054</span>      B  <span class="token number">1.745703</span> <span class="token operator">-</span><span class="token number">0.925681</span>first          bar       bazsecondone    A  <span class="token number">0.704871</span> <span class="token operator">-</span><span class="token number">0.211965</span>       B  <span class="token number">0.657547</span>  <span class="token number">1.745703</span>two    A <span class="token operator">-</span><span class="token number">0.029277</span> <span class="token operator">-</span><span class="token number">1.930054</span>       B <span class="token operator">-</span><span class="token number">0.890557</span> <span class="token operator">-</span><span class="token number">0.925681</span><span class="token comment" spellcheck="true">#pivot_table换行列</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span>                       <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span>                       <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>                       <span class="token string">'D'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token string">'E'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUT<span class="token punctuation">:</span>        A  B    C         D         E<span class="token number">0</span>     one  A  foo <span class="token operator">-</span><span class="token number">0.705647</span> <span class="token operator">-</span><span class="token number">0.983468</span><span class="token number">1</span>     one  B  foo <span class="token operator">-</span><span class="token number">0.319298</span>  <span class="token number">0.664083</span><span class="token number">2</span>     two  C  foo  <span class="token number">0.948117</span> <span class="token operator">-</span><span class="token number">1.523873</span><span class="token number">3</span>   three  A  bar  <span class="token number">1.018841</span>  <span class="token number">0.616861</span><span class="token number">4</span>     one  B  bar <span class="token operator">-</span><span class="token number">2.029511</span> <span class="token operator">-</span><span class="token number">0.407078</span><span class="token number">5</span>     one  C  bar <span class="token operator">-</span><span class="token number">0.054141</span>  <span class="token number">0.058718</span><span class="token number">6</span>     two  A  foo  <span class="token number">2.124821</span> <span class="token operator">-</span><span class="token number">0.480747</span><span class="token number">7</span>   three  B  foo <span class="token operator">-</span><span class="token number">1.736714</span> <span class="token operator">-</span><span class="token number">2.327147</span><span class="token number">8</span>     one  C  foo <span class="token operator">-</span><span class="token number">0.320425</span>  <span class="token number">1.191605</span><span class="token number">9</span>     one  A  bar <span class="token operator">-</span><span class="token number">1.113508</span>  <span class="token number">1.323916</span><span class="token number">10</span>    two  B  bar  <span class="token number">1.525207</span> <span class="token operator">-</span><span class="token number">0.978258</span><span class="token number">11</span>  three  C  bar <span class="token operator">-</span><span class="token number">0.434330</span>  <span class="token number">0.780304</span>C             bar       fooA     Bone   A <span class="token operator">-</span><span class="token number">1.113508</span> <span class="token operator">-</span><span class="token number">0.705647</span>      B <span class="token operator">-</span><span class="token number">2.029511</span> <span class="token operator">-</span><span class="token number">0.319298</span>      C <span class="token operator">-</span><span class="token number">0.054141</span> <span class="token operator">-</span><span class="token number">0.320425</span>three A  <span class="token number">1.018841</span>       NaN      B       NaN <span class="token operator">-</span><span class="token number">1.736714</span>      C <span class="token operator">-</span><span class="token number">0.434330</span>       NaNtwo   A       NaN  <span class="token number">2.124821</span>      B  <span class="token number">1.525207</span>       NaN      C       NaN  <span class="token number">0.948117</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium&amp;PhantomJS</title>
      <link href="/2019/10/18/selenium/"/>
      <url>/2019/10/18/selenium/</url>
      
        <content type="html"><![CDATA[<p>pip install selenium==2.48.0 新版本不支持phantomjs<br><a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">下载phantomjs</a></p><blockquote><p>implicitly_wait（）：<br>浏览器解释JS脚本是需要时间的，但实际上这个时间并不好确定，<br>如果我们手动设定时间间隔的话，设置多了浪费时间，设置少了又会丢失数据<br>implictly_wait函数则完美解决了这个问题，给他一个时间参数，他会只能等待，当js完全解释完毕就会自动执行下一步。</p></blockquote><blockquote><p>Selenium 本事给出了18个函数来定位有效数据的位置：<br>找到第一个匹配的元素<br>find_element_by_id<br>find_element_by_name<br>find_element_by_xpath<br>find_element_by_link_text<br>find_element_by_partial_link_text<br>find_element_by_tag_name<br>find_element_by_class_name<br>find_element_by_css_selector<br>一次查找多个元素 (这些方法会返回一个list列表):<br>find_elements_by_name<br>find_elements_by_xpath<br>find_elements_by_link_text<br>find_elements_by_partial_link_text<br>find_elements_by_tag_name<br>find_elements_by_class_name<br>find_elements_by_css_selector</p></blockquote><blockquote><p>首先调用find_element_by_id（）方法找到了text栏的位置，<br>然后通过send_keys（）方法来输入关键字<br>接着还是通过find_element_by_id（）方法找到提按钮，<br>最后我们通过.submint()方法来模拟点击，发送搜索请求</p></blockquote><blockquote><p>通过browser.find_elements_by_class_name（）方法定位到搜索结果，<br>返回一个element类型的列表，<br>再通过element.text 和 element.get_attribute()方法来获取我们需要的数据。<br>最后我们遍历一边results列表就能获得我们想要的答案了。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''使用Selenium模拟浏览器抓取百度查询结果'''</span><span class="token comment" spellcheck="true"># 导入selenium模块中的web引擎</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment" spellcheck="true"># 建立浏览器对象 ，通过Phantomjs</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置访问的url</span>url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span><span class="token comment" spellcheck="true"># 访问url</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待一定时间，让js脚本加载完毕</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找到搜索框</span>text <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 清空搜索框的文字</span>text<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 填写搜索框的文字</span>text<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'命运冠位指定'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找到submit按钮</span>button <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击按钮 提交搜索请求</span>button<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看当前浏览器标题</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 以截图的方式查看浏览器的页面</span>browser<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">'text.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找到结果 结果保存为列表变量</span>results <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 循环遍历找出每个结果的标题和url</span><span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'标题：{} 超链接：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">,</span>                                result<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="实践：获取快代理"><a href="#实践：获取快代理" class="headerlink" title="实践：获取快代理"></a>实践：获取快代理</h1><blockquote><p>get_urls()<br>这个函数功能是返回一个需要爬取代理页面的url链接的列表<br>get_proxy_list()<br>这个函数通过Selenium和PhantomJS模拟一个浏览器环境，<br>首先 从get_urls函数返回的列表中拿出一个链接，打开<br>接着 在浏览器里通过find_elements_by_xpath()方法来找到每一条我们需要的数据，并保存在item里。<br>最后 将item返回给saveFile()函数处理。<br>saveFile()<br>这个函数没什么好说的，<br>就是将item理的数据写入到本地。<br>保存在proxy.txt文本中。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''selenium模拟浏览器爬虫爬取快代理：http://www.kuaidaili.com/'''</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    我们模拟Scrapy框架    写一个item类出来，    用来表示每一个爬到的代理    '''</span>    ip <span class="token operator">=</span> None  <span class="token comment" spellcheck="true"># ip地址</span>    port <span class="token operator">=</span> None  <span class="token comment" spellcheck="true"># 端口</span>    anonymous <span class="token operator">=</span> None  <span class="token comment" spellcheck="true"># 是否匿名</span>    type <span class="token operator">=</span> None  <span class="token comment" spellcheck="true"># http or https</span>    local <span class="token operator">=</span> None  <span class="token comment" spellcheck="true"># 物理地址</span>    speed <span class="token operator">=</span> None  <span class="token comment" spellcheck="true"># 速度</span><span class="token keyword">class</span> <span class="token class-name">GetProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取代理的类    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        初始化整个类        '''</span>        self<span class="token punctuation">.</span>starturl <span class="token operator">=</span> <span class="token string">'http://www.kuaidaili.com/free/inha/'</span>        self<span class="token punctuation">.</span>urls <span class="token operator">=</span> self<span class="token punctuation">.</span>get_urls<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>proxylist <span class="token operator">=</span> self<span class="token punctuation">.</span>get_proxy_list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>urls<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token string">'proxy.txt'</span>        self<span class="token punctuation">.</span>saveFile<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span>self<span class="token punctuation">.</span>proxylist<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_urls</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        返回一个代理url的列表        '''</span>        urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>starturl<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">return</span> urls    <span class="token keyword">def</span> <span class="token function">get_proxy_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>urls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        返回抓取到代理的列表        整个爬虫的关键        '''</span>        browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span>        proxy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 找到代理table的位置</span>            elements <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'//tbody/tr'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> element <span class="token keyword">in</span> elements<span class="token punctuation">:</span>                item <span class="token operator">=</span> Item<span class="token punctuation">(</span><span class="token punctuation">)</span>                item<span class="token punctuation">.</span>ip <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./td[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                item<span class="token punctuation">.</span>port <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./td[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                item<span class="token punctuation">.</span>anonymous <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./td[3]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                item<span class="token punctuation">.</span>local <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./td[4]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                item<span class="token punctuation">.</span>speed <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./td[5]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>ip<span class="token punctuation">)</span>                proxy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> proxy_list    <span class="token keyword">def</span> <span class="token function">saveFile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>proxy_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        将爬取到的结果写到本地        '''</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> proxy_list<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">.</span>ip <span class="token operator">+</span> <span class="token string">'\t'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">.</span>port <span class="token operator">+</span> <span class="token string">'\t'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">.</span>anonymous <span class="token operator">+</span> <span class="token string">'\t'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">.</span>local <span class="token operator">+</span> <span class="token string">'\t'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">.</span>speed <span class="token operator">+</span> <span class="token string">'\n\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    Get <span class="token operator">=</span> GetProxy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实践：爬取b站排行榜信息"><a href="#实践：爬取b站排行榜信息" class="headerlink" title="实践：爬取b站排行榜信息"></a>实践：爬取b站排行榜信息</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''selenium模拟浏览器爬虫爬取b站排行榜信息'''</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    我们模拟Scrapy框架    写一个item类出来    '''</span>    rank <span class="token operator">=</span> None <span class="token comment" spellcheck="true">#排名</span>    title <span class="token operator">=</span> None  <span class="token comment" spellcheck="true">#名</span>    play_num <span class="token operator">=</span> None <span class="token comment" spellcheck="true">#播放量</span>    danmu_num <span class="token operator">=</span> None <span class="token comment" spellcheck="true">#弹幕量</span>    author <span class="token operator">=</span> None <span class="token comment" spellcheck="true">#作者</span>    score <span class="token operator">=</span> None <span class="token comment" spellcheck="true">#综合得分</span>    url <span class="token operator">=</span> None <span class="token comment" spellcheck="true">#链接</span><span class="token keyword">class</span> <span class="token class-name">Get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取代理的类    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        初始化整个类        '''</span>        self<span class="token punctuation">.</span>starturl <span class="token operator">=</span> <span class="token string">'https://www.bilibili.com/ranking'</span>        self<span class="token punctuation">.</span>ranklist <span class="token operator">=</span> self<span class="token punctuation">.</span>get_rank_list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>starturl<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token string">'rank.txt'</span>        self<span class="token punctuation">.</span>saveFile<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span>self<span class="token punctuation">.</span>ranklist<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_rank_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        返回抓取到代理的列表        整个爬虫的关键        '''</span>        browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>        rank_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 找到代理table的位置</span>        elements <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="rank-list"]/li[@class="rank-item"]'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> element <span class="token keyword">in</span> elements<span class="token punctuation">:</span>            item <span class="token operator">=</span> Item<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">.</span>rank <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="num"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            item<span class="token punctuation">.</span>title <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="content"]/div[@class="info"]/a[@class="title"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            item<span class="token punctuation">.</span>play_num <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="content"]/div[@class="info"]/div[@class="detail"]/span[@class="data-box"][position()=1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            item<span class="token punctuation">.</span>danmu_num <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="content"]/div[@class="info"]/div[@class="detail"]/span[@class="data-box"][position()=2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            item<span class="token punctuation">.</span>author <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="content"]/div[@class="info"]/div[@class="detail"]/a/span[@class="data-box"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            item<span class="token punctuation">.</span>score <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="content"]/div[@class="info"]/div[@class="pts"]/div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            item<span class="token punctuation">.</span>url <span class="token operator">=</span> element<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="content"]/div[@class="img"]/a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>rank<span class="token punctuation">)</span>            rank_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rank_list    <span class="token keyword">def</span> <span class="token function">saveFile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>rank_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        将爬取到的结果写到本地        '''</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> rank_list<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'NO.'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>rank <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'title:'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'play:'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>play_num <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'danmu:'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>danmu_num <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'author:'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>author <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'score:'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>score <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'author:'</span><span class="token operator">+</span>item<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'\n\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    Get <span class="token operator">=</span> Get<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>坑获取标签属性要用get_attribute(‘’) 还以为爬不了呢</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy应用(四)</title>
      <link href="/2019/10/18/scrapy-4/"/>
      <url>/2019/10/18/scrapy-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>坑：抄完代码准备开爬时，出现了目标计算机积极拒绝balabala的错误，查了半天也没解决，就放弃了。结果在用pip 安装时也报了这个错突然想起来我之前也遇见过这个错误。是由于用过vpn导致的。解决办法是打开控制面板/网络和Internet/Internet选项/连接/局域网设置/把代理服务器×了就ok了</p></blockquote><p><strong>eg.方便数据库排序</strong><br>在spiders文件夹下建立sjzh.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''实现了中文向阿拉伯数字转换用于从小说章节名提取id来排序'''</span>chs_arabic_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'零'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'二'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'四'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                  <span class="token string">'五'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'六'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'七'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'八'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'九'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>                  <span class="token string">'十'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'百'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'千'</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'万'</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">4</span><span class="token punctuation">,</span>                  <span class="token string">'〇'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'壹'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'贰'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'叁'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'肆'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                  <span class="token string">'伍'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'陆'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'柒'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'捌'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'玖'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>                  <span class="token string">'拾'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'佰'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'仟'</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'萬'</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">4</span><span class="token punctuation">,</span>                  <span class="token string">'亿'</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'億'</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'幺'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                  <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                  <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span>num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">,</span><span class="token string">'三'</span><span class="token punctuation">,</span><span class="token string">'四'</span><span class="token punctuation">,</span><span class="token string">'五'</span><span class="token punctuation">,</span><span class="token string">'六'</span><span class="token punctuation">,</span><span class="token string">'七'</span><span class="token punctuation">,</span><span class="token string">'八'</span><span class="token punctuation">,</span><span class="token string">'九'</span><span class="token punctuation">,</span><span class="token string">'十'</span><span class="token punctuation">,</span><span class="token string">'零'</span><span class="token punctuation">,</span><span class="token string">'千'</span><span class="token punctuation">,</span><span class="token string">'百'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_tit_num</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> title<span class="token punctuation">:</span>        <span class="token keyword">if</span> char <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>            result<span class="token operator">+=</span>char    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">Cn2An</span><span class="token punctuation">(</span>chinese_digits<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">0</span>    tmp <span class="token operator">=</span> <span class="token number">0</span>    hnd_mln <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> count <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>chinese_digits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        curr_char <span class="token operator">=</span> chinese_digits<span class="token punctuation">[</span>count<span class="token punctuation">]</span>        curr_digit <span class="token operator">=</span> chs_arabic_map<span class="token punctuation">[</span>curr_char<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># meet 「亿」 or 「億」</span>        <span class="token keyword">if</span> curr_digit <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> result <span class="token operator">+</span> tmp            result <span class="token operator">=</span> result <span class="token operator">*</span> curr_digit            <span class="token comment" spellcheck="true"># get result before 「亿」 and store it into hnd_mln</span>            <span class="token comment" spellcheck="true"># reset `result`</span>            hnd_mln <span class="token operator">=</span> hnd_mln <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">8</span> <span class="token operator">+</span> result            result <span class="token operator">=</span> <span class="token number">0</span>            tmp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># meet 「万」 or 「萬」</span>        <span class="token keyword">elif</span> curr_digit <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">4</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> result <span class="token operator">+</span> tmp            result <span class="token operator">=</span> result <span class="token operator">*</span> curr_digit            tmp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># meet 「十」, 「百」, 「千」 or their traditional version</span>        <span class="token keyword">elif</span> curr_digit <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> tmp <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> tmp            result <span class="token operator">=</span> result <span class="token operator">+</span> curr_digit <span class="token operator">*</span> tmp            tmp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># meet single digit</span>        <span class="token keyword">elif</span> curr_digit <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> curr_digit        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result    result <span class="token operator">=</span> result <span class="token operator">+</span> tmp    result <span class="token operator">=</span> result <span class="token operator">+</span> hnd_mln    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># test</span><span class="token keyword">print</span> <span class="token punctuation">(</span>Cn2An<span class="token punctuation">(</span>get_tit_num<span class="token punctuation">(</span><span class="token string">'第一千三百九十一章 你妹妹被我咬了！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>老规矩先建项目和spider</strong></p><blockquote><p>创建项目<br>scrapy startproject biquge<br>进入文件夹<br>cd biquge<br>生成爬虫文件<br>scrapy genspider xsphspider qu.la</p></blockquote><p><strong>编写items</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BiqugeItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    <span class="token comment" spellcheck="true"># 小说名字</span>    bookname <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#章节名</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#正文</span>    body  <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#排序用id</span>    order_id <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编写spider</strong></p><p>由于我们的spider爬取顺序是这样的：</p><p>首先： 爬取排行榜页面，找到每一本小说的页面<br>接着： 爬取小说页面， 找到小说每一章的链接<br>最后： 爬取每一章节页面，找到文章标题和正文内容</p><p>我们再来复习一下 spider是怎么运作的：</p><p>首先： 从start_urls里发起请求，返回response<br>接着： 自动调用 parse函数<br>中间： 一系列我们自己添加的功能<br>最后： 返回item，给PIPELINE处理</p><p>为了实现我们定好的spider逻辑，我们得调用Scrapy内置的requests函数，<br>来介绍一下Scrapy.request函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>None<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>None<span class="token punctuation">,</span> body<span class="token operator">=</span>None<span class="token punctuation">,</span> cookies<span class="token operator">=</span>None<span class="token punctuation">,</span> meta<span class="token operator">=</span>None<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> priority<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dont_filter<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> errback<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里其实和我们一直用的request模块也差不多，最主要需要注意的参数：</span><span class="token comment" spellcheck="true"># callback 这个参数的意思是回调函数，就是会自动运行的函数，并将request获得的response自动传进去。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> biquge<span class="token punctuation">.</span>items <span class="token keyword">import</span> BiqugeItem<span class="token comment" spellcheck="true"># 导入我们自己写的函数</span><span class="token keyword">from</span> <span class="token punctuation">.</span>sjzh <span class="token keyword">import</span> Cn2An<span class="token punctuation">,</span>get_tit_num<span class="token keyword">class</span> <span class="token class-name">XsphspiderSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"xsphspider"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"qu.la"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.qu.la/paihangbang/'</span><span class="token punctuation">]</span>    novel_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 找到各类小说排行榜名单</span>        books <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="index_toplist mright mbottom"]'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 找到每一类小说排行榜的每一本小说的下载链接</span>        <span class="token keyword">for</span> book <span class="token keyword">in</span> books<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            links <span class="token operator">=</span> book<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[2]/div[2]/ul/li'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> <span class="token string">'http://www.qu.la'</span> <span class="token operator">+</span> \                    link<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                self<span class="token punctuation">.</span>novel_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 简单的去重</span>        self<span class="token punctuation">.</span>novel_list <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>self<span class="token punctuation">.</span>novel_list<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> novel <span class="token keyword">in</span> self<span class="token punctuation">.</span>novel_list<span class="token punctuation">:</span>           <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>novel<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>get_page_url<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_page_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        找到章节链接        '''</span>        page_urls <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//dd/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> page_urls<span class="token punctuation">:</span>           <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.qu.la'</span> <span class="token operator">+</span> url<span class="token punctuation">,</span>callback<span class="token operator">=</span>self<span class="token punctuation">.</span>get_text<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_text</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        找到每一章小说的标题和正文        并自动生成id字段，用于表的排序        '''</span>        item <span class="token operator">=</span> BiqugeItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 小说名</span>        item<span class="token punctuation">[</span><span class="token string">'bookname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">'.//div[@class="con_top"]/a[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 章节名 ,将title单独找出来，为了提取章节中的数字</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title        <span class="token comment" spellcheck="true">#  找到用于排序的id值</span>        item<span class="token punctuation">[</span><span class="token string">'order_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Cn2An<span class="token punctuation">(</span>get_tit_num<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 正文部分需要特殊处理</span>        body <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[@id="content"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将抓到的body转换成字符串，接着去掉\t之类的排版符号，</span>        text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\u3000'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span> <span class="token operator">=</span> text        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编写pipeline处理爬到的数据</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql <span class="token keyword">class</span> <span class="token class-name">BiqugePipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        将爬到的小数写入数据库        '''</span>        <span class="token comment" spellcheck="true"># 首先从items里取出数据</span>        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'bookname'</span><span class="token punctuation">]</span>        order_id <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'order_id'</span><span class="token punctuation">]</span>        body <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 与本地数据库建立联系</span>        <span class="token comment" spellcheck="true"># 和本地的scrapyDB数据库建立连接</span>        connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接的是本地数据库</span>            user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 自己的mysql用户名</span>            passwd<span class="token operator">=</span><span class="token string">'********'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 自己的密码</span>            db<span class="token operator">=</span><span class="token string">'bqgxiaoshuo'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># 数据库的名字</span>            charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 默认的编码方式：</span>            cursorclass<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 数据库表的sql</span>                sql1 <span class="token operator">=</span> <span class="token string">'Create Table If Not Exists %s(id int,zjm varchar(20),body text)'</span> <span class="token operator">%</span> name                <span class="token comment" spellcheck="true"># 单章小说的写入</span>                sql <span class="token operator">=</span> <span class="token string">'Insert into %s values (%d ,\'%s\',\'%s\')'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                    name<span class="token punctuation">,</span> order_id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> body<span class="token punctuation">)</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql1<span class="token punctuation">)</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交本次插入的记录</span>            connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 关闭连接</span>            connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置settings</strong></p><pre class="line-numbers language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'biquge.pipelines.BiqugePipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>中断后恢复任务</strong><br>由于这次我们需要爬得数据量非常的大，<br>就算有强大的多线程也不是一时半会就能爬完的，<br>所以这里我们得知道如果爬虫爬到一半断了，我们如何从断的地方接着工作，<br>而不是从头开始</p><p><strong>Job 路径</strong></p><p>要启用持久化支持，你只需要通过 JOBDIR 设置 job directory 选项。这个路径将会存储 所有的请求数据来保持一个单独任务的状态(例如：一次spider爬取(a spider run))。必须要注意的是，这个目录不允许被不同的spider 共享，甚至是同一个spider的不同jobs/runs也不行。也就是说，这个目录就是存储一个 单独 job的状态信息。</p><p><strong>如何使用？</strong></p><p>要启用一个爬虫的持久化，运行以下命令:</p><blockquote><p>scrapy crawl somespider -s JOBDIR=crawls/somespider-1</p></blockquote><p>然后，你就能在任何时候安全地停止爬虫(按Ctrl-C或者发送一个信号)。<br>恢复这个爬虫也是同样的命令:</p><blockquote><p>scrapy crawl somespider -s JOBDIR=crawls/somespider-1</p></blockquote><blockquote><p>战术总结<br>爬取过程中出现DEBUG: Redirecting (301) to &lt;GET ht。。。。。。是正常现象不会错过一些网页，原作者sjzh.py设置数据库id的代码有小bug</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy应用(三)</title>
      <link href="/2019/10/17/scrapy-3/"/>
      <url>/2019/10/17/scrapy-3/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫攻防"><a href="#爬虫攻防" class="headerlink" title="爬虫攻防"></a>爬虫攻防</h1><p>Scrapy框架在突破反爬虫技术上有十分强大的框架给我们用，<br>很多时候我们只需要自己改一些设定就能和网站管理员玩“猫捉老鼠”的游戏了<br>但是想要更多的自定义，需要我们自己写“MIddleWares：中间件”<br>更多的可以参考一下文档：<br><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/downloader-middleware.html" target="_blank" rel="noopener">下载器中间件</a></p><h4 id="1-突破时间间隔封锁："><a href="#1-突破时间间隔封锁：" class="headerlink" title="1.突破时间间隔封锁："></a>1.突破时间间隔封锁：</h4><p>很多网站对于人和爬虫的判断，基于访问的速度：爬虫可以做到1s内十次上百次的访问，人类却明显做不到。<br>scrapy框架只要在settings.py里设置就能改变访问的速度：</p><pre class="line-numbers language-python"><code class="language-python">DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里代表：每1s访问一次。<br>如果不考虑网站管理员的反爬虫，这个值当然越小越快，<br>但是总是会有一个 阈值 小于这个值，你的spider就要被封锁咯~<br>所以具体还是得自己实际测试才能知道。</p><h4 id="2-突破Cookie封锁："><a href="#2-突破Cookie封锁：" class="headerlink" title="2.突破Cookie封锁："></a>2.突破Cookie封锁：</h4><p>虽然我们没遇到过，但是众所周知，cookies是来确定用户身份的一长串数据，如果有的网站对cookie进行简单的检验，我们简单的设置一下也能解决：</p><pre class="line-numbers language-python"><code class="language-python">COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我们就禁用了cookie</p><h4 id="3-突破user-agent封锁："><a href="#3-突破user-agent封锁：" class="headerlink" title="3.突破user-agent封锁："></a>3.突破user-agent封锁：</h4><p>这种方式，本质上就是对headers进行判断，在前面的bs4爬虫攻防里我已经具体介绍过了，我就不多说了。<br>从这里开始就需要我们自己写中间件，才能够完成任务了。<br>首先，在与settings.py的同级目录建立文件夹：</p><blockquote><p>middlewares</p></blockquote><p>接着，在文件夹下创建：</p><pre><code>__init__.py</code></pre><p>这样可以让Python认为这个文件是一个可以导入的包<br>然后，我们开始写中间件：</p><blockquote><p>customUserAgent.py</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''自定义scrapy框架的user-agent头从一个被良好维护的user-agent列表里随机筛选合适的user-agent防止封锁'''</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>downloadermiddleware<span class="token punctuation">.</span>useragent <span class="token keyword">import</span> UserAgentMiddleware<span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#一个不容易被封锁的user-agent列表</span>agents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;'</span><span class="token punctuation">,</span>              <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv,2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span>              <span class="token string">'Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11'</span><span class="token punctuation">,</span>              <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'</span><span class="token punctuation">,</span>              <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">RandomUserAgent</span><span class="token punctuation">(</span>UserAgentMiddleware<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        定义下载中间件，        必须要写这个函数，        这是scrapy数据流转的一个环节        具体可以看文档:        http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/downloader-middleware.html        '''</span>        ua <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>agents<span class="token punctuation">)</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'User-agent'</span><span class="token punctuation">,</span>ua<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能每次发起访问请求的时候，随机选择一个user-agent了。</p><p>当然，我们需要在settings.py里激活我们的下载中间件：<br><strong>* 注意，需要scrapy自身的user-agent中间件关闭！ *</strong></p><blockquote><p>DOWNLOADER_MIDDLEWARES = {<br>    ‘xxx.middlewares.coustomUserAgent.RandomUserAgent’: 20,<br>    ‘scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware’:None，<br>}</p></blockquote><h4 id="4-突破IP封锁："><a href="#4-突破IP封锁：" class="headerlink" title="4.突破IP封锁："></a>4.突破IP封锁：</h4><p>终于说道关键的部分了，不说这里，上一张我们弄出来的这么多代理都白费啦！<br>原理我也不多说了，自然是一个ip的频繁访问，导致被封ip了。<br>解决办法也很简单，写一个代理中间件，让他每次访问的时候都换一个ip就成：</p><p>首先，我们要建立一个单独文件来存储可以用的代理：proxy.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''通过爬取可用的免费代理，进行测试可用度之后筛选获得的代理将静态的资源文件写在功能文件之外方便及时更新维护。'''</span>proxies <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'89.36.215.72:1189'</span><span class="token punctuation">,</span>    <span class="token string">'94.177.203.123:1189'</span><span class="token punctuation">,</span>    <span class="token string">'110.73.11.227:8123'</span><span class="token punctuation">,</span>    <span class="token string">'180.183.176.189:8080'</span><span class="token punctuation">,</span>    <span class="token string">'109.62.247.81:8080'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里单独写一个文件，是为了方便维护，毕竟免费的代理动不动就不能用啦！user-agent就不会，我们可以硬编码在功能里</p><p>接着，创建我们的中间件:coustomProxy.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''从本地文件proxy.py中读取可以用的代理列表并从中随机选择一个代理供给spider使用'''</span><span class="token keyword">from</span> xiubai<span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span>proxy <span class="token keyword">import</span> proxies<span class="token keyword">import</span> random<span class="token keyword">class</span> <span class="token class-name">RandomProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从文件中随机选择一个代理</span>        proxy <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>proxies<span class="token punctuation">)</span>        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，设置settings.py,注意，这里和上面不一样，不能关闭scrapy本身的代理中间件，只需要让自己写的在官方之前执行就成。</p><blockquote><p>DOWNLOADER_MIDDLEWARES = {<br>    ‘xxx.middlewares.coustomProxy.RandomProxy’:10,<br>    ‘xxx.middlewares.coustomUserAgent.RandomUserAgent’: 20,<br>    ‘scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware’:None,<br>    ‘scrapy.contrib.downloadermiddleware.httpproxy.HttpProxyMiddleware’:100,<br>}</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy应用(二)</title>
      <link href="/2019/10/17/scrapy-2/"/>
      <url>/2019/10/17/scrapy-2/</url>
      
        <content type="html"><![CDATA[<h1 id="仍然是那几个步骤"><a href="#仍然是那几个步骤" class="headerlink" title="仍然是那几个步骤"></a>仍然是那几个步骤</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#items</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">IpItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    ip <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">spider<span class="token operator">/</span>demo<span class="token punctuation">.</span>py<span class="token keyword">import</span> scrapy<span class="token keyword">from</span> ip<span class="token punctuation">.</span>items <span class="token keyword">import</span> IpItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"demo"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cn-proxy.com"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://cn-proxy.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        IP        '''</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        IP <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="table-container"]/table/tbody/tr'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> IP<span class="token punctuation">:</span>          item <span class="token operator">=</span> IpItem<span class="token punctuation">(</span><span class="token punctuation">)</span>          ip <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'td[position()=1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          duanko <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'td[position()=2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          item<span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ip<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>duanko          items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#pipelines.py</span><span class="token keyword">class</span> <span class="token class-name">IpPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>      fiename <span class="token operator">=</span> <span class="token string">'F:/爬虫/ip/ip.txt'</span>      <span class="token comment" spellcheck="true"># 从内存以追加的方式打开文件，并写入对应的数据</span>      <span class="token keyword">with</span> open<span class="token punctuation">(</span>fiename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>          f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#settings.py</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'ip.pipelines.IpPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="筛选无用代理"><a href="#筛选无用代理" class="headerlink" title="筛选无用代理"></a>筛选无用代理</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 引入这个库来获得map函数的并发版本</span><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool <span class="token keyword">as</span> ThreadPool<span class="token comment" spellcheck="true"># 定义全局变量</span>dir_path <span class="token operator">=</span> <span class="token string">'F:/爬虫/ip/'</span>alive_ip <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使得map并发！实例化pool对象</span>pool <span class="token operator">=</span> ThreadPool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置并发数量！</span>pool <span class="token operator">=</span> ThreadPool<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_alive</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    一个简单的函数，    来判断通过代理访问百度    筛选通过的代理保存到alive_ip中    '''</span>    <span class="token keyword">global</span> alive_ip    <span class="token comment" spellcheck="true">#设置代理头</span>    proxies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span> proxy<span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在测试：{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proxies<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该代理：{}成功存活'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">)</span>            alive_ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该代理{}失效！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proxies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Out_file</span><span class="token punctuation">(</span>alive_ip<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将符合要求的代理写入文件    '''</span>    <span class="token keyword">global</span> dir_path    <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir_path <span class="token operator">+</span> <span class="token string">'alive_ip.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> ip <span class="token keyword">in</span> alive_ip<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ip <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有存活ip都已经写入文件！'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'blank.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 循环处理每行文件</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir_path <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 我们去掉lines每一项后面的\n\r之类的空格</span>        <span class="token comment" spellcheck="true"># 生成一个新的列表！</span>        proxys <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>y <span class="token keyword">for</span> y <span class="token keyword">in</span> lines<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一行代码解决多线程！</span>        pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>test_alive<span class="token punctuation">,</span>proxys<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将存活的ip写入文件</span>    Out_file<span class="token punctuation">(</span>alive_ip<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用函数！</span>test<span class="token punctuation">(</span><span class="token string">'ip.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DOWNLOAD_DELAY = 1//settings.py设置下载延迟</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy应用(一)</title>
      <link href="/2019/10/14/scrapy-1/"/>
      <url>/2019/10/14/scrapy-1/</url>
      
        <content type="html"><![CDATA[<h2 id="先创建一个工程"><a href="#先创建一个工程" class="headerlink" title="先创建一个工程"></a>先创建一个工程</h2><p>scrapy startproject game<br>cd game<br>scrapy genspider demo 4399.com</p><h2 id="编写items"><a href="#编写items" class="headerlink" title="编写items"></a>编写items</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">GameItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写spider"><a href="#编写spider" class="headerlink" title="编写spider"></a>编写spider</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> game<span class="token punctuation">.</span>items <span class="token keyword">import</span> GameItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"demo"</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"4399.com"</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://4399.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        name = 名字        img = 图标        url = 网址        '''</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        game_message <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="tm_list"]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> one <span class="token keyword">in</span> game_message<span class="token punctuation">:</span>          item <span class="token operator">=</span> GameItem<span class="token punctuation">(</span><span class="token punctuation">)</span>          item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> one<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'www.4399.com'</span><span class="token operator">+</span>one<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>          items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写PIPELINE："><a href="#编写PIPELINE：" class="headerlink" title="编写PIPELINE："></a>编写PIPELINE：</h2><p>我们知道，pipelines.py是用来处理收尾爬虫抓到的数据的，<br>一般情况下，我们会将数据存到本地：</p><ul><li>文本形式： 最基本的方式</li><li>json格式 ：方便其他程序员调用</li><li>数据库： 数据量多时</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文本</span><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> codecs<span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">GamePipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        处理每一个从SZtianqi传过来的item        fiename <span class="token operator">=</span> <span class="token string">'F:/爬虫/data/game.txt'</span>        <span class="token comment" spellcheck="true"># 从内存以追加的方式打开文件，并写入对应的数据</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>fiename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#json</span><span class="token keyword">class</span> <span class="token class-name">gjson</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        filename <span class="token operator">=</span> <span class="token string">'F:/爬虫/data/game.json'</span>        <span class="token comment" spellcheck="true"># 打开json文件，向里面以dumps的方式吸入数据</span>        <span class="token comment" spellcheck="true"># 注意需要有一个参数ensure_ascii=False ，不然数据会直接为utf编码的方式存入比如:“/xe15”</span>        <span class="token keyword">with</span> codecs<span class="token punctuation">.</span>open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            line <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数据库</span><span class="token keyword">class</span> <span class="token class-name">gmysql</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        将爬取的信息保存到mysql        '''</span>        <span class="token comment" spellcheck="true"># 将item里的数据拿出来</span>        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        url <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 和本地的scrapyDB数据库建立连接</span>        connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接的是本地数据库</span>            user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 自己的mysql用户名</span>            passwd<span class="token operator">=</span><span class="token string">'000323624'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 自己的密码</span>            db<span class="token operator">=</span><span class="token string">'scrapyDB'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># 数据库的名字</span>            charset<span class="token operator">=</span><span class="token string">'utf8mb4'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 默认的编码方式：</span>            cursorclass<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 创建更新值的sql语句</span>                sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""INSERT INTO game(name,url)                        VALUES (%s, %s)"""</span>                <span class="token comment" spellcheck="true"># 执行sql语句</span>                <span class="token comment" spellcheck="true"># excute 的第二个参数可以将sql缺省语句补全，一般以元组的格式</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>                    sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交本次插入的记录</span>            connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 关闭连接</span>            connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token punctuation">[</span>'name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写Settings-py"><a href="#编写Settings-py" class="headerlink" title="编写Settings.py"></a>编写Settings.py</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数字是优先级</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'game.pipelines.gmysql'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>   <span class="token string">'game.pipelines.GamePipeline'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>   <span class="token string">'game.pipelines.gjson'</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>注意<br>item[‘name’] = one.xpath(‘a/img/@alt’).extract()[0]<br>extract转化为列表 [0]获得第一个元素str</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy框架</title>
      <link href="/2019/10/13/scrapy/"/>
      <url>/2019/10/13/scrapy/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener">英文文档</a><br><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html" target="_blank" rel="noopener">中文文档</a></p><h2 id="Scrapy框架的具体使用："><a href="#Scrapy框架的具体使用：" class="headerlink" title="Scrapy框架的具体使用："></a>Scrapy框架的具体使用：</h2><h3 id="步骤一：创建一个工程和spider模板"><a href="#步骤一：创建一个工程和spider模板" class="headerlink" title="步骤一：创建一个工程和spider模板"></a>步骤一：创建一个工程和spider模板</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#在一个目录里执行代码，创建工程名为zimuku</span>scrapy startproject zimuku<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>目录结构<br>├── zimuku                  #外层目录<br>│   ├── <strong>init</strong>.py         #初始化脚本<br>│   ├── <strong>pycache</strong>         #Python缓存文件。暂时无视<br>│   ├── items.py            #Items代码模板，继承类自scrapy.Item<br>│   ├── middlewares.py      #Middlewares代码模板(继承类)<br>│   ├── pipelines.py        #Pipelines代码模板(继承类)<br>│   ├── settings.py         #Scrapy爬虫的配置文件<br>│   └── spiders             #Spiders代码模板目录 我们写爬虫的地方<br>│       ├── <strong>init</strong>.py<br>│       └── <strong>pycache</strong><br>└── scrapy.cfg              #部署爬虫的配置文件</p></blockquote><p>进入到工程文件<br>cd zimuku<br>用命令行创建第一个Spider：<br>scrapy genspider demo <a href="http://zimuku.net" target="_blank" rel="noopener">http://zimuku.net</a></p><blockquote><p>战术总结<br>1.scrapy startproject zimuku<br>2.scrapy genspider demo <a href="http://zimuku.net" target="_blank" rel="noopener">http://zimuku.net</a></p></blockquote><h3 id="步骤二：编写Spider"><a href="#步骤二：编写Spider" class="headerlink" title="步骤二：编写Spider"></a>步骤二：编写Spider</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token comment" spellcheck="true"># 将我们需要爬的项目引入进来</span><span class="token keyword">from</span> zimuku<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZimukuItem<span class="token keyword">class</span> <span class="token class-name">DemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#该爬虫的名字</span>    name <span class="token operator">=</span> <span class="token string">"demo"</span>    <span class="token comment" spellcheck="true">#规定爬虫爬取网页的域名</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zimuku.net"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#开始爬取的url链接</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://zimuku.net/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        parse()函数接收Response参数，就是网页爬取后返回的数据        用于处理响应，他负责解析爬取的内容        生成解析结果的字典，并返回新的需要爬取的请求        '''</span>        <span class="token comment" spellcheck="true">#由于是demo 我们不做完全的功能，</span>        <span class="token comment" spellcheck="true">#只要求爬取出第一个字幕的名字</span>        <span class="token comment" spellcheck="true">#xpath规则可以通过查看网页源文件得出</span>        name <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//b/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#建立一个items字典，用于保存我们爬到的结果，并返回给pipline处理</span>        items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        items<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">]</span><span class="token operator">=</span> name        <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤三：-编写Item、Pipeline"><a href="#步骤三：-编写Item、Pipeline" class="headerlink" title="步骤三： 编写Item、Pipeline"></a>步骤三： 编写Item、Pipeline</h3><p>itmes.py定义这个爬虫框架需要爬哪些内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ZimukuItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    subname <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字幕的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>piplines.py来处理spider爬到的内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ZimukuPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 只要求简单的话，</span>        <span class="token comment" spellcheck="true"># 我们把爬到的结果打印一下吧</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤四：-优化配置Settings-py"><a href="#步骤四：-优化配置Settings-py" class="headerlink" title="步骤四： 优化配置Settings.py"></a>步骤四： 优化配置Settings.py</h3><pre class="line-numbers language-python"><code class="language-python">BOT_NAME <span class="token operator">=</span> <span class="token string">'zimuku'</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'zimuku.spiders'</span><span class="token punctuation">]</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'zimuku.spiders'</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#只增加了这一行，通过配置告诉Scrapy明白是谁来处理结果</span>ITEM_PIPELINES<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'zimuku.pipelines.ZimukuPipeline'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获得结果"><a href="#获得结果" class="headerlink" title="获得结果"></a>获得结果</h3><p>scrapy crawl demo</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bs4库应用(三)</title>
      <link href="/2019/10/13/bs4-tieba2/"/>
      <url>/2019/10/13/bs4-tieba2/</url>
      
        <content type="html"><![CDATA[<h1 id="杀不尽的欧洲狗流不尽的非洲泪！"><a href="#杀不尽的欧洲狗流不尽的非洲泪！" class="headerlink" title="杀不尽的欧洲狗流不尽的非洲泪！"></a>杀不尽的欧洲狗流不尽的非洲泪！</h1><p><img src="1.png" alt=""></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">" ERROR "</span><span class="token keyword">def</span> <span class="token function">get_list</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#获取最大页数</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    list <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'l_pager pager_theme_4 pb_list_pager'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contents    max_page <span class="token operator">=</span>  re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"pn=(.+?)\""</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    page <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入爬取页数&lt;="</span><span class="token operator">+</span>max_page<span class="token punctuation">)</span>    url_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'?pn='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> url_list<span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取中。。。"</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        list <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"BDE_Image"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num<span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'F:/爬虫/img/'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> li<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'wb+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束共获得"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个图片"</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"https://tieba.baidu.com/p/6289398506"</span>get_content<span class="token punctuation">(</span>get_list<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下图片<br>with open(‘F:/爬虫/img/‘ + str(num) + li[‘src’][-4:], ‘wb+’) as f:<br>                    f.write(requests.get(li[‘src’]).content)</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bs4库应用(二)</title>
      <link href="/2019/10/13/bs4s4-novel/"/>
      <url>/2019/10/13/bs4s4-novel/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.qu.la/paihangbang/" target="_blank" rel="noopener">受害者</a><br><img src="1.png" alt=""></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true"># 首先我们写好抓取网页的函数</span><span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">" ERROR "</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    爬取每一类型小说排行榜，    按顺序写入文件，    文件内容为 小说名字+小说链接    将内容保存到列表    并且返回一个装满url链接的列表    '''</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 速度有限只爬取第一个排行榜的小说，若果要全部则使用find_all+for循环</span>    cate <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'index_toplist mright mbottom'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> cate<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'toptab'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">.</span>string    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'novel_list.csv'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n小说种类：{} \n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 我们直接通过style属性来定位总排行榜</span>    general_list <span class="token operator">=</span> cate<span class="token punctuation">.</span>find<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'display: block;'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 找到全部的小说名字，发现他们全部都包含在li标签之中</span>    book_list <span class="token operator">=</span> general_list<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环遍历出每一个小说的的名字，以及链接</span>    <span class="token keyword">for</span> book <span class="token keyword">in</span> book_list<span class="token punctuation">:</span>        link <span class="token operator">=</span> <span class="token string">'http://www.qu.la/'</span> <span class="token operator">+</span> book<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        title <span class="token operator">=</span> book<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 我们将所有文章的url地址保存在一个列表变量里</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>link<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这里使用a模式，防止清空文件</span>        <span class="token comment" spellcheck="true"># with open('novel_list.csv', 'a') as f:</span>        <span class="token comment" spellcheck="true">#     f.write("小说名：{:&lt;} \t 小说地址：{:&lt;} \n".format(title, link))</span>    <span class="token keyword">return</span> url_list<span class="token keyword">def</span> <span class="token function">get_txt_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取该小说每个章节的url地址：    '''</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    lista <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'dd'</span><span class="token punctuation">)</span>    txt_name <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'F:/爬虫/小说/{}.txt'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'小说标题：{} \n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> lista<span class="token punctuation">:</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'http://www.qu.la/'</span> <span class="token operator">+</span> url<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> url_list<span class="token punctuation">,</span> txt_name<span class="token keyword">def</span> <span class="token function">get_one_txt</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> txt_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取小说每个章节的文本    并写入到本地    '''</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;br />'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        txt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">'chaptererror();'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'F:/爬虫/小说/{}.txt'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">'\n\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前小说：{} 当前章节{} 已经下载完毕'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>txt_name<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'someting wrong'</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#爬取小说个数</span>list1 <span class="token operator">=</span> get_content<span class="token punctuation">(</span><span class="token string">"http://www.qu.la/paihangbang/"</span><span class="token punctuation">)</span>list2 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span><span class="token punctuation">:</span>        list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>get_txt_url<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#i[0][a:]从第a-11张开始（之前的url格式不同）</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            get_one_txt<span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>列表去重<br>lst = [1,1,1,2,2,3,4,5]<br>new_list = list(set(lst))<br>print(new_list)<br>//OUT:[1, 2, 3, 4, 5]</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bs4库应用(一)</title>
      <link href="/2019/10/12/bs4-tieba/"/>
      <url>/2019/10/12/bs4-tieba/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>从网上爬下特定页码的网页</li><li>对于爬下的页面内容进行简单的筛选分析</li><li>找到每一篇帖子的 标题、发帖人、日期、楼层、以及跳转链接</li><li>将结果保存到文本。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true"># 首先我们写好抓取网页的函数</span><span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>endcodding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_endconding        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">" ERROR "</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    分析贴吧的网页文件，整理信息，保存在列表变量中    '''</span>    <span class="token comment" spellcheck="true"># 初始化一个列表来保存所有的帖子信息：</span>    comments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 首先，我们把需要爬取信息的网页下载到本地</span>    html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 我们来做一锅汤</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分析网页代码找到所有具有‘ j_thread_list clearfix’属性的li标签。返回一个列表类型。</span>    liTags <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">' j_thread_list clearfix'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过循环找到每个帖子里的我们需要的信息：</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> liTags<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 初始化一个字典来存储文章信息</span>        comment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 这里使用一个try except 防止爬虫找不到信息从而停止运行</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 开始筛选信息，并保存到字典中</span>            comment<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'a'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'j_th_tit '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comment<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://tieba.baidu.com/"</span> <span class="token operator">+</span> \                li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'j_th_tit '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>            comment<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'tb_icon_author '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comment<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'pull-right is_show_create_time'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comment<span class="token punctuation">[</span><span class="token string">'replyNum'</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span>                <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'threadlist_rep_num center_text'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            comments<span class="token punctuation">.</span>append<span class="token punctuation">(</span>comment<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出了点小问题'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> comments<span class="token keyword">def</span> <span class="token function">Out2File</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将爬取到的文件写入到本地    保存到当前目录的 TTBT.txt文件中。    '''</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'TTBT.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> comment <span class="token keyword">in</span> dict<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'标题： {} \t 链接：{} \t 发帖人：{} \t 发帖时间：{} \t 回复数量： {} \n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                comment<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> comment<span class="token punctuation">[</span><span class="token string">'replyNum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前页面爬取完成'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">:</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 将所有需要爬去的url存入列表</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">:</span>        url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_url <span class="token operator">+</span> <span class="token string">'&amp;pn='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有的网页已经下载到本地！ 开始筛选信息。。。。'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#循环写入所有的数据</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        content <span class="token operator">=</span> get_content<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        Out2File<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有的信息都已经保存完毕！'</span><span class="token punctuation">)</span>base_url <span class="token operator">=</span> <span class="token string">'https://tieba.baidu.com/f?kw=%E5%91%BD%E8%BF%90%E5%86%A0%E4%BD%8D%E6%8C%87%E5%AE%9A&amp;fr=index'</span><span class="token comment" spellcheck="true"># 设置需要爬取的页码数量</span>deep <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一个坑<br>with open(‘TTBT.txt’, ‘a+’) as f:<br>这样写可能有编码报错:UnicodeEncodeError: ‘gbk’ codec can’t encode character<br>改成这样:<br>with open(‘TTBT.txt’, ‘a+’, encoding=’utf-8’) as f:</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautiful Soup 爬虫</title>
      <link href="/2019/10/11/bs4/"/>
      <url>/2019/10/11/bs4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/26673214" target="_blank" rel="noopener">转自</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档¶</a></p><h2 id="bs4库的简单应用"><a href="#bs4库的简单应用" class="headerlink" title="bs4库的简单应用"></a>bs4库的简单应用</h2><p><a href="https://liukunyin.github.io/2019/10/11/request/#toc-heading-7">request.py</a><br>使用sublimetext会出现一些编码问题，先用pycharm吧</p><p><strong>使用lxml解析器来解释网页</strong></p><blockquote><p>bs4 库首先将传入的字符串或文件句柄转换为 Unicode的类型，这样，我们在抓取中文信息的时候，就不会有很麻烦的编码问题了。当然，有一些生僻的编码 如：‘big5’，就需要我们手动设置编码：<br>soup = BeautifulSoup(markup, from_encoding=”编码方式”)</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-11 21:00:57</span><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#导入bs4模块</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#做一个美味汤</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="对象的种类"><a href="#对象的种类" class="headerlink" title="对象的种类"></a>对象的种类</h2><p>bs4 库将复杂的html文档转化为一个复杂的树形结构，每个节点都是Python对象 ，所有对象可以分为以下四个类型：Tag , NavigableString , BeautifulSoup , Comment<br>我们来逐一解释：</p><ul><li>Tag： 和html中的Tag基本没有区别，可以简单上手使用</li><li>NavigableString： 被包裹在tag内的字符串</li><li>BeautifulSoup： 表示一个文档的全部内容，大部分的时候可以吧他看做一个tag对象，支持遍历文档树和搜索文档树方法。</li><li>Comment：这是一个特殊的NavigableSting对象，在出现在html文档中时，会以特殊的格式输出，比如注释类型。</li></ul><h3 id="几个结构化数据的方式"><a href="#几个结构化数据的方式" class="headerlink" title="几个结构化数据的方式"></a>几个结构化数据的方式</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#找到文档的title</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#title的name值</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#title中的字符串String</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#title的父亲节点的name属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#文档的第一个找到的段落</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到的p的class属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到a标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到所有的a标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到id值等于3的标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"link3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到所有class值为3的标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有文字内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将tag的子节点以列表方式输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#通过tag的 .children生成器，可以对tag的子节点进行循环</span><span class="token keyword">for</span> child <span class="token keyword">in</span> title_tag<span class="token punctuation">.</span>children<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到tag下的所有的文本内容</span><span class="token comment" spellcheck="true">#1.如果该tag只有一个子节点（NavigableString类型）：直接使用tag.string就能找到。</span><span class="token comment" spellcheck="true">#2.如果tag有很多个子、孙节点，并且每个节点里都string：我们可以用迭代的方式将其全部找出：</span><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>strings<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> bs4库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests库</title>
      <link href="/2019/10/11/request/"/>
      <url>/2019/10/11/request/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/26673214" target="_blank" rel="noopener">转自</a></p><h2 id="requests-request"><a href="#requests-request" class="headerlink" title="requests.request"></a>requests.request</h2><p><img src="1.png" alt=""><br>这些方法都是在requests.request的基础上创建的</p><pre class="line-numbers language-python"><code class="language-python">requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#以下两句等价</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/events'</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span>url<span class="token operator">=</span><span class="token string">"https://api.github.com/events"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get"></a>requests.get</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-11 21:00:57</span>这个方法可以接收三个参数，其中第二个默认为None 第三个可选<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#作用是模拟发起GET请求</span>Sends a GET request<span class="token punctuation">.</span><span class="token comment" spellcheck="true">#模拟获取页面的url链接</span><span class="token punctuation">:</span>param url<span class="token punctuation">:</span> URL <span class="token keyword">for</span> the new <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>Request object<span class="token punctuation">.</span><span class="token comment" spellcheck="true">#额外参数 字典或字节流格式，可选</span><span class="token punctuation">:</span>param params<span class="token punctuation">:</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> Dictionary <span class="token operator">or</span> bytes to be sent <span class="token keyword">in</span> the query string <span class="token keyword">for</span> the <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>Request<span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 十二个控制访问参数，比如可以自定义header</span><span class="token punctuation">:</span>param <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Optional arguments that request takes<span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 返回一个Response对象</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>Response <span class="token operator">&lt;</span>Response<span class="token operator">></span> object<span class="token punctuation">:</span>type<span class="token punctuation">:</span> requests<span class="token punctuation">.</span>Response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>kwargs: 控制访问的参数，均为可选项<br> params : 字典或字节序列，作为参数增加到url中<br> data : 字典、字节序列或文件对象，作为Request的内容 json : JSON格式的数据，作为Request的内容<br> headers : 字典，HTTP定制头<br> cookies : 字典或CookieJar，Request中的cookie<br> auth : 元组，支持HTTP认证功能<br> files : 字典类型，传输文件<br> timeout : 设定超时时间，秒为单位<br> proxies : 字典类型，设定访问代理服务器，可以增加登录认证<br> allow_redirects : True/False，默认为True，重定向开关<br> stream : True/False，默认为True，获取内容立即下载开关<br> verify : True/False，默认为True，认证SSL证书开关<br> cert : 本地SSL证书路径<br> url: 拟更新页面的url链接<br> data: 字典、字节序列或文件，Request的内容<br> json: JSON格式的数据，Request的内容</p></blockquote><hr><h2 id="常用的两个控制访问参数："><a href="#常用的两个控制访问参数：" class="headerlink" title="常用的两个控制访问参数："></a>常用的两个控制访问参数：</h2><h3 id="1-为了伪装成浏览器访问常设置head"><a href="#1-为了伪装成浏览器访问常设置head" class="headerlink" title="1.为了伪装成浏览器访问常设置head"></a>1.为了伪装成浏览器访问常设置head</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#常用Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span>hd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-agent'</span><span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''OUT:{'User-agent': '123', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置代理"><a href="#2-设置代理" class="headerlink" title="2.设置代理"></a>2.设置代理</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestspxs <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'124.156.108.71:82'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://icanhazip.com/'</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>pxs<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#OUT::124.156.108.71</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用Response对象方法"><a href="#常用Response对象方法" class="headerlink" title="常用Response对象方法"></a>常用Response对象方法</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置正确的编码方式(防止response.text编码错误)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding<span class="token comment" spellcheck="true">#HTTP请求的返回状态，比如，200表示成功，404表示失败</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#HTTP请求中的headers</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从header中猜测的响应的内容编码方式</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从内容中分析的编码方式（慢）</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>apparent_encoding<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># response.text 返回的是一个 unicode 型的文本数据</span><span class="token comment" spellcheck="true"># response.content 返回的是 bytes 型的二进制数据</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取网页的通用框架"><a href="#获取网页的通用框架" class="headerlink" title="获取网页的通用框架"></a>获取网页的通用框架</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getHtmlText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果状态码不是200 则应发HTTOError异常</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置正确的编码方式</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Something Wrong!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="把爬取的网页源代码保存为txt文件"><a href="#把爬取的网页源代码保存为txt文件" class="headerlink" title="把爬取的网页源代码保存为txt文件"></a>把爬取的网页源代码保存为txt文件</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requesthtml <span class="token operator">=</span> request<span class="token punctuation">.</span>getHtmlText<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> requests库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语栏目</title>
      <link href="/2019/10/04/everyday-japanese/"/>
      <url>/2019/10/04/everyday-japanese/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=468490608&amp;auto=1&amp;height=66"></iframe><br></div><style type="text/css">em{    color: #888;    font-size: 12px;    line-height: 12px;}</style><a href="https://translate.google.cn/" target="_blank" rel="noopener">翻訳</a><h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><h3 id="10月（じゅうがつ）"><a href="#10月（じゅうがつ）" class="headerlink" title="10月（じゅうがつ）"></a>10月（じゅうがつ）</h3><h4 id="4日（よっか）金曜日（きんようび）"><a href="#4日（よっか）金曜日（きんようび）" class="headerlink" title="4日（よっか）金曜日（きんようび）"></a>4日（よっか）金曜日（きんようび）</h4><p>  　　　<em>にんげん</em><br>  おれは  人间   をやめるぞ！ジョジョ―――ッ！！<br><img src="1.jpg" alt=""></p><h4 id="6日（むいか）土曜日（どようび）"><a href="#6日（むいか）土曜日（どようび）" class="headerlink" title="6日（むいか）土曜日（どようび）"></a>6日（むいか）土曜日（どようび）</h4><p><em>  わたし  な  きらよしかげ ねんれい さんじゅうさんさい</em><br>  私 の 名 は 吉良吉影  年齢  三十三歳</p><p>  わたしのなはきらよしかげねんれいさんじゅうさんさい<br>  私の名は吉良吉影年齢三十三歳</p><p>  じたくはもりおうちょうほくとうぶのべっそうちたいにあり<br>  自宅は杜王町北東部の別荘地帯にあり</p><p>  けっこんはしていない、しごとはかめゆうチェインってのかいしゃいんで<br>  結婚はしていない、仕事は亀友チェインっての会社員で</p><p>  まいにちおそくともよるはちじまでにはきたくする<br>  毎日遅くとも夜八時までには帰宅する</p><p>  タバクはすわない、さけはたしなむていど<br>  タバコは吸わない、酒は嗜む程度</p><p>  よるじゅいちじにはとこをつき<br>  夜十一時には床をつき</p><p>  かならずはちじかんはすいみんをとるようにしている<br>  必ず八時間は睡眠をとるようにしている</p><p>  ねるまえにあたたかいミルクをのみ<br>  寝る前に温かいミルクを飲み</p><p>  にじゅっぷんほどのストレッチでからだをほぐしてからとこにつくっと<br>  二十分ほどのストレッチで体を解してから床につくっと</p><p>  ほとんどあさまでじゅくすいさ<br>  殆ど朝まで熟睡さ</p><p>  あかんぼうのようにひろうやストレスをのこさずにあさめをさませるんだ<br>  赤ん坊のように疲労やストレスを残さずに朝目を覚ませるんだ</p><p>  けんこうしんだいでもいじょうなしといわれたよ<br>  健康診断でも異常なしと言われたよ<br><img src="2.jpg" alt=""></p><h4 id="7日（なのか）日曜日（にちようび）"><a href="#7日（なのか）日曜日（にちようび）" class="headerlink" title="7日（なのか）日曜日（にちようび）"></a>7日（なのか）日曜日（にちようび）</h4><p><em>   きょう  かぜ　  さわ</em><br>  今日は……風　が　騒がしい な…<br><img src="3.jpg" alt=""></p><h4 id="8日（ようか）月曜日（がつようび）"><a href="#8日（ようか）月曜日（がつようび）" class="headerlink" title="8日（ようか）月曜日（がつようび）"></a>8日（ようか）月曜日（がつようび）</h4><p><em>   せかい　           とき と</em><br>  世界（ザ・ワールド）ッ！時よ止まれ！<br><img src="4.gif" alt=""></p><h4 id="11日（じゅういちにち）金曜日（きんようび）"><a href="#11日（じゅういちにち）金曜日（きんようび）" class="headerlink" title="11日（じゅういちにち）金曜日（きんようび）"></a>11日（じゅういちにち）金曜日（きんようび）</h4><p><em>     かお             なみだ</em><br>  その顔をなんだ？それは、その涙はなんだ！<br><img src="5.gif" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统大纲</title>
      <link href="/2019/10/04/osnote/"/>
      <url>/2019/10/04/osnote/</url>
      
        <content type="html"><![CDATA[<p style="font-size: 50pt;color: red">木大了</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a><a href="https://wenku.baidu.com/view/d0cae61e910ef12d2bf9e72c.html" target="_blank" rel="noopener">名词解释</a></h2><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><h3 id="第一章-操作系统引论（缺失）"><a href="#第一章-操作系统引论（缺失）" class="headerlink" title="第一章 操作系统引论（缺失）"></a>第一章 操作系统引论（缺失）</h3><ul><li>分时实时系统比较</li><li>操作系统特征和功能</li><li>微内核系统</li></ul><h3 id="第二章-进程的描述与控制"><a href="#第二章-进程的描述与控制" class="headerlink" title="第二章 进程的描述与控制"></a>第二章 进程的描述与控制</h3><ul><li>了解前趋图进程的基本概念（题解p17）和应用；</li><li>理解程序执行，并发执行的概念、特点，以及并发执行的条件；题解p17</li><li>熟悉进程的基本概念、特征、pcb、进程实体、进程状态及其转换，熟悉进程与程序的关系；</li><li>了解线程的基本概念，线程的调度管理，以及与进程的关系；</li><li>了解进程同步和线程通信的基本概念；</li><li>了解进程通信的基本类型、特点和要求；</li><li>理解临界资源、临界区，以及同步准则等概念的基本含义，具体要求和进本应用；</li><li>了解常见的信号量机制，理解其基本原理和要求，能正确选用他们解决实际应用问题；</li></ul><h3 id="第三章-处理机调度与死锁"><a href="#第三章-处理机调度与死锁" class="headerlink" title="第三章 处理机调度与死锁"></a>第三章 处理机调度与死锁</h3><ul><li>了解处理机调度的基本概念及调度准则，掌握低级调度的主要功能；</li><li>掌握处理机调度的基本算法，及其应用；</li><li>掌握实时系统的调度算法，及其应用；</li><li>理解死锁的基本概念，死锁产生的原因和必要条件，以及处理死锁的基本方法，死锁定理；</li><li>了解预防死锁的基本方法，掌握银行家算法及安全性算法；</li></ul><h3 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章 存储器管理"></a>第四章 存储器管理</h3><ul><li>了解程序装入和链接的基本过程；</li><li>理解存储器的层次结构；</li><li>了解内存分配的概念，及常用分区分配方式；</li><li>理解页式、段式、段页式管理的基本原理和方法，掌握页表、段表和快表啊、掌握分页与分段的区别；</li><li>掌握地址变换机构的工作机制，掌握逻辑地址到物理地址的映射过程；</li></ul><h3 id="第五章-虚拟存储器"><a href="#第五章-虚拟存储器" class="headerlink" title="第五章 虚拟存储器"></a>第五章 虚拟存储器</h3><ul><li>理解常规存储器的特征;</li><li>理解虚拟存储器的基本概念\特征以及实现技术;</li><li>掌握常用页面置换法.</li></ul><h3 id="第六章-输入输出系统"><a href="#第六章-输入输出系统" class="headerlink" title="第六章 输入输出系统"></a>第六章 输入输出系统</h3><ul><li>了解I/O系统的基本功能与结构,及常用控制方法;</li><li>掌握中断处理程序和设备驱动程序的功能与工作过程,理解设备独立性引入的原因和实现要求;</li><li>了解缓冲的基本概念,引入原因及实现方法;</li><li>理解设备分配及处理的基本要求;</li><li>掌握假脱机SPOOLing系统的组成,打印机工作原理;</li><li>理解磁盘调度方式,掌握常用磁盘调度算法.</li></ul><h3 id="第七章-文件管理"><a href="#第七章-文件管理" class="headerlink" title="第七章 文件管理"></a>第七章 文件管理</h3><ul><li>了解文件及文件系统的基本概念,理解文件的基本操作;</li><li>掌握文件系统的基本功能;</li><li>掌握文件的逻辑及物理存储机构;</li><li>掌握文件目录的类型和特别,目录结构;</li><li>理解文件的共享和保护,链接方式共享文件的优点;</li></ul><h3 id="第八章-磁盘存储器的管理"><a href="#第八章-磁盘存储器的管理" class="headerlink" title="第八章 磁盘存储器的管理"></a>第八章 磁盘存储器的管理</h3><ul><li>掌握外存的组织方式,文件存储空间管理的常用方法</li><li>了解提高磁盘可靠性和速度的技术</li><li>了解数据一致性的概念,以及控制方式</li></ul><hr><h2 id="重点课后题-1-3章"><a href="#重点课后题-1-3章" class="headerlink" title="重点课后题(1-3章)"></a>重点课后题(1-3章)</h2><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><h4 id="10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"><a href="#10-试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较" class="headerlink" title="10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较"></a>10.试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较</h4><p>1）交互性：分时系统是一种通用系统，主要用于运行终端用户程序，因而它具有较强的交互能力；而实时系统虽然也有交互能力，但这里人与系统的交互仅限于访问系统中某些特定的专用服务程序，其交互能力不及前者<br>2）及时性：实时信息系统对及时性的要求与分时系统类似，都是以人所能接受的等待时间来确定；而实时控制系统的及时性则是以控制对象所要求的开始截止时间和完成截止时间来确定的，一般为秒级到毫秒级。<br>3）可靠性：分时系统虽然也要求系统可靠，但相比之下，实时系统对系统的可靠性要求要比分时系统对系统的可靠性要求高</p><h4 id="11-OS有哪几大特征？其最基本的特征是什么？"><a href="#11-OS有哪几大特征？其最基本的特征是什么？" class="headerlink" title="11.OS有哪几大特征？其最基本的特征是什么？"></a>11.OS有哪几大特征？其最基本的特征是什么？</h4><p>井发性、共享性,虚拟性和异步性四个基本特征; 最基本的特征是并发性。</p><h4 id="21-微内核操作系统有哪些优点？它为何能有这些优点？"><a href="#21-微内核操作系统有哪些优点？它为何能有这些优点？" class="headerlink" title="21.微内核操作系统有哪些优点？它为何能有这些优点？"></a>21.微内核操作系统有哪些优点？它为何能有这些优点？</h4><p>1）提高了系统的可扩展性<br>2）增强了系统的可靠性<br>3）可移植性强<br>4）提供了对分布式系统的支持<br>5）融入了面向对象技术<br>原因：微内核os结构是建立在模块化，层次化结构基础上的，并且采用了客户/服务器模式和面对对象的程序设计技术。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><strong>1.操作系统的功能、类型</strong><br>功能：处理机管理、存储器管理、设备管理、文件管理、提供友好的用户接口<br>类型：批处理系统、分时系统、实时系统</p><p><strong>2.多道程序技术</strong><br>是指内存中同时存放若干个作业，并使它们共享系统的资源且同时运行的技术。<br>1）提高cpu利用率<br>2）提高内存和I/O设备的利用率<br>3）增加系统吞吐量</p><p><strong>3.并发、并行</strong><br>并发：若干事件在同一时间间隔发生；<br>并行：若干事件在同一时刻发生；</p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="6-进程与程序的主要区别和关系"><a href="#6-进程与程序的主要区别和关系" class="headerlink" title="6.进程与程序的主要区别和关系"></a>6.进程与程序的主要区别和关系</h4><p>1）程序是指令的集合，本身没有任何运行的含义，是一个静态概念；而进程是程序在处理机上的一次执行过程，是一个动态概念。<br>2）程序的存在是永久的；而进程是有生命周期的，它因创建而产生，因调度而执行，因缺少资源而暂停，因撤消而消亡。<br>3）程序仅是指令的有序集合；而进程则由程序段、数据段、进程控制块组成。<br>4）进程与程序之间不是一一对应的，即同一程序可同时运行于若干个不同的数据集合上，它将属于不同的进程：而一个进程也可以执行多个程序。</p><h4 id="10-pcb的作用是什么为什么说pcb是进程存在的唯一标志"><a href="#10-pcb的作用是什么为什么说pcb是进程存在的唯一标志" class="headerlink" title="10.pcb的作用是什么为什么说pcb是进程存在的唯一标志"></a>10.pcb的作用是什么为什么说pcb是进程存在的唯一标志</h4><p>  进程控制块是操作系统用来描述和管理进城的数据结构，其作用是使一个在多道程序环境下，不能独立运行的程序，成为一个能独立运行的基本单位，即一个能与其他进程并发执行的进程。<br>  在创建进程时，系统将为他配置一个PCB，在进程调度时，系统将根据PCB的状态和优先级等信息来选择新进程，然后将老进程的现场信息保存到它的PCB中，再根据 新进程PCB中所保存的处理机状态信息来恢复运行的现场；执行中的进程，如果需要访问文件或者需要与合作进程实现同步或通信，也都需要访问PCB；当进程因某种原因而暂停执行时，也必须将断点的现场信息保存到它的PCB中：当进程结束时，系统将回收它的PCB，可见，在进程的整个生命期中，系统总是通过其PCB对进程进行控和管理，亦即，系统是根据其PCB而不是任何别的什么而感知到进程的存在，所以说，PCB是进程存在的唯一标志。</p><h4 id="21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"><a href="#21-试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。" class="headerlink" title="21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。"></a>21.试从调度性、并发性、拥有资源、独立性、系统开销、及对多处理机的支持等方面，对进程和线程进行比较。</h4><p>1）调度性。在传统的操作系统中，拥有资源的基本单位、独立调度和分派的基本单位都是进程。而在引入线程的OS中，则是把线程作为调度和分配的基本的单位，进程只是拥有资源的基本单位，而不再是调度和分派的基本单位。<br>2）并发性。在引入线程的OS中，不仅进程间可以并发执行，而且在一个进程内的多个线程间，也可以并发执行，因而比传统的OS具有更好的并发行。<br>3）拥有资源。在这两种OS中，拥有资源的基本单位都是进程。线程除了一点在在运行中必不可少的资源（如线程控制块、程序计数器、一组寄存器值和堆栈）外，本身基本不拥有系统资源，但它可共享其隶属的进程的资源。<br>4）独立性。每个进程都能独立地申请资源和独立的运行；但同一进程的多个线程则共享进程的内存地址空间和其他资源，它们之间的独立性比进程之间的独立性要低。<br>5）开销。由于创建和撤消进程时，系统都要为之分配和回收资源，如内存空间等。进程切换时所要保存和设置的现场信息也要明显地多于线程，因此，OS在创建、撤销和切换进程时<br>所付出的开销显著大于线程。另外由于隶属于同一个进程的多个线程共享同一地址空间和打开文件，从而使它们之间的同步和通信的实现也变得更为容易。<br>6）支持多处理机系统。传统的进程，只能运行在一个处理机上；多线程的进程，则可以将进程中的多个线程分配到多个处理机上，从而获得更好的并发执行效果。</p><hr><h4 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h4><p><strong>1.进程的三种基本状态</strong><br>就绪状态、执行状态、阻塞状态。</p><p><strong>2.临界区、临界资源定义</strong><br>临界资源：一段时间内只允许一个进程访问。<br>临界区：进程中访问临界资源的那段代码称为临界区</p><p><strong>3.同步准则</strong><br>空闲让进、忙则等待、有限等待、让权等待</p><p><strong>4.原语</strong><br>由若干指令组成的，用于完成一定功能的一个过程。它是一个不可分割的基本单位。</p><p><strong>5.程序顺序执行、并发执行</strong><br>顺序：若干个程序或程序段之间必须严格按照某种先后次序来执行<br>特征顺序性、封闭性、可再现性。<br>并发：两个或两个以上的程序或程序段可在同一时间间隔内同时执行。<br>前提：只有在不存在前趋关系的程序之间才有可能并发执行。<br>特征间断性、失去封闭性、不可再现性</p><p><strong>6.进程的特征</strong><br>动态性、并发性、独立性、异步性</p><p><strong>7.进程实体的组成</strong><br>程序段、数据段、进程控制块</p><p><strong>8.pcb</strong><br>pcb中记录了操作系统所需的用于描述进程的当前状况以及控制进程的全部信息<br>作用：将程序变成可并发执行的进程<br>系统根据进程的PCB感知到进程的存在，并通过PCB对进程进行控制，因此PCB是进程存在的唯一标志<br>PCB要被系统频繁访问因此PCB中的信息必须全部或部分常驻内存</p><p><strong>9.引入进程、线程的目的</strong><br>引入进程的目的是使程序可以并发执行<br>引入线程的目的是减少程序在并发执行时付出的时空开销</p><p>指导书p41 例41 p50 例20</p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><h4 id="7-试说明低级调度的主要功能"><a href="#7-试说明低级调度的主要功能" class="headerlink" title="7.试说明低级调度的主要功能"></a>7.试说明低级调度的主要功能</h4><p>1）保存处理机的现场信息<br>2）按某种算法选取进程<br>3）把处理机分配给进程</p><h4 id="12-试比较FCFS和SPF两种进程调度算法"><a href="#12-试比较FCFS和SPF两种进程调度算法" class="headerlink" title="12.试比较FCFS和SPF两种进程调度算法"></a>12.试比较FCFS和SPF两种进程调度算法</h4><p>相同点：两种调度算法都可以用于作业调度和进程调度<br>不同点：FCFS调度算法每次都从后备队列中选择一个或多个最先进入该队列的作业，将他们调入内存、分配资源、创建进程、插入到就绪队列。该算法有利于长作业/进程，不利于短作业/进程。SPF算法每次调度都从后备队列中选择一个或若干个估计运行时间最短的作业，调入内存中运行。该算法有利于短作业/进程，不利于长作业/进程</p><h4 id="15-为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？"><a href="#15-为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？" class="headerlink" title="15.为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？"></a>15.为什么说多级反馈队列调度算法能较好地满足各方面用户的需求？</h4><p>1）终端型作业用户提交的作业大多属于较小的交互型作业，系统只要提交这些作业在第一队列规定的时间片内完成，终端作业用户就会感到满足。<br>2）短批处理作业用户，开始时像终端型作业一样，如果在第一队列中执行一个时间片段即可完成，便可获得与终端作业一样的响应时间。对于稍长作业，通常只需在第二和第三队列各执行一时间片即可完成，其周转时间仍然较短。<br>3）长批处理作业，他将依次在第1，2，。。。，n个队列中运行，然后再按轮转方式运行，用户不必担心其长期作业得不到处理。所以，多级反馈队列调度算法能满足更多用户需求。</p><h4 id="27-何谓死锁？产生死锁的原因和必要条件是什么？"><a href="#27-何谓死锁？产生死锁的原因和必要条件是什么？" class="headerlink" title="27.何谓死锁？产生死锁的原因和必要条件是什么？"></a>27.何谓死锁？产生死锁的原因和必要条件是什么？</h4><p>定义：如果一组进程中的每一个进程都在等待仅由该组进程中的其它进程才能引发的事件，那么该组进程是死锁的<br>产生原因：1）竞争资源 2）进程推进顺序非法<br>必要条件：1）互斥条件 2）请求和保持条件 3）不可抢占条件 4）循环等待条件</p><h4 id="30-银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？"><a href="#30-银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？" class="headerlink" title="30.银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？"></a>30.银行家算法的例子中，如果P0发出的请求向量由Request（0，2，0）改为Request（0，1，0），问系统可否将资源分配给它？</h4><p>能分配<br>request（0，1，0）≤need（7，4，3）；<br>request（0，1，0）≤available（2，3，0）；<br>系统暂时假定可为P0分配资源，并修改有关数据，如下所示：</p><table><thead><tr><th></th><th>allocation</th><th>need</th><th>available</th></tr></thead><tbody><tr><td></td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td></tr><tr><td>p0</td><td>0  2  0</td><td>7  3  3</td><td>2  2  0</td></tr><tr><td>p1</td><td>3  0  2</td><td>0  2  0</td><td></td></tr><tr><td>p2</td><td>3  0  2</td><td>6  0  0</td><td></td></tr><tr><td>p3</td><td>2  1  1</td><td>0  1  1</td><td></td></tr><tr><td>p4</td><td>0  2  2</td><td>4  3  1</td><td></td></tr></tbody></table><p>利用安全性算法检查</p><table><thead><tr><th></th><th>work</th><th>need</th><th>allocation</th><th>work+allocation</th><th>finish</th></tr></thead><tbody><tr><td></td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td><td>A  B  C</td><td></td></tr><tr><td>p1</td><td>2  2  0</td><td>0  2  0</td><td>3  0  2</td><td>5  2  2</td><td>true</td></tr><tr><td>p3</td><td>5  2  2</td><td>0  1  1</td><td>2  1  1</td><td>7  3  3</td><td>true</td></tr><tr><td>p0</td><td>7  3  3</td><td>7  3  3</td><td>0  2  0</td><td>7  5  3</td><td>true</td></tr><tr><td>p2</td><td>7  5  3</td><td>6  0  0</td><td>3  0  2</td><td>10 5  5</td><td>true</td></tr><tr><td>p4</td><td>10 5  5</td><td>4  3  1</td><td>0  0  2</td><td>10 5  7</td><td>true</td></tr></tbody></table><p>存在安全序列{p1,p3,p0,p2,p4}所以能分配</p><h4 id="31-在银行家算法中，若出现下述资源分配情况，试问："><a href="#31-在银行家算法中，若出现下述资源分配情况，试问：" class="headerlink" title="31.在银行家算法中，若出现下述资源分配情况，试问："></a>31.在银行家算法中，若出现下述资源分配情况，试问：</h4><table><thead><tr><th>process</th><th>allocation</th><th>need</th><th>available</th></tr></thead><tbody><tr><td>p0</td><td>0 0 3 2</td><td>0 0 1 2</td><td>1 6 2 2</td></tr><tr><td>p1</td><td>1 0 0 0</td><td>1 7 5 0</td><td></td></tr><tr><td>p2</td><td>1 3 5 4</td><td>2 3 5 6</td><td></td></tr><tr><td>p3</td><td>0 3 3 2</td><td>0 6 5 2</td><td></td></tr><tr><td>p4</td><td>0 0 1 4</td><td>0 6 5 6</td><td></td></tr></tbody></table><p>（1）该状态是否安全？</p><table><thead><tr><th></th><th>work</th><th>need</th><th>allocation</th><th>work+allocation</th><th>finish</th></tr></thead><tbody><tr><td>p0</td><td>1 6 2 2</td><td>0 0 1 2</td><td>0 0 3 2</td><td>1 6 5 4</td><td>true</td></tr><tr><td>p3</td><td>1 6 5 4</td><td>0 6 5 2</td><td>0 3 3 2</td><td>1 9 8 6</td><td>true</td></tr><tr><td>p4</td><td>1 9 8 6</td><td>0 6 5 6</td><td>0 0 1 4</td><td>1 9 9 10</td><td>true</td></tr><tr><td>p1</td><td>1 9 9 10</td><td>1 7 5 0</td><td>1 0 0 0</td><td>2 9 9 0</td><td>true</td></tr><tr><td>p2</td><td>2 9 9 10</td><td>2 3 5 6</td><td>1 3 5 4</td><td>3 12 14 14</td><td>true</td></tr></tbody></table><p>存在安全序列{p0,p3,p4,p1,p2}所以安全<br>（2）p2发出请求向量Request（1，2，2，2）后，系统能否将资源分配给它？<br>系统按银行家算法进行检查：<br>①request2（1，2，2，2）≤need2（2，3，5，6）<br>②request2（1，2，2，2）≤available（1，6，2，2）<br>③系统先假定可为P2分配资源并修改<br>available = （0，4，0，0）<br>allocation2 = （2，5，7，6）<br>need2 = （1，1，3，4）<br>④进行安全性检查：此时对所有的进程need≤available都不成立故系统进入不安全状态。<br>因此不能分配给P2</p><h2 id="重点课后题-4-6章"><a href="#重点课后题-4-6章" class="headerlink" title="重点课后题(4-6章)"></a>重点课后题(4-6章)</h2><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="12-分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130"><a href="#12-分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130" class="headerlink" title="12.分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130"></a>12.分区存储管理中常用到哪些分配策略？比较它们的优缺点。p130</h4><p>  分区存储管理中的常用分配策略：首次适应算法、循环首次适应算法、最佳适应算法、最坏适应算法。</p><ul><li>首次适应算法：保留了高址部分的大空闲区，有利于后来的大型作业分配；低址部分不断被划分，留下许多难以利用的小空闲区，每次查找都从低址开始增加了系统开销。</li><li>循环首次适应算法：内存空闲分区分布均匀，减少了查找系统开销；缺乏大空闲分区，导致不能装入大型作业。</li><li>最佳适应算法：每次分配给文件的都是最适合该文件大小的分区，内存中留下许多难以利用的小空闲区。</li><li>最坏适应算法：剩下空闲区不太小，产生碎片几率小，对中小型文件分配分区操作有利；存储器中缺乏大空闲区，对大型文件分区分配不利。</li></ul><h4 id="14-对文件区管理的目标和对对换空间管理的目标有何不同？p136"><a href="#14-对文件区管理的目标和对对换空间管理的目标有何不同？p136" class="headerlink" title="14.对文件区管理的目标和对对换空间管理的目标有何不同？p136"></a>14.对文件区管理的目标和对对换空间管理的目标有何不同？p136</h4><p>1）对文件区管理的主要目标<br>  文件区占用磁盘空间的大部分，用于存放各类文件。由于通常的文件都是较长时间的驻留在外存上，对他访问的频率是较低的，故对文件区管理的主要目标是提高文件存储空间的利用率，然后才是提高对文件的访问速度。因此，对文件的管理采取离散分配方式。<br>2）对对换空间的管理的主要目标<br>  对换空间只占用磁盘空间的小部分，用于存放从内存换出的进程。由于这些进程在对换区驻留的时间是短暂的，而对换操作的频率却较高，故对对换空间的管理的主要目标是提高进程换入和换出的速度，然后才是提高文件存储空间的利用率。为此，对对换空间的管理采取连续分配方式，较少考虑外存中的碎片问题。</p><h4 id="17-基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138"><a href="#17-基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138" class="headerlink" title="17.基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138"></a>17.基于离散分配时所用的基本单位不同，可将离散区分配为哪几种？p138</h4><p>1）分页存储管理方式<br>  在该方式中，将用户程序的地址空间分为若干个固定大小的区域，称为“页”或“页面”。<br>2）分段存储管理方式<br>  它把用户程序的地址空间分为若干个大小不同的段，每段可定义一组相对完整的信息。在存储器分配时，以段为单位。<br>3）段页式存储管理方式。<br>  这是分页和分段两种存储管理方式相结合的产物。它同时具有两者的优点，是目前应用较广泛的一种存储管理方式。</p><h4 id="19-什么是页表？页表的作用是什么？p139"><a href="#19-什么是页表？页表的作用是什么？p139" class="headerlink" title="19.什么是页表？页表的作用是什么？p139"></a>19.什么是页表？页表的作用是什么？p139</h4><p>  在分页系统中，允许将进程的各个页离散的存储在内存的任一物理块中，为保证进程仍然能正确的运行，既能在内存中找到每个页面所对应的物理块，系统又为每个进程建立了一张页面映像表，简称页表。<br>  页表的作用是实现从页号到物理块号的地址映射。</p><h4 id="21-在分页系统中是如何实现地址变换的？p140"><a href="#21-在分页系统中是如何实现地址变换的？p140" class="headerlink" title="21.在分页系统中是如何实现地址变换的？p140"></a>21.在分页系统中是如何实现地址变换的？p140</h4><p>  首先，进程运行时从进程的PCB中把页表始址和页表长度放入页表寄存器中，当进程要访问某个逻辑地址中的数据的时候，分页地址变换机构会自动的将有效地址(逻辑地址)分为页号和页内地址。讲页号和页表寄存器中的页表长度相比，如果页号比较大则说明访问越界，抛出中断。否则利用页号、页表始址和页表项长度计算出相应的页表中的位置(因为页表在内存中，所以需要计算对应的地址，而不是想象中的直接匹配页号，相当于“起点+单位数x单位长度”)，从而得到物理块号。把物理块号和页内地址同时送入物理地址寄存器中，相结合得到物理地址。</p><h4 id="22-具有快表时是如何实现地址变换的？p141"><a href="#22-具有快表时是如何实现地址变换的？p141" class="headerlink" title="22.具有快表时是如何实现地址变换的？p141"></a>22.具有快表时是如何实现地址变换的？p141</h4><p>  首先，以前转换过程中查找过的页表项会被记录在快表之中。在每次需要访问逻辑地址中的数据的时候，都会根据页号先到快表中查看有没有对应的匹配项，如果有就直接得到相应的物理块号而不需要进过利用始址、页号和页表项长度计算后去内存中查表。得到物理块号后依然是送到物理地址寄存器中和页内地址结合形成最后的物理地址。</p><h4 id="23-较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145-146"><a href="#23-较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145-146" class="headerlink" title="23.较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145\146"></a>23.较详细地说明引入分段存储管理是为了满足用户哪几方面的需要。p145\146</h4><p>1)方便编程<br>通常，用户把自己的作业按照逻辑关系划分为若干个段，每个段都是从0开始编址，并有自己的名字和长度。因此，希望要访问的逻辑地址是由段名(段号)和段内偏移量(段内地址)决定的。<br>2)信息共享<br>在实现对程序和数据的共享时，是以信息的逻辑单位为基础的。比如，共享 某个例程和函数。分页系统中的“页”只是存放信息的物理单位(块)，并无完整的 意义，不便于实现共享；然而段却是信息的逻辑单位。由此可知，为了实现段的 共享，希望存储管理能与用户程序分段的组织方式相适应。<br>3)信息保护<br>信息保护同样是对信息的逻辑单位进行保护，因此，分段管理方式能更有效 和方便地实现信息保护功能。<br>4)动态增长在实际应用中，往往有些段，特别是数据段，在使用过程中会不断地增长， 而事先又无法确切地知道数据段会增长到多大。前述的其它几种存储管理方式， 都难以应付这种动态增长的情况，而分段存储管理方式却能较好地解决这一问题<br>5)动态链接<br>动态链接是指在作业运行之前，并不把几个目标程序段链接起来。要运行时， 先将主程序所对应的目标程序装入内存并启动运行，当运行过程中又需要调用某段时，才将该段(目标程序)调入内存并进行链接。可见，动态链接也要求以段作为管理的单位。</p><h4 id="26-分页和分段存储管理有何区别？p148"><a href="#26-分页和分段存储管理有何区别？p148" class="headerlink" title="26.分页和分段存储管理有何区别？p148"></a>26.分页和分段存储管理有何区别？p148</h4><p>(1)<br>a 页是信息的物理单位。采用分页存储管理方式是为实现离散分配方式，以消减内存的外零头，提高内存的利用率。仅仅只是系统管理上的需要。<br>b 分段存储管理方式中的段则是信息的逻辑单位。分段的目的主要在于能更好地满足用户的需要。<br>(2)<br>a 页的大小固定且由系统决定，直接由硬件实现，因而在每个系统中只能有一种大小的页面。<br>b 段的长度不固定，决定于用户所编写的程序，通常由编译程序在对源程序进行编译时，根据信息的性质来划分。<br>(3)<br>a 分页的用户程序地址空间是一维的，属于单一的线性地址空间，程序员只需利用一个记忆符即可表示一个地址。<br>b 分段系统中用户程序的地址空间是二维的，程序员在标识一个地址时，既需给出段名又需给出段内地址。</p><h4 id="27-试全面比较连续分配和离散分配方式。"><a href="#27-试全面比较连续分配和离散分配方式。" class="headerlink" title="27.试全面比较连续分配和离散分配方式。"></a>27.试全面比较连续分配和离散分配方式。</h4><p>1)连续分配是指为一个用户程序分配一个连续的地址空间，包括单一和分区两种分配方式。单一方式将内存分为系统区和用户区，最简单，只用于单用户单任务操作系统；分区方式分固定和动态分区。<br>2）离散分配方式为分页、分段和段页式存储管理。分页式存储管理旨在提高内存利用率，分段式存储管辂旨在满足用户的需要，段页式存储管理则将两者结合起来，具有分段系统便于实现、可共享、易于保护和和动态连接等优点，又能像分页系统很好解决外部碎片及为各段可离散分配内存等问题，是比较有效的存储管理方式；</p><table><thead><tr><th>技术性能</th><th>连续分配</th><th>离散分配</th></tr></thead><tbody><tr><td>大批量数据的存取速度</td><td>较快</td><td>较慢</td></tr><tr><td>机制的复杂性</td><td>较简单</td><td>较复杂</td></tr><tr><td>内存碎片</td><td>较大</td><td>较小</td></tr><tr><td>实现虚拟技术</td><td>较难</td><td>较易</td></tr><tr><td>实现动态链接</td><td>较难</td><td>较易</td></tr></tbody></table><h4 id="补充-2"><a href="#补充-2" class="headerlink" title="补充"></a>补充</h4><h5 id="指导书-p102-例13-p103-例15"><a href="#指导书-p102-例13-p103-例15" class="headerlink" title="指导书 p102 例13 p103 例15"></a>指导书 p102 例13 p103 例15</h5><h5 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h5><p>某虚拟存储器的用户空间共有32个页面，每页1KB，主存16KB。假定某时刻系统为用户的第0、1、2、3页分配的物理块号为5、10、4、7，而该用户作业的长度为6页。试将十六进制的虚拟地址0A5C、103C、1A5C转换成物理地址。<br>  答：由题可知，该系统的逻辑地址有15位，其中高五位为页号，低十位为页内地址；物理地址有14位，其中高4位为块号，低十位为快内地址。<br>  逻辑地址是十六进制，需转换成二进制以直接获取页号和页内地址，再完成地址转换。<br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""></p><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><h4 id="1-常规存储器管理方式具有哪两大特征-它对系统性能有何影响-p153"><a href="#1-常规存储器管理方式具有哪两大特征-它对系统性能有何影响-p153" class="headerlink" title="1.常规存储器管理方式具有哪两大特征?它对系统性能有何影响?p153"></a>1.常规存储器管理方式具有哪两大特征?它对系统性能有何影响?p153</h4><p>1）一次性，是指作业必须一次性地全部装入内存后方能开始运行。<br>影响：导致大作业无法在小内存中运行，以及无法进一步提高系统的多道程序度。直接限制了对处理机的利用率和系统的吞吐量的提高。<br>2）驻留性，是指作业被装入内存后，整个作业都一直驻留在内存中，其中任何部分都不会被换出，直至作业运行结束。<br>影响：尽管运行中的进程会因I/O等原因而被阻塞，可能处于长期等待状态，或者有的程序模块在运行过一次后就不再运行了，他们都仍将留在内存中，继续占用宝贵的内存资源。</p><h4 id="3-虚拟存储器有哪些特征？其中最本质的特征是什么？p155"><a href="#3-虚拟存储器有哪些特征？其中最本质的特征是什么？p155" class="headerlink" title="3.虚拟存储器有哪些特征？其中最本质的特征是什么？p155"></a>3.虚拟存储器有哪些特征？其中最本质的特征是什么？p155</h4><p>1）多次性。（相对于传统存储器的一次性）<br>2）对换性。（相对于传统存储器的常驻性）<br>3）虚拟性。（指能从逻辑上扩充内存容量，使用户所看到的内存容量远大于实际内存容量）<br>（ 4）离散性。 ）<br>最本质特征是虚拟性</p><h4 id="8-试说明请求分页系统中的地址变换过程。p158、159"><a href="#8-试说明请求分页系统中的地址变换过程。p158、159" class="headerlink" title="8.试说明请求分页系统中的地址变换过程。p158、159"></a>8.试说明请求分页系统中的地址变换过程。p158、159</h4><p>首先检索快表，试图从中找出要访问的页。若找到便修改页表项中的访问位，供置换算法选换出页面时参考。对于些指令，还需将修改位置为“1”，表示该页在调入内存后已被修改。然后利用页表项中给出的物理块号和页内地址形成物理地址。<br>如果在快表中未找到该页的页表项，则应到内存中去查页表，再从找到的页表项中的状态位P来了解该页是否已调入内存。若该页已调入内存，这时应将该页的页表项写入块表。当快表已满时，则应先调出按某种算法所确定的页的页表项，然后再写入该页的页表项；若该页尚未调入内存，这时应产生缺页中断，请求OS从外存把该页调入内存。</p><h4 id="12-在请求分页系统中，常采用哪几种页面置换方法？p162-168"><a href="#12-在请求分页系统中，常采用哪几种页面置换方法？p162-168" class="headerlink" title="12.在请求分页系统中，常采用哪几种页面置换方法？p162-168"></a>12.在请求分页系统中，常采用哪几种页面置换方法？p162-168</h4><p>最佳置换算法（理论上的算法）、先进先出（FIFO）页面置换算法、LRU（最近最久未使用）置换算法、最近最少(LFU)使用置换算法、Clock置换算法、页面缓冲算法。</p><h4 id="13-在一个请求分页系统中，采用FIFO页面置换算法时，"><a href="#13-在一个请求分页系统中，采用FIFO页面置换算法时，" class="headerlink" title="13.在一个请求分页系统中，采用FIFO页面置换算法时，"></a>13.在一个请求分页系统中，采用FIFO页面置换算法时，</h4><p>假如作业的页面走向为4、3、2、1、4、3、5、4、3、2、1、5，当分配给该作业的物理块数M分别为3和4时，试计算在访问过程中所发生的缺页次数和缺页率，并比较所得结果。参考p163<br>略</p><h4 id="15-试说明改进型Clock置换算法的基本原理p167"><a href="#15-试说明改进型Clock置换算法的基本原理p167" class="headerlink" title="15.试说明改进型Clock置换算法的基本原理p167"></a>15.试说明改进型Clock置换算法的基本原理p167</h4><p>在改进型Clock算法中，除需考虑页面的使用情况外，还需增加一个因素——置换代价。这样，选择页面换出时，既要是未使用过的页面，又要是未被修改过的页面。</p><h4 id="18-在请求分页系统中-产生”抖动”的原因是什么-p170"><a href="#18-在请求分页系统中-产生”抖动”的原因是什么-p170" class="headerlink" title="18.在请求分页系统中,产生”抖动”的原因是什么?p170"></a>18.在请求分页系统中,产生”抖动”的原因是什么?p170</h4><p>发生”抖动”的根本原因是,同时在系统中运行的进程太多,由此分配给每一个进程的物理块太少,不能满足进程正常运行的基本要求,致使每个进程在运行时,频繁的出现缺页,必须请求系统将所缺之页调入内存。</p><h4 id="20-当前可以利用哪几种方法来防止“抖动”？p172"><a href="#20-当前可以利用哪几种方法来防止“抖动”？p172" class="headerlink" title="20.当前可以利用哪几种方法来防止“抖动”？p172"></a>20.当前可以利用哪几种方法来防止“抖动”？p172</h4><p>1）采取局部置换策略<br>2）把工作集算法融入到处理机调度中<br>3）利用“L=S”准则调节缺页率<br>4）选择暂停的进程</p><h4 id="24-说明请求分段系统中的缺页中断处理过程。p173"><a href="#24-说明请求分段系统中的缺页中断处理过程。p173" class="headerlink" title="24.说明请求分段系统中的缺页中断处理过程。p173"></a>24.说明请求分段系统中的缺页中断处理过程。p173</h4><p><img src="3.jpg" alt=""></p><h4 id="26-如何实现共享分段的分配和回收？p175"><a href="#26-如何实现共享分段的分配和回收？p175" class="headerlink" title="26.如何实现共享分段的分配和回收？p175"></a>26.如何实现共享分段的分配和回收？p175</h4><p>1）共享段的分配<br>在为共享段分配内存时，对第一个请求使用该共享段的进程，由系统为该共享段分配一物理区，再把共享段调入该区，同时将该区的实址填入请求进程的段表的相应项中，还须在共享表中增加一表项，填写请求使用该共享段的进程名、段号和存取控制相关的数据，把count设置为1.当有其他进程需要调用该共享段时，由于该共享段已被调入内存，故此时无需再为该段分配内存，而只需在调用进程的段表中增加一表项，填写该共享段的段表中增加一个表项，填上调用进程的进程名、该共享段在本进程中的段号、存取控制等，再执行count=count+1操作，以表明有两个进程共享该段。以后，凡有进程需要访问此共享段时，都按上述方式<br>在共享段的段表中增加一个表项。<br>2）共享段的回收<br>当共享此段的某进程不再需要该段时，应将该段释放，包括撤销在该进程段表中共享段所对应的表项，以及执行count::=count-1操作。若结果为0，则需由系统回收该共享段的物理内存，以及取消在共享段表中该段所对应的表项，表明此时已没有进程使用该段。否则（减1结果不为0），只是取消调用者进程在共享段表中的有关记录。</p><h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><h4 id="2-简要说明I-O软件的四个层次的基本功能-p180"><a href="#2-简要说明I-O软件的四个层次的基本功能-p180" class="headerlink" title="2.简要说明I/O软件的四个层次的基本功能.p180"></a>2.简要说明I/O软件的四个层次的基本功能.p180</h4><p>1) 用户层I/O软件，实现与用户交互的接口，用户可直接调用该层所提供的、与IO操作有关的库函数对设备进行操作。<br>2) 设备独立性软件，用于实现用户程序与设备驱动器的统接口、设备命名、设备的保护以及设备的分配与释放等，同时为设备管理和数据传送提供必要的存储空间。<br>3) 设备驱动程序，与硬件直接相关，用于具体实现系统对设备发出的操作指令，驱动I/O设备工作的驱动程序。<br>4)中断处理程序，用于保存被中断进程的CPU环境，转入相应的中断处理程序进行处理，处理完毕再恢复被中断进程的现场后，返回到被中断的进程。</p><h4 id="8-为什么说中断是OS赖以生存的基础-p189"><a href="#8-为什么说中断是OS赖以生存的基础-p189" class="headerlink" title="8.为什么说中断是OS赖以生存的基础?p189"></a>8.为什么说中断是OS赖以生存的基础?p189</h4><p>1)进程之间的切换是通过中断来完成的，它是多道程序得以实现的基础，没有中断，就不可能实现多道程序；<br>2)中断也是设备管理的基础，为了提高处理机的利用率和实现CPU和I\O设备并行执行，也需要有中断。</p><h4 id="12-是说明设备驱动程序具有哪些特点-p193"><a href="#12-是说明设备驱动程序具有哪些特点-p193" class="headerlink" title="12.是说明设备驱动程序具有哪些特点.p193"></a>12.是说明设备驱动程序具有哪些特点.p193</h4><p>1)是请求I/O进程与设备控制器间的一个通信程序;<br>2)驱动程序与I/O设备的特性紧密相关;<br>3)驱动程序与I/O控制方式紧密相关;<br>4)驱动程序与硬件紧密相关,部分程序用汇编语言书写,基本部分往往固化在ROM中.</p><h4 id="13-设备驱动程序通常要完成哪些工作-p192"><a href="#13-设备驱动程序通常要完成哪些工作-p192" class="headerlink" title="13.设备驱动程序通常要完成哪些工作?p192"></a>13.设备驱动程序通常要完成哪些工作?p192</h4><p>1)将接收到的抽象要求转为具体要求;<br>2)检查用户I/O请求合法性,了解I/O设备状态,传递有关参数,设置设备工作方式;<br>3)发出I/O命令,启动分配到I/O设备,完成指定I/O操作;<br>4)及时响应由控制器或通道发来的中断请求,根据中断类型调用相应中断处理程序处理;<br>5)对于有通道的计算机,驱动程序还应该根据用户I/O请求自动构成通道程序.</p><h4 id="14-简要说明设备驱动程序的处理过程可分为几步-p193"><a href="#14-简要说明设备驱动程序的处理过程可分为几步-p193" class="headerlink" title="14.简要说明设备驱动程序的处理过程可分为几步.p193"></a>14.简要说明设备驱动程序的处理过程可分为几步.p193</h4><p>1)将抽象要求转换为具体要求.<br>2)对服务请求进行校验.<br>3)检查设备的状态.<br>4)传送必要的参数.<br>5)启动I/O设备.</p><h4 id="16-有哪几种I-O控制方式-各适用于何种场合-p195"><a href="#16-有哪几种I-O控制方式-各适用于何种场合-p195" class="headerlink" title="16.有哪几种I/O控制方式?各适用于何种场合?p195"></a>16.有哪几种I/O控制方式?各适用于何种场合?p195</h4><p>1)使用轮询的可编程I/O方式<br>  早期的计算机系统中由于无中断机构，处理机对I/O设备的控制采取程序I/O方式，或称忙-等待方式。在程序I/O方式中，由于CPU的高速性和I/0设备的低速性，致使CPU的绝大部分时间都处于等待I/0设备完成数据I/O的循环测试中，造成对CPU的极大浪费，现在这种方式已基本被淘汰。</p><p>2)使用中断的可编程I/O方式<br>  即当某进程要启动某个I/O设备工作时，便由CPU向相应的设备控制器发出一条I/O命令，然后立即返回继续执行原来的任务。设备控制器于是按照该命令的要求去控制指定I/O设备。此时，CPU与I/O设备并行操作。中断驱动方式可以成百上千倍地提高CPU的利用率，它适用于具有中断机构的计算机系统。</p><p>3)直接存储器访问方式<br>  DMA方式较之中断驱动方式，又是成百上千倍地减少了CPU对I/O设备的干预，进一步提高了CPU 与I/O 设备的并行操作程度，它适用于具有DMA 控制器的计算机系统中。</p><p>4)I/P通道控制方式<br>  这种控制方式可实现CPU 、通道和I/O 设备三者的并行操作，从而更有效地提高整个系统的资源利用率，它适用于具有通道程序的计算机系统。</p><h4 id="17-试说明DMA的工作流程-p197"><a href="#17-试说明DMA的工作流程-p197" class="headerlink" title="17.试说明DMA的工作流程.p197"></a>17.试说明DMA的工作流程.p197</h4><p>1）CPU需要访问外存时便发送。一条访问命令给DMA的命令寄存器CR、一个内存地址码给DMA的内存地址寄存器MAR、本次要传送的字节数给DMA的数据计数器DC、外存地址给DMA的I/O控制逻辑。<br>2）CPU启动DMA控制器后转向其他处理。<br>3）DMA控制器负责控制数据在内存与外设之间传送。每传送一个字节就需挪用一个内存周期，按MAR从内存读出或写入内存一个字节，修改MAR和计算器DC。<br>4）当DC修改为0时，表示传送结束，由DMA向CPU发出中断请求。</p><h4 id="22-在实现后台打印时-SPOOLing系统应为请求I-O的进程提供哪些服务-p208"><a href="#22-在实现后台打印时-SPOOLing系统应为请求I-O的进程提供哪些服务-p208" class="headerlink" title="22.在实现后台打印时,SPOOLing系统应为请求I/O的进程提供哪些服务?p208"></a>22.在实现后台打印时,SPOOLing系统应为请求I/O的进程提供哪些服务?p208</h4><p>1）由输出进程在输出井中为之申请一个空闲磁盘块区，并将要打印的数据填入其中； 2）输出进程为用户进程申请空白的用户请求打印表，并将用户的打印要求填入其中，并将该表挂到请求打印队列；<br>3）—旦打印机空闲，输出进程便从请求打印队列的队首取出一张请求打印表，根据表中要求将要打印的数据从输出井传送到内存缓冲区，再由打印机打印。</p><h4 id="23-假脱机系统向用户提供共享打印机的基本思想是什么-p208"><a href="#23-假脱机系统向用户提供共享打印机的基本思想是什么-p208" class="headerlink" title="23.假脱机系统向用户提供共享打印机的基本思想是什么?p208"></a>23.假脱机系统向用户提供共享打印机的基本思想是什么?p208</h4><p>对每个用户而言,系统并非即时执行其程序输出数据的真实打印操作,而只是即时将数据输出到缓冲区,这时的数据并未真正被打印,只是让用户感觉系统已为他打印;<br>真正的打印操作,是在打印机空闲且该打印任务在等待队列中已排到队首时进行的;而且,打印操作本身也是利用cpu的一个时间片,没有使用专门的外围机;<br>以上过程是对用户屏蔽的,用户是不可见的.</p><h4 id="24-引入缓冲的主要原因是什么-p209"><a href="#24-引入缓冲的主要原因是什么-p209" class="headerlink" title="24.引入缓冲的主要原因是什么?p209"></a>24.引入缓冲的主要原因是什么?p209</h4><p>1)缓和CPU与I/O设备间速度不匹配的矛盾.<br>2)减少对CPU的中断率,放宽对CPU中断响应时间的限制.<br>3)解决数据粒度不匹配的问题.<br>4)提高CPU和I/O设备间的并行性.</p><h4 id="30-磁盘访问时间由哪几部分组成-每部分时间应如何计算-p216"><a href="#30-磁盘访问时间由哪几部分组成-每部分时间应如何计算-p216" class="headerlink" title="30.磁盘访问时间由哪几部分组成?每部分时间应如何计算?p216"></a>30.磁盘访问时间由哪几部分组成?每部分时间应如何计算?p216</h4><p>1.寻道时间，启动磁臂的时间s与磁头移动n条磁道所花费的时间之和<br>t=mxn+s（一般磁盘，m=0.2，高速磁盘，m&lt;=0.1）<br>2.旋转延迟时间，是指定扇区移动到磁头下面所经历的时间<br>3.传输时间 ，指把数据从磁盘读出或向磁盘写入数据所经历的时间<br>若每次读/写的字节数为b，磁盘每秒钟的转速为r，一条磁道上的字节数为N<br>t=b/(rN)</p><h4 id="31-目前常用的磁盘调度算法有哪几种-每种算法优先考虑的问题是什么"><a href="#31-目前常用的磁盘调度算法有哪几种-每种算法优先考虑的问题是什么" class="headerlink" title="31.目前常用的磁盘调度算法有哪几种?每种算法优先考虑的问题是什么?"></a>31.目前常用的磁盘调度算法有哪几种?每种算法优先考虑的问题是什么?</h4><p>(1)先来先服务(FCFS，First-Come First-Served)<br>此算法根据进程请求访问磁盘的先后次序进行调度。</p><p>(2)最短寻道时间优先(SSTF ，ShortestSeekTimeFirst)<br>该算法选择这样的进程，其要求访问的磁道与当前磁头所在的磁道距离最近，以使每次的寻道时间最短，但这种调度算法却不能保证平均寻道时间最短。</p><p>(3)扫描(SCAN)算法<br>SCAN算法不仅考虑到欲访问的磁道与当前磁道的距离，更优先考虑的是磁头的当前移动方向。</p><p>(4)循环扫描(CSCAN)算法<br>CSCAN算法规定磁头单向移动，避免了扫描算法导致的某些进程磁盘请求的严重延迟。</p><p>(5) N-Step-SCAN和FSCAN调度算法<br>1) N-Step-SCAN算法。为克服前述SSTF、SCAN、CSCAN等调度算法都可能出现的磁臂停留在某处不动的情况即磁臂粘着现象，将磁盘请求队列分成若干个长度为N的子队列，按先来先服务算法依次处理这些子队列，而各队列分别以扫描算法进行处理。<br>2) FSCAN算法<br>FSCAN算法实质上是N步SCAN算法的简化。它只将磁盘请求访问队列分成两个子队列。一是当前所有请求磁盘I/O的进程形成的队列，由磁盘调度按SCAN算法进行处理。另一个队列则是在 扫描期间，新出现的所有请求磁盘I/O进程的队列，放入另一等待处理的请求队列。这样，所有的新请求都将被推迟到下一次扫描时处理。</p><h4 id="补充-3"><a href="#补充-3" class="headerlink" title="补充"></a>补充</h4><p><img src="4.jpg" alt=""><br><img src="5.jpg" alt=""></p><h2 id="重点课后题-7-8章"><a href="#重点课后题-7-8章" class="headerlink" title="重点课后题(7-8章)"></a>重点课后题(7-8章)</h2><h3 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h3><h4 id="4-试说明用户可以对文件施加的主要操作有哪些-P225"><a href="#4-试说明用户可以对文件施加的主要操作有哪些-P225" class="headerlink" title="4.试说明用户可以对文件施加的主要操作有哪些?P225"></a>4.试说明用户可以对文件施加的主要操作有哪些?P225</h4><p>创建、删除、读、写、设置文件读写位置，文件的打开关闭、改变文件名等。</p><h4 id="5-为什么在大多数OS中都引入了“打开”这一文件系统调用？打开的含义是什么？P225"><a href="#5-为什么在大多数OS中都引入了“打开”这一文件系统调用？打开的含义是什么？P225" class="headerlink" title="5.为什么在大多数OS中都引入了“打开”这一文件系统调用？打开的含义是什么？P225"></a>5.为什么在大多数OS中都引入了“打开”这一文件系统调用？打开的含义是什么？P225</h4><p>1）目的是为了避免多次重复地检索目录。<br>2）“打开”是指系统将指明文件的属性（包括该文件在外存上的物理位置），从外存拷贝到内存打开文件表的一个表目中，并将该表目的编号返回给用户。换言之就是在用户和指定文件之间建立起一个链接。</p><h4 id="6-何谓文件的逻辑结构？何谓文件的物理结构？P226"><a href="#6-何谓文件的逻辑结构？何谓文件的物理结构？P226" class="headerlink" title="6.何谓文件的逻辑结构？何谓文件的物理结构？P226"></a>6.何谓文件的逻辑结构？何谓文件的物理结构？P226</h4><p>1）文件的逻辑结构。这是从用户观点出发所观察到的文件组织形式，即文件是由一系列的逻辑记录组成的，是用户可以直接处理的数据及其结构，它独立于文件的物理特性，又称为文件组织。<br>2）文件的物理结构，又称为文件的存储结构。这是指系统将文件存储在外存上所形成的一种存储组织形式，是用户不能看见的。文件的物理结构不仅与存储介质的存储性能有关，而且与所采用的外存分配方式有关。无论是文件的逻辑结构，还是其物理结构，都会影响对文件的检索速度。</p><h4 id="11-试说明索引顺序文件的几个主要特征。P230"><a href="#11-试说明索引顺序文件的几个主要特征。P230" class="headerlink" title="11.试说明索引顺序文件的几个主要特征。P230"></a>11.试说明索引顺序文件的几个主要特征。P230</h4><p>1）索引顺序文件是对顺序文件的一种改进，它基本上克服了变长记录的顺序文件不能随机访问，以及不便于记录的删除和插入的缺点。但它仍保留了顺序文件的关键特征，即记录是按关键字的顺序组织起来的。<br>2）弓丨入了文件索引表，通过该表可以实现对索引顺序文件的随机访问。<br>3）増加了溢出（overflow ）文件，用它来记录新增加的、删除的和修改的记录。</p><h4 id="14-对目录管理的主要要求是什么？P232"><a href="#14-对目录管理的主要要求是什么？P232" class="headerlink" title="14.对目录管理的主要要求是什么？P232"></a>14.对目录管理的主要要求是什么？P232</h4><p>1）实现“按名存取”。<br>2）提高对目录的管理速度。<br>3）文件共享。<br>4）允许文件重名。</p><h4 id="16-目前广泛采用的目录结构形式是那种？它有什么优点？P236"><a href="#16-目前广泛采用的目录结构形式是那种？它有什么优点？P236" class="headerlink" title="16.目前广泛采用的目录结构形式是那种？它有什么优点？P236"></a>16.目前广泛采用的目录结构形式是那种？它有什么优点？P236</h4><p>最通用而且实用的文件目录无疑是树形结构目录。它可以明显提高对目录的检索速度和文件系统的性能。</p><h4 id="20-试说明在树形目录结构中线性检索法的检索过程，并且给出相应的流程图？P239"><a href="#20-试说明在树形目录结构中线性检索法的检索过程，并且给出相应的流程图？P239" class="headerlink" title="20.试说明在树形目录结构中线性检索法的检索过程，并且给出相应的流程图？P239"></a>20.试说明在树形目录结构中线性检索法的检索过程，并且给出相应的流程图？P239</h4><p><strong>略</strong></p><h4 id="20-基于索引结点的文件共享方式有何优点"><a href="#20-基于索引结点的文件共享方式有何优点" class="headerlink" title="20.基于索引结点的文件共享方式有何优点?"></a>20.基于索引结点的文件共享方式有何优点?</h4><p>优点是建立新的共享链接时，不改变文件拥有者关系，仅把索引结点共享计数器加 1，系统可获悉了由多少个目录项指向该文件。缺点是拥有者不能删除自己的文件，否则会出错。</p><h4 id="22、什么是主父目录和链接父目录？如何利用符号链实现共享？P242"><a href="#22、什么是主父目录和链接父目录？如何利用符号链实现共享？P242" class="headerlink" title="22、什么是主父目录和链接父目录？如何利用符号链实现共享？P242"></a>22、什么是主父目录和链接父目录？如何利用符号链实现共享？P242</h4><p><strong>略</strong></p><h4 id="23-基于符号链的文件共享方式有何优点？P243"><a href="#23-基于符号链的文件共享方式有何优点？P243" class="headerlink" title="23.基于符号链的文件共享方式有何优点？P243"></a>23.基于符号链的文件共享方式有何优点？P243</h4><p>只是文件主才拥有指向其索引结点的指针；而共享该文件的其他用户，则只有该文件的路径名，并不拥有指向其索引结点的指针。当文件的拥有者把一个共享文件删除后，其他用户试图通过符号链去访问一个已被删除的共享文件时，会因系统找不到该文件而使访问失，于是用户再将符号链删除，，因此不存在文件删除问题/指针悬空问题。</p><h4 id="28-增加控制权的主要目的是什么？试举例说明控制权的应用P247"><a href="#28-增加控制权的主要目的是什么？试举例说明控制权的应用P247" class="headerlink" title="28.增加控制权的主要目的是什么？试举例说明控制权的应用P247"></a>28.增加控制权的主要目的是什么？试举例说明控制权的应用P247</h4><p>控制权用于改变某个域中运行进程关于不同对象的访问权。若某域访问权access（i，j）中含有控制权C，则运行在Di域中的进程能改变运行在Qj域中的任何进程关于任何对象的任何访问权。</p><h4 id="29-什么是访问控制表？什么是访问权限表？P248"><a href="#29-什么是访问控制表？什么是访问权限表？P248" class="headerlink" title="29.什么是访问控制表？什么是访问权限表？P248"></a>29.什么是访问控制表？什么是访问权限表？P248</h4><p>（1）访问控制表的定义 访问控制表指对访问矩阵按列（对象）划分，为每一列建立一张访问控制表ACL。在该表中， 己把矩阵中属亍该列的所有空项删除，此页的访问控制表是由一有序对（域，权集）所组成的。 由亍在大多数情况下，矩阵中的空项进多亍非空顷，因而使用访问控制表可以显著地减少所占用 的存储空间，并能提高查找速度。访问控制表也可用亍定义缺省的访问权集，即在该表中列出了 各个域对某对象的缺省访问权集。<br>（2）访问权限表的定义 如果把访问矩阵按行（即域）划分，便可由每一行构成一张访问权限表。换言之，这是由一个域对每一个对象可以执行的一组操作所构成的表。表中的每一顷即为该域对某对象的访问权限。 当域为用户（进程）、对象为文件页，访问权限表便可用来描述一个用户（进程）对每一个文件 所能执行的一组操作。</p><h3 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h3><h4 id="1-目前常用的外存有哪几种组织方式-P250"><a href="#1-目前常用的外存有哪几种组织方式-P250" class="headerlink" title="1.目前常用的外存有哪几种组织方式?P250"></a>1.目前常用的外存有哪几种组织方式?P250</h4><p>1)连续组织方式.<br>2)链接组织方式.<br>3)索引组织方式.</p><h4 id="4-在文件分配表中为什么要引入”簇”的概念…P254"><a href="#4-在文件分配表中为什么要引入”簇”的概念…P254" class="headerlink" title="4.在文件分配表中为什么要引入”簇”的概念…P254"></a>4.在文件分配表中为什么要引入”簇”的概念…P254</h4><p>在文件分配表中为什么要引入”簇”的概念?以”簇”为基本的分配单位有什么好处?<br>1)要增加盘块的容量是不方便和不灵活的.<br>2)好处是能适应磁盘容量不断增大的情况,还可以减少FAT表中的项数,使FAT表占用更少的存储空间,并减少访问FAT表的存取开销;但这样也会造成更大的簇内零头</p><h4 id="6-试解释逻辑簇符号和虚拟簇号这两个名词…P256"><a href="#6-试解释逻辑簇符号和虚拟簇号这两个名词…P256" class="headerlink" title="6.试解释逻辑簇符号和虚拟簇号这两个名词…P256"></a>6.试解释逻辑簇符号和虚拟簇号这两个名词…P256</h4><p>试解释逻辑簇符号和虚拟簇号这两个名词,NTFS是如何将它们映射到文件的物理地址上的?<br>1）逻辑簇号的定义 逻辑簇号（LCN）是对卷进行管理的工具，使用逻辑簇号可对卷的第一个簇到最后一个簇进 行编号。<br>2）虚拟簇号的定义 虚拟簇号（VCN）也是对卷进行管理的工具，使用虚拟簇号可对特定文件的族从头到尾进行 编号。它不要求物理上是连续的，要确定VCN 的磁盘上的定位需先将其转换为LCN。<br>3）NTFS 将它们映射到文件的物理地址的方法 NTFS 在进行地址映射时，可以通过卷因子与LCN 的乘积，算出卷上的物理字节偏移量，从 而得到文件数据所在的物理磁盘地址。为了方便文件中数据的引用，NTFS 还可以使用VCN,以文 件为单位，将属于某个文件的簇按顺序进行编号。只要知道了文件开始的簇地址，便可将 VCN 映射到LCN。</p><h4 id="7-在MS-DOS中有两个文件A和B-A占用11、12、16、14四个盘块；B占用13、18和20三个盘块。试画出在文件A和B中各盘块间的链接情况及FAT的情况。"><a href="#7-在MS-DOS中有两个文件A和B-A占用11、12、16、14四个盘块；B占用13、18和20三个盘块。试画出在文件A和B中各盘块间的链接情况及FAT的情况。" class="headerlink" title="7.在MS-DOS中有两个文件A和B,A占用11、12、16、14四个盘块；B占用13、18和20三个盘块。试画出在文件A和B中各盘块间的链接情况及FAT的情况。"></a>7.在MS-DOS中有两个文件A和B,A占用11、12、16、14四个盘块；B占用13、18和20三个盘块。试画出在文件A和B中各盘块间的链接情况及FAT的情况。</h4><h4 id="10-为了快速访问，又易于更新，当数据为以下形式时，应选用何种文件组织方式？"><a href="#10-为了快速访问，又易于更新，当数据为以下形式时，应选用何种文件组织方式？" class="headerlink" title="10.为了快速访问，又易于更新，当数据为以下形式时，应选用何种文件组织方式？"></a>10.为了快速访问，又易于更新，当数据为以下形式时，应选用何种文件组织方式？</h4><p>1）不经常更新，经常随机访问；<br>2）经常更新，经常按一定顺序访问；<br>3）经常更新，经常随机访问；</p><h4 id="11-在UNIX中，如果一个盘块的大小为1KB，每个盘块号占4个字节，即每块可放256个地址，请转换下列文件的字节偏移量为物理地址："><a href="#11-在UNIX中，如果一个盘块的大小为1KB，每个盘块号占4个字节，即每块可放256个地址，请转换下列文件的字节偏移量为物理地址：" class="headerlink" title="11.在UNIX中，如果一个盘块的大小为1KB，每个盘块号占4个字节，即每块可放256个地址，请转换下列文件的字节偏移量为物理地址："></a>11.在UNIX中，如果一个盘块的大小为1KB，每个盘块号占4个字节，即每块可放256个地址，请转换下列文件的字节偏移量为物理地址：</h4><p>1）9999；2）18000；3）420000</p><h4 id="13-试说明增量式索引组织方式。"><a href="#13-试说明增量式索引组织方式。" class="headerlink" title="13.试说明增量式索引组织方式。"></a>13.试说明增量式索引组织方式。</h4><h4 id="14-有一计算机系统利用如图所示位示图来管理空闲盘块。盘块的大小为1KB，现要为某文件分配两个盘块，试说明盘块的具体分配过程。"><a href="#14-有一计算机系统利用如图所示位示图来管理空闲盘块。盘块的大小为1KB，现要为某文件分配两个盘块，试说明盘块的具体分配过程。" class="headerlink" title="14.有一计算机系统利用如图所示位示图来管理空闲盘块。盘块的大小为1KB，现要为某文件分配两个盘块，试说明盘块的具体分配过程。"></a>14.有一计算机系统利用如图所示位示图来管理空闲盘块。盘块的大小为1KB，现要为某文件分配两个盘块，试说明盘块的具体分配过程。</h4><h4 id="17-可从哪几方面来提高对文件的访问速度？"><a href="#17-可从哪几方面来提高对文件的访问速度？" class="headerlink" title="17.可从哪几方面来提高对文件的访问速度？"></a>17.可从哪几方面来提高对文件的访问速度？</h4><h4 id="18-何谓磁盘高速缓存？在设计磁盘高速缓存时需要考虑哪些问题？"><a href="#18-何谓磁盘高速缓存？在设计磁盘高速缓存时需要考虑哪些问题？" class="headerlink" title="18.何谓磁盘高速缓存？在设计磁盘高速缓存时需要考虑哪些问题？"></a>18.何谓磁盘高速缓存？在设计磁盘高速缓存时需要考虑哪些问题？</h4><h4 id="20-何谓提前读和延迟写"><a href="#20-何谓提前读和延迟写" class="headerlink" title="20.何谓提前读和延迟写?"></a>20.何谓提前读和延迟写?</h4><h4 id="25-为什么要在系统中配置后备系统-目前常采用做后备系统的设备有哪几种"><a href="#25-为什么要在系统中配置后备系统-目前常采用做后备系统的设备有哪几种" class="headerlink" title="25.为什么要在系统中配置后备系统?目前常采用做后备系统的设备有哪几种?"></a>25.为什么要在系统中配置后备系统?目前常采用做后备系统的设备有哪几种?</h4><h4 id="27-引入检查点的目的是什么-引入检查点后又如何进行恢复处理"><a href="#27-引入检查点的目的是什么-引入检查点后又如何进行恢复处理" class="headerlink" title="27.引入检查点的目的是什么?引入检查点后又如何进行恢复处理?"></a>27.引入检查点的目的是什么?引入检查点后又如何进行恢复处理?</h4><h4 id="29-当系统中有重复文件时-如何保持他们的一致性"><a href="#29-当系统中有重复文件时-如何保持他们的一致性" class="headerlink" title="29.当系统中有重复文件时,如何保持他们的一致性?"></a>29.当系统中有重复文件时,如何保持他们的一致性?</h4><h4 id="30-如何检查盘块号的一致性-检查时可能出现哪几种情况"><a href="#30-如何检查盘块号的一致性-检查时可能出现哪几种情况" class="headerlink" title="30.如何检查盘块号的一致性?检查时可能出现哪几种情况?"></a>30.如何检查盘块号的一致性?检查时可能出现哪几种情况?</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2019/10/02/py/"/>
      <url>/2019/10/02/py/</url>
      
        <content type="html"><![CDATA[<p><strong><em>python</em></strong><br>  之前学的每门语言都是浅浅浅浅浅浅浅尝辄止看看能不能深入一点</p><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-11 21:00:57</span><span class="token comment" spellcheck="true"># 读</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python 是一个非常好的语言。\n是的，的确非常好!!\n"</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##另一种写法</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'TTBT.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#写</span><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>str <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#另一种写法</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'TTBT.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><h3 id="设置代理ip"><a href="#设置代理ip" class="headerlink" title="设置代理ip"></a>设置代理ip</h3><p>查<a href="https://cn-proxy.com/" target="_blank" rel="noopener">代理ip</a>的网址<br>查<a href="http://icanhazip.com" target="_blank" rel="noopener">当前ip</a>的网址</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-06 22:04:57</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> randomurl <span class="token operator">=</span> <span class="token string">'http://icanhazip.com'</span><span class="token comment" spellcheck="true">#参数是一个字典{'类型','代理ip:端口号'}</span>iplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'124.156.108.71:82'</span><span class="token punctuation">,</span><span class="token string">'183.146.213.157:80'</span><span class="token punctuation">,</span><span class="token string">'39.137.69.6:80'</span><span class="token punctuation">]</span>proxy_support <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>iplist<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定制、创建一个opener</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy_support<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#改useragent</span>opener<span class="token punctuation">.</span>addheaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#安装opener</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#.encode('GBK','ignore').decode('GBk')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前代理IP是'</span><span class="token operator">+</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="贴吧图片"><a href="#贴吧图片" class="headerlink" title="贴吧图片"></a>贴吧图片</h3><p>正则表达式写法很重要</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2019-10-07 20:54:07</span><span class="token comment" spellcheck="true">#fun.py</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> re<span class="token keyword">def</span>  <span class="token function">open_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>  req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'</span><span class="token punctuation">)</span>  page <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>  html <span class="token operator">=</span> page<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">get_img_tieba</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span>path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  p <span class="token operator">=</span> r<span class="token string">'&lt;img class="BDE_Image".*?src="([^"]+\.jpg)"'</span>  imglist <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span>html<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># for each in imglist:</span>  <span class="token comment" spellcheck="true">#   print(each)</span>  <span class="token keyword">for</span> each <span class="token keyword">in</span> imglist<span class="token punctuation">:</span>    filename <span class="token operator">=</span> path<span class="token operator">+</span>each<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>each<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> fun<span class="token keyword">import</span> rehtml<span class="token operator">=</span>fun<span class="token punctuation">.</span>open_url<span class="token punctuation">(</span><span class="token string">'https://tieba.baidu.com/p/6234466251'</span><span class="token punctuation">)</span>fun<span class="token punctuation">.</span>get_img_tieba<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'F:/lkyblogcode/python/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Scarpy框架-小甲鱼"><a href="#Scarpy框架-小甲鱼" class="headerlink" title="Scarpy框架(小甲鱼)"></a>Scarpy框架(小甲鱼)</h3><p>2019-10-09 22:43:57<br><a href="'http://www.scrapyd.cn/'">文档</a></p><h4 id="创建一个Scrapy项目"><a href="#创建一个Scrapy项目" class="headerlink" title="创建一个Scrapy项目"></a>创建一个Scrapy项目</h4><p>cd到一个目录执行”scrapy startproject 名称</p><h4 id="定义Item容器"><a href="#定义Item容器" class="headerlink" title="定义Item容器"></a>定义Item容器</h4><p>修改items.py的内容</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#items.py</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DmozItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    link <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    desc <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h4><p>编写爬虫类Spider，Spider是用户编写用于从网站上爬取数据的类。其包含了一个用于下载的初始URL，然后是如何跟进网页中的链接以及如何分析页面中的内容，还有提取生成item的方法</p><p>命令行创建Spider：<br>scrapy genspider chinadmoz.org<br>或者自己写</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#dmoz_spider此为简化写法详见小甲鱼教程</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DmozSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#需要继承scrapy.Spider类</span>  <span class="token comment" spellcheck="true">#scrapy crawl 'name'</span>  name <span class="token operator">=</span> <span class="token string">"dmoz"</span>  <span class="token comment" spellcheck="true">#网站</span>  allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chinadmoz.org'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#从哪里开始</span>  start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/9/'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/14/'</span>    <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#把爬下来的网页代码保存</span>  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>      filename <span class="token operator">=</span> response<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>      <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>提取网页中需要的数据，在Scrapy中是使用一种基于XPath和CSS的表达式机制：Scrapy Selectors<br>Selector是一个选择器，它有四个基本的方法：<br>  xpath():传入xpath表达式，返回该表达式所对应的所有节点的selector list列表。<br>  css():传入Css表达式，返回该表达式所对应的所有节点的selector list列表。<br>  extract():序列化该节点为unicode字符串并返回list。<br>  re():根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</p><p>①在shell里实验<br>scrapy shell “url”之后使用上述方法筛选需要的信息(要用双引号)<br>response.xpath(‘//标签名’)  选出所有标签的内容<br>/li/a/text() 这样取得是text内容<br>response.xpath(‘//标签名’).extract() ……并字符串化</p><p>response.xpath(‘//ul/li/a/@href’)<br>response.xpath(‘//ul[@class=”…”]/li’)根据类名筛<br>response.xpath(‘//标签名[position()&lt;3]’)选出前两个</p><p>②实验好了修改爬虫代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#dmoz_spider</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DmozSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#scrapy crawl 'name'</span>  name <span class="token operator">=</span> <span class="token string">"dmoz"</span>  <span class="token comment" spellcheck="true">#网站</span>  allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chinadmoz.org'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#从哪里开始</span>  start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/9/'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/14/'</span>    <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#爬取网址信息</span>  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filename = response.url.split("/")[-2]</span>    <span class="token comment" spellcheck="true"># with open(filename,'wb') as f:</span>    <span class="token comment" spellcheck="true">#   f.write(response.body)</span>    sel <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    sites <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="boxbdnopd"]/li'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> site <span class="token keyword">in</span> sites<span class="token punctuation">:</span>        title <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        link <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        desc <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>link<span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行执行scrapy crawl ‘id’</p><h4 id="存储内容"><a href="#存储内容" class="headerlink" title="存储内容"></a>存储内容</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#dmoz_spider</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> tutorial<span class="token punctuation">.</span>items <span class="token keyword">import</span> DmozItem<span class="token keyword">class</span> <span class="token class-name">DmozSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#scrapy crawl 'name'</span>  name <span class="token operator">=</span> <span class="token string">"dmoz"</span>  <span class="token comment" spellcheck="true">#网站</span>  allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chinadmoz.org'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#从哪里开始</span>  start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/9/'</span><span class="token punctuation">,</span>    <span class="token string">'http://www.chinadmoz.org/subindustry/14/'</span>    <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#存到容器里</span>  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filename = response.url.split("/")[-2]</span>    <span class="token comment" spellcheck="true"># with open(filename,'wb') as f:</span>    <span class="token comment" spellcheck="true">#   f.write(response.body)</span>    sel <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    sites <span class="token operator">=</span> sel<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="boxbdnopd"]/li'</span><span class="token punctuation">)</span>    items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> site <span class="token keyword">in</span> sites<span class="token punctuation">:</span>      item <span class="token operator">=</span> DmozItem<span class="token punctuation">(</span><span class="token punctuation">)</span>      item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>      item<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>      item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> site<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'div[@class="listbox"]/h4/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>      items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行执行scrapy crawl dmoz -o items.json -t json<br>-o 文件名  -t 文件格式<br>修改输出文件编码：在settings.py加入FEED_EXPORT_ENCODING = ‘utf-8’即可</p><h3 id="scrapy-css选择器使用"><a href="#scrapy-css选择器使用" class="headerlink" title="scrapy css选择器使用"></a>scrapy css选择器使用</h3><p><a href="http://www.scrapyd.cn/doc/146.html" target="_blank" rel="noopener">教程</a></p><p><a href="'https://zhuanlan.zhihu.com/p/26673214'">所有爬虫文章源头</a></p><h3 id="随记"><a href="#随记" class="headerlink" title="随记"></a>随记</h3><blockquote></blockquote><p>xpath选择 td[i]表示选择第几个 编号从1开始<br>find_element_by_xpath返回一个<br>find_elements_by_xpath返回个列表输出特定位置要find_element_by_xpath[0] 编号从零开始</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录</title>
      <link href="/2019/10/01/article1/"/>
      <url>/2019/10/01/article1/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=26202098&amp;auto=1&amp;height=66"></iframe><br></div><h1 id="石头：47-呼符：0"><a href="#石头：47-呼符：0" class="headerlink" title="石头：47 呼符：0"></a>石头：47 呼符：0</h1><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><h3 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h3><h4 id="2019-9-29"><a href="#2019-9-29" class="headerlink" title="2019.9.29"></a>2019.9.29</h4><p><strong><em>搭建自己的博客吧</em></strong><br>附上连接 <a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">参考</a> <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">原作者</a></p><h3 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h3><h4 id="2019-10-1"><a href="#2019-10-1" class="headerlink" title="2019.10.1"></a>2019.10.1</h4><p><strong><em>博客重建成功但我还是不知道写啥</em></strong><br>  <del>写文章时不要开两个git界面，一个运行着服务，一个提交更改。会有蜜汁错误昨天把我搞炸了费半天劲重建。文章也不要乱删直接改配置内容原因同上。分类标签不要乱写不好去除</del><br>  图片路径要谨慎“medias/banner/0.jpg”这么写少了个/，就在该文件里找图了而不是在根的medias找。幸好这时候可以直接改配置，正确写法应是“/medias/banner/0.jpg” 我枯了</p><h4 id="2019-10-2"><a href="#2019-10-2" class="headerlink" title="2019.10.2"></a>2019.10.2</h4><p>为博客更新了图片加了一首音乐<br>在<a href="https://wallhaven.cc/" target="_blank" rel="noopener">这里</a>找了半天图。。。</p><h4 id="2019-10-3"><a href="#2019-10-3" class="headerlink" title="2019.10.3"></a>2019.10.3</h4><p>把主题颜色换成黑的了，加了emoji功能<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>。留言功能（没人留言吧），照教程得到各种key<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a>,<a href="https://www.jianshu.com/p/4242bb065550" target="_blank" rel="noopener">gittalk</a>再改改配置文件就好。duang的一下加了很多<a href="https://blog.csdn.net/qq_36759224/article/details/85420403" target="_blank" rel="noopener">特技</a>。一行代码看板娘带回家<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">链接</a>对话感觉都无懈可击不用改了作者太强了。感觉最近一直在搬砖。</p><h4 id="2019-10-4"><a href="#2019-10-4" class="headerlink" title="2019.10.4"></a>2019.10.4</h4><p>分类名称搞错只需使用hexo clean命令 再重新生成即可已经没什么好怕的了（可以随便删了）<br><img src="1.jpg" alt="">偶尔放放有意思的（沙雕）图</p><h4 id="2019-10-5"><a href="#2019-10-5" class="headerlink" title="2019.10.5"></a>2019.10.5</h4><p>竟无语凝噎<del>python栏目不知道写啥了</del></p><h4 id="2019-10-6"><a href="#2019-10-6" class="headerlink" title="2019.10.6"></a>2019.10.6</h4><h4 id="2019-10-7"><a href="#2019-10-7" class="headerlink" title="2019.10.7"></a>2019.10.7</h4><p>总是觉得止步不前</p><h4 id="2019-10-9"><a href="#2019-10-9" class="headerlink" title="2019.10.9"></a>2019.10.9</h4><p>开学了随缘更新</p><h4 id="2019-10-11"><a href="#2019-10-11" class="headerlink" title="2019.10.11"></a>2019.10.11</h4><p>一个大胆的想法从产生到怀疑到放弃只要半天特别好玩儿，咸鱼的生活就是这么朴实无华且枯燥.<br>使用hexo clean命令后文章的图片都没了！<br>git init<br>git add .<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:liukunyin/blog_beifen.git<br>git push -u origin master</p><h4 id="2019-10-14"><a href="#2019-10-14" class="headerlink" title="2019.10.14"></a>2019.10.14</h4><p>攒石信息统一放在第一行吧</p><h4 id="2019-10-24"><a href="#2019-10-24" class="headerlink" title="2019.10.24"></a>2019.10.24</h4><p>轻音少女天下第一！</p><h3 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h3><h4 id="2019-12-1"><a href="#2019-12-1" class="headerlink" title="2019.12.1"></a>2019.12.1</h4><p>实验一时爽,报告火葬场</p><h4 id="2019-12-5"><a href="#2019-12-5" class="headerlink" title="2019.12.5"></a>2019.12.5</h4><p>8个月没正经出货了，终于。泪目<br><img src="2.jpg" alt=""></p><h2 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h2><h3 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h3><h4 id="2020-1-2"><a href="#2020-1-2" class="headerlink" title="2020.1.2"></a>2020.1.2</h4><p>考完试了我的青春结束了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
